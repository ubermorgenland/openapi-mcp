{
    "openapi": "3.0.0",
    "info": {
        "version": "2018.1 (current)",
        "title": "TeamCity REST API"
    },
    "tags": [
        {
            "name": "Agent"
        },
        {
            "name": "AgentPool"
        },
        {
            "name": "AgentType"
        },
        {
            "name": "Audit"
        },
        {
            "name": "Avatar"
        },
        {
            "name": "Build"
        },
        {
            "name": "BuildQueue"
        },
        {
            "name": "BuildType"
        },
        {
            "name": "Change"
        },
        {
            "name": "CloudInstance"
        },
        {
            "name": "DeploymentDashboard"
        },
        {
            "name": "Global Server Settings"
        },
        {
            "name": "Group"
        },
        {
            "name": "Investigation"
        },
        {
            "name": "Mute"
        },
        {
            "name": "Node"
        },
        {
            "name": "Problem"
        },
        {
            "name": "ProblemOccurrence"
        },
        {
            "name": "Project"
        },
        {
            "name": "Role"
        },
        {
            "name": "Root"
        },
        {
            "name": "Server"
        },
        {
            "name": "Server Authentication Settings"
        },
        {
            "name": "Test"
        },
        {
            "name": "TestOccurrence"
        },
        {
            "name": "User"
        },
        {
            "name": "VcsRoot"
        },
        {
            "name": "VcsRootInstance"
        },
        {
            "name": "VersionedSettings"
        },
        {
            "name": "health"
        }
    ],
    "paths": {
        "/app/rest": {
            "get": {
                "tags": [
                    "Root"
                ],
                "summary": "Get root endpoints.",
                "description": "",
                "operationId": "getRootEndpointsOfRoot",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agentPools": {
            "get": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Get all agent pools.",
                "description": "",
                "operationId": "getAllAgentPools",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPools"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPools"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Create a new agent pool.",
                "description": "",
                "operationId": "createAgentPool",
                "requestBody": {
                    "$ref": "#/components/requestBodies/agentPool"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}": {
            "get": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Get the agent pool matching the locator.",
                "description": "",
                "operationId": "getAgentPoolOfAgentPool",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Delete the agent pool matching the locator.",
                "description": "",
                "operationId": "deleteAgentPool",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}/agents": {
            "get": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Get the agent of the matching agent pool.",
                "description": "",
                "operationId": "getAllAgentsFromAgentPool",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agents"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agents"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Assign the agent to the matching agent pool.",
                "description": "",
                "operationId": "addAgentToAgentPool",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/agent"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/agent"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}/authorizationTokens": {
            "post": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Generates one-time tokens that can be used by agents to be automatically authorized in the specified agent pool upon registration.",
                "description": "",
                "operationId": "generateAutomaticAgentAuthorizationTokens",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/authorizationTokensRequirements"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/authorizationTokensRequirements"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/items"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/items"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}/projects": {
            "get": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Get all projects of the matching agent pool.",
                "description": "",
                "operationId": "getAllProjectsFromAgentPool",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Assign the project to the matching agent pool.",
                "description": "",
                "operationId": "addProjectToAgentPool",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/project"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Update projects of the matching agent pool.",
                "description": "",
                "operationId": "setAgentPoolProjects",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/projects"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Unassign all projects from the matching agent pool.",
                "description": "",
                "operationId": "deleteAllProjectsFromAgentPool",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}": {
            "delete": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Unassign the project from the matching agent pool.",
                "description": "",
                "operationId": "deleteProjectFromAgentPool",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/agentPools/{agentPoolLocator}/{field}": {
            "get": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Get a field of the matching agent pool.",
                "description": "",
                "operationId": "getFieldFromAgentPool",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "AgentPool"
                ],
                "summary": "Update a field of the matching agent pool.",
                "description": "",
                "operationId": "setAgentPoolField",
                "parameters": [
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentPoolLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agentTypes/{agentTypeLocator}": {
            "get": {
                "tags": [
                    "AgentType"
                ],
                "summary": "Get agent type matching the locator.",
                "description": "",
                "operationId": "getAgentType",
                "parameters": [
                    {
                        "name": "agentTypeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agents": {
            "get": {
                "tags": [
                    "Agent"
                ],
                "summary": "Get all known agents.",
                "description": "",
                "operationId": "getAllAgents",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agents"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agents"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agents/{agentLocator}": {
            "get": {
                "tags": [
                    "Agent"
                ],
                "summary": "Get agent matching the locator.",
                "description": "",
                "operationId": "getAgent",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Agent"
                ],
                "summary": "Delete an inactive agent.",
                "description": "",
                "operationId": "deleteAgent",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/agents/{agentLocator}/authorizedInfo": {
            "get": {
                "tags": [
                    "Agent"
                ],
                "summary": "Get the authorization info of the matching agent.",
                "description": "",
                "operationId": "getAuthorizedInfo",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/authorizedInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authorizedInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Agent"
                ],
                "summary": "Update the authorization info of the matching agent.",
                "description": "",
                "operationId": "setAuthorizedInfo",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/authorizedInfo"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/authorizedInfo"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/authorizedInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/authorizedInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agents/{agentLocator}/compatibilityPolicy": {
            "get": {
                "tags": [
                    "Agent"
                ],
                "summary": "Get the build configuration run policy of the matching agent.",
                "description": "",
                "operationId": "getBuildConfigurationRunPolicy",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/compatibilityPolicy"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/compatibilityPolicy"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Agent"
                ],
                "summary": "Update build configuration run policy of agent matching locator.",
                "description": "",
                "operationId": "setBuildConfigurationRunPolicy",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/compatibilityPolicy"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/compatibilityPolicy"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/compatibilityPolicy"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/compatibilityPolicy"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agents/{agentLocator}/compatibleBuildTypes": {
            "get": {
                "tags": [
                    "Agent"
                ],
                "summary": "Get build types compatible with the matching agent.",
                "description": "",
                "operationId": "getCompatibleBuildTypes",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agents/{agentLocator}/enabledInfo": {
            "get": {
                "tags": [
                    "Agent"
                ],
                "summary": "Check if the matching agent is enabled.",
                "description": "",
                "operationId": "getEnabledInfo",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/enabledInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/enabledInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Agent"
                ],
                "summary": "Update the enablement status of the matching agent.",
                "description": "",
                "operationId": "setEnabledInfo",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/enabledInfo"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/enabledInfo"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/enabledInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/enabledInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agents/{agentLocator}/incompatibleBuildTypes": {
            "get": {
                "tags": [
                    "Agent"
                ],
                "summary": "Get build types incompatible with the matching agent.",
                "description": "",
                "operationId": "getIncompatibleBuildTypes",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/compatibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/compatibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agents/{agentLocator}/pool": {
            "get": {
                "tags": [
                    "Agent"
                ],
                "summary": "Get the agent pool of the matching agent.",
                "description": "",
                "operationId": "getAgentPool",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Agent"
                ],
                "summary": "Assign the matching agent to the specified agent pool.",
                "description": "",
                "operationId": "setAgentPool",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/agentPool"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/agents/{agentLocator}/{field}": {
            "get": {
                "tags": [
                    "Agent"
                ],
                "summary": "Get a field of the matching agent.",
                "description": "",
                "operationId": "getAgentField",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Agent"
                ],
                "summary": "Update a field of the matching agent.",
                "description": "",
                "operationId": "setAgentField",
                "parameters": [
                    {
                        "name": "agentLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AgentLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/apiVersion": {
            "get": {
                "tags": [
                    "Root"
                ],
                "summary": "Get the API version.",
                "description": "",
                "operationId": "getApiVersion",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/audit": {
            "get": {
                "tags": [
                    "Audit"
                ],
                "summary": "Get all audit events.",
                "description": "",
                "operationId": "getAllAuditEvents",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "AuditLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/auditEvents"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/auditEvents"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/audit/{auditEventLocator}": {
            "get": {
                "tags": [
                    "Audit"
                ],
                "summary": "Get audit event matching the locator.",
                "description": "",
                "operationId": "getAuditEvent",
                "parameters": [
                    {
                        "name": "auditEventLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "AuditLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/auditEvent"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/auditEvent"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/avatars/{userLocator}": {
            "put": {
                "tags": [
                    "Avatar"
                ],
                "summary": "Update a users avatar",
                "description": "",
                "operationId": "putAvatar",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "avatar": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Avatar"
                ],
                "summary": "Delete a users avatar",
                "description": "",
                "operationId": "deleteAvatar",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/avatars/{userLocator}/{size}/avatar.png": {
            "get": {
                "tags": [
                    "Avatar"
                ],
                "summary": "Get a users avatar",
                "description": "",
                "operationId": "getAvatar",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "size",
                        "in": "path",
                        "description": "avatar's size",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 2,
                            "maximum": 300
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "image/png": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/avatars/{userLocator}/{size}/avatar.{hash}.png": {
            "get": {
                "tags": [
                    "Avatar"
                ],
                "summary": "Get a users avatar",
                "description": "",
                "operationId": "getAvatarWithHash",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "size",
                        "in": "path",
                        "description": "avatar's size",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 2,
                            "maximum": 300
                        }
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "image/png": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildQueue": {
            "get": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Get all queued builds.",
                "description": "",
                "operationId": "getAllQueuedBuilds",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "BuildQueueLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Add a new build to the queue.",
                "description": "",
                "operationId": "addBuildToQueue",
                "parameters": [
                    {
                        "name": "moveToTop",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/build"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Delete all queued builds.",
                "description": "",
                "operationId": "deleteAllQueuedBuilds",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "BuildQueueLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildQueue/order": {
            "put": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Update the build queue order.",
                "description": "",
                "operationId": "setQueuedBuildsOrder",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/builds"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/builds"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildQueue/order/{queuePosition}": {
            "get": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Get the queue position of a queued matching build.",
                "description": "",
                "operationId": "getQueuedBuildPosition",
                "parameters": [
                    {
                        "name": "queuePosition",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Update the queue position of a queued matching build.",
                "description": "",
                "operationId": "setQueuedBuildPosition",
                "parameters": [
                    {
                        "name": "queuePosition",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/build"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildQueue/{buildLocator}/approvalInfo": {
            "get": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Get approval info of a queued matching build.",
                "description": "",
                "operationId": "getApprovalInfo",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/approvalInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/approvalInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildQueue/{buildLocator}/approve": {
            "post": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Approve queued build with approval feature enabled.",
                "description": "",
                "operationId": "approveQueuedBuild",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "approveAll",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/approveQueuedBuildBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/approvalInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/approvalInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildQueue/{buildLocator}/tags": {
            "get": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Get tags of the queued matching build.",
                "description": "",
                "operationId": "getQueuedBuildTags",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildQueueLocator"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Add tags to the matching build.",
                "description": "",
                "operationId": "addTagsToBuildOfBuildQueue",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/tags"
                },
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildQueue/{queuedBuildLocator}": {
            "get": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Get a queued matching build.",
                "description": "",
                "operationId": "getQueuedBuild",
                "parameters": [
                    {
                        "name": "queuedBuildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildQueueLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Cancel a queued matching build.",
                "description": "",
                "operationId": "cancelQueuedBuild",
                "parameters": [
                    {
                        "name": "queuedBuildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildQueueLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/buildCancelRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Delete a queued matching build.",
                "description": "",
                "operationId": "deleteQueuedBuild",
                "parameters": [
                    {
                        "name": "queuedBuildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildQueueLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildQueue/{queuedBuildLocator}/compatibleAgents": {
            "get": {
                "tags": [
                    "BuildQueue"
                ],
                "summary": "Get compatible agents for a queued matching build.",
                "description": "",
                "operationId": "getCompatibleAgentsForBuild",
                "parameters": [
                    {
                        "name": "queuedBuildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildQueueLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agents"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agents"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all build configurations.",
                "description": "",
                "operationId": "getAllBuildTypes",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Create a new build configuration.",
                "description": "",
                "operationId": "createBuildType",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/buildType"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get build configuration matching the locator.",
                "description": "",
                "operationId": "getBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Delete build configuration matching the locator.",
                "description": "",
                "operationId": "deleteBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/agent-requirements": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all agent requirements of the matching build configuration.",
                "description": "",
                "operationId": "getAllAgentRequirements",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirements"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirements"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Add an agent requirement to the matching build configuration.",
                "description": "",
                "operationId": "addAgentRequirementToBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/agent-requirement"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirement"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirement"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update all agent requirements of the matching build configuration.",
                "description": "",
                "operationId": "replaceAllAgentRequirements",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/agent-requirements"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/agent-requirements"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirements"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirements"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get an agent requirement of the matching build configuration.",
                "description": "",
                "operationId": "getAgentRequirement",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "agentRequirementLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirement"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirement"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update an agent requirement of the matching build configuration.",
                "description": "",
                "operationId": "replaceAgentRequirement",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "agentRequirementLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/agent-requirement"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirement"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agent-requirement"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Remove an agent requirement of the matching build configuration.",
                "description": "",
                "operationId": "deleteAgentRequirement",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "agentRequirementLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a setting of an agent requirement of the matching build configuration.",
                "description": "",
                "operationId": "getAgentRequirementParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "agentRequirementLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a parameter of an agent requirement of the matching build configuration.",
                "description": "",
                "operationId": "setAgentRequirementParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "agentRequirementLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/aliases": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get external IDs of the matching build configuration.",
                "description": "",
                "operationId": "getAliases",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/items"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/items"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/artifact-dependencies": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all artifact dependencies of the matching build configuration.",
                "description": "",
                "operationId": "getAllArtifactDependencies",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependencies"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependencies"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Add an artifact dependency to the matching build configuration.",
                "description": "",
                "operationId": "addArtifactDependencyToBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/artifact-dependency"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update all artifact dependencies of the matching build configuration.",
                "description": "",
                "operationId": "replaceAllArtifactDependencies",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/artifact-dependencies"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/artifact-dependencies"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependencies"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependencies"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get an artifact dependency of the matching build configuration.",
                "description": "",
                "operationId": "getArtifactDependency",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "artifactDepLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update an artifact dependency of the matching build configuration.",
                "description": "",
                "operationId": "replaceArtifactDependency",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "artifactDepLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/artifact-dependency"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/artifact-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Remove an artifact dependency from the matching build configuration.",
                "description": "",
                "operationId": "deleteArtifactDependency",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "artifactDepLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a parameter of an artifact dependency of the matching build configuration.",
                "description": "",
                "operationId": "getArtifactDependencyParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "artifactDepLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a parameter of an artifact dependency of the matching build configuration.",
                "description": "",
                "operationId": "setArtifactDependencyParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "artifactDepLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/branches": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all branches of the matching build configuration.",
                "description": "",
                "operationId": "getAllBranchesOfBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/branches"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/branches"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/buildTags": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get tags of builds of the matching build configuration.",
                "description": "",
                "operationId": "getBuildTypeBuildTags",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/builds": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get builds of the matching build configuration.",
                "description": "",
                "operationId": "getBuildTypeBuilds",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/features": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all build features of the matching build configuration.",
                "description": "",
                "operationId": "getAllBuildFeatures",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/features"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/features"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Add build feature to the matching build configuration.",
                "description": "",
                "operationId": "addBuildFeatureToBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/feature"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/feature"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/feature"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update all build features of the matching build configuration.",
                "description": "",
                "operationId": "replaceAllBuildFeatures",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/features"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/features"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/features"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/features"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/features/{featureId}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a build feature of the matching build configuration.",
                "description": "",
                "operationId": "getBuildFeature",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/feature"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/feature"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a build feature of the matching build configuration.",
                "description": "",
                "operationId": "replaceBuildFeature",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/feature"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/feature"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/feature"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Remove a build feature of the matching build configuration.",
                "description": "",
                "operationId": "deleteFeatureOfBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all parameters of a build feature of the matching build configuration.",
                "description": "",
                "operationId": "getAllBuildFeatureParameters",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a parameter of a build feature of the matching build configuration.",
                "description": "",
                "operationId": "replaceBuildFeatureParameters",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/properties"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a parameter of a build feature of the matching build configuration.",
                "description": "",
                "operationId": "getBuildFeatureParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parameterName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update build feature parameter for the matching build configuration.",
                "description": "",
                "operationId": "addParameterToBuildFeature",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parameterName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get the setting of a build feature of the matching build configuration.",
                "description": "",
                "operationId": "getBuildFeatureSetting",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a parameter of a build feature of the matching build configuration.",
                "description": "",
                "operationId": "setBuildFeatureParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/investigations": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all investigations of the matching build configuration.",
                "description": "",
                "operationId": "getAllInvestigationsOfBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigations"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigations"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/move": {
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Move build type to another project.",
                "description": "",
                "operationId": "moveBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "targetProjectId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/output-parameters": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get build parameters.",
                "description": "",
                "operationId": "getBuildParametersOfBuildType",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Create a build parameter.",
                "description": "",
                "operationId": "createBuildParameterOfBuildType",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/property"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update build parameters.",
                "description": "",
                "operationId": "updateBuildParametersOfBuildType",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/properties"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Delete all build parameters.",
                "description": "",
                "operationId": "deleteBuildParametersOfBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/output-parameters/{name}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get build parameter.",
                "description": "",
                "operationId": "getBuildParameterOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update build parameter.",
                "description": "",
                "operationId": "updateBuildParameterOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/property"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Delete build parameter.",
                "description": "",
                "operationId": "deleteBuildParameterOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/output-parameters/{name}/value": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get value of build parameter.",
                "description": "",
                "operationId": "getBuildParameterValueOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update value of build parameter.",
                "description": "",
                "operationId": "updateBuildParameterValueOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get build parameters.",
                "description": "",
                "operationId": "getBuildParametersOfBuildType",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Create a build parameter.",
                "description": "",
                "operationId": "createBuildParameterOfBuildType",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/property"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update build parameters.",
                "description": "",
                "operationId": "updateBuildParametersOfBuildType",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/properties"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Delete all build parameters.",
                "description": "",
                "operationId": "deleteBuildParametersOfBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters/{name}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get build parameter.",
                "description": "",
                "operationId": "getBuildParameterOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update build parameter.",
                "description": "",
                "operationId": "updateBuildParameterOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/property"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Delete build parameter.",
                "description": "",
                "operationId": "deleteBuildParameterOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters/{name}/type": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get type of build parameter.",
                "description": "",
                "operationId": "getBuildParameterTypeOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/type"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/type"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update type of build parameter.",
                "description": "",
                "operationId": "updateBuildParameterTypeOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/type"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/type"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/type"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get build parameter specification.",
                "description": "",
                "operationId": "getBuildParameterSpecificationOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update build parameter specification.",
                "description": "",
                "operationId": "updateBuildParameterSpecificationOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/parameters/{name}/value": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get value of build parameter.",
                "description": "",
                "operationId": "getBuildParameterValueOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update value of build parameter.",
                "description": "",
                "operationId": "updateBuildParameterValueOfBuildType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/settingsFile": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get the settings file of the matching build configuration.",
                "description": "",
                "operationId": "getBuildTypeSettingsFile",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all snapshot dependencies of the matching build configuration.",
                "description": "",
                "operationId": "getAllSnapshotDependencies",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependencies"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependencies"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Add a snapshot dependency to the matching build configuration.",
                "description": "",
                "operationId": "addSnapshotDependencyToBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/snapshot-dependency"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update all snapshot dependencies of the matching build configuration.",
                "description": "",
                "operationId": "replaceAllSnapshotDependencies",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/snapshot-dependencies"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/snapshot-dependencies"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependencies"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependencies"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a snapshot dependency of the matching build configuration.",
                "description": "",
                "operationId": "getSnapshotDependency",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "snapshotDepLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a snapshot dependency of the matching build configuration.",
                "description": "",
                "operationId": "replaceSnapshotDependency",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "snapshotDepLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/snapshot-dependency"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/snapshot-dependency"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Delete a snapshot dependency of the matching build configuration.",
                "description": "",
                "operationId": "deleteSnapshotDependency",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "snapshotDepLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all build steps of the matching build configuration.",
                "description": "",
                "operationId": "getAllBuildSteps",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/steps"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/steps"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Add a build step to the matching build configuration.",
                "description": "",
                "operationId": "addBuildStepToBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/step"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/step"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/step"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update all build steps of the matching build configuration.",
                "description": "",
                "operationId": "replaceAllBuildSteps",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/steps"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/steps"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/steps"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/steps"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps/{stepId}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a build step of the matching build configuration.",
                "description": "",
                "operationId": "getBuildStep",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "stepId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/step"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/step"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Replace a build step of the matching build configuration.",
                "description": "",
                "operationId": "replaceBuildStep",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "stepId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/step"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/step"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/step"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Delete a build step of the matching build configuration.",
                "description": "",
                "operationId": "deleteBuildStep",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "stepId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all parameters of a build step of the matching build configuration.",
                "description": "",
                "operationId": "getAllBuildStepParameters",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "stepId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a parameter of a build step of the matching build configuration.",
                "description": "",
                "operationId": "deleteBuildStepParameters",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "stepId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/properties"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a parameter of a build step of the matching build configuration.",
                "description": "",
                "operationId": "getBuildStepParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "stepId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parameterName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Add a parameter to a build step of the matching build configuration.",
                "description": "",
                "operationId": "addParameterToBuildStep",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "stepId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parameterName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get the setting of a build step of the matching build configuration.",
                "description": "",
                "operationId": "getBuildStepSetting",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "stepId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a parameter of a build step of the matching build configuration.",
                "description": "",
                "operationId": "setBuildStepParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "stepId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/templates": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all build templates of the matching build configuration.",
                "description": "",
                "operationId": "getAllBuildTemplates",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Add a build template to the matching build configuration.",
                "description": "",
                "operationId": "addBuildTemplate",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "optimizeSettings",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/buildType"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update all templates of the matching build configuration.",
                "description": "",
                "operationId": "setBuildTypeTemplates",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "optimizeSettings",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/buildTypes"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Detach all templates from the matching build configuration.",
                "description": "",
                "operationId": "removeAllTemplates",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "inlineSettings",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a template of the matching build configuration.",
                "description": "",
                "operationId": "getBuildTemplate",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "templateLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Detach a template from the matching build configuration.",
                "description": "",
                "operationId": "removeTemplate",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "templateLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "inlineSettings",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/triggers": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all triggers of the matching build configuration.",
                "description": "",
                "operationId": "getAllTriggers",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/triggers"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/triggers"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Add a trigger to the matching build configuration.",
                "description": "",
                "operationId": "addTriggerToBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/trigger"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/trigger"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/trigger"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update all triggers of the matching build configuration.",
                "description": "",
                "operationId": "replaceAllTriggers",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/triggers"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/triggers"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/triggers"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/triggers"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a trigger of the matching build configuration.",
                "description": "",
                "operationId": "getTrigger",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "triggerLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/trigger"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/trigger"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a trigger of the matching build configuration.",
                "description": "",
                "operationId": "replaceTrigger",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "triggerLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/trigger"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/trigger"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/trigger"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Delete a trigger of the matching build configuration.",
                "description": "",
                "operationId": "deleteTrigger",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "triggerLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a parameter of a trigger of the matching build configuration.",
                "description": "",
                "operationId": "getTriggerParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "triggerLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a parameter of a trigger of the matching build configuration.",
                "description": "",
                "operationId": "setTriggerParameter",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "triggerLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs-root-entries": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all VCS roots of the matching build configuration.",
                "description": "",
                "operationId": "getAllVcsRootsOfBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Add a VCS root to the matching build.",
                "description": "",
                "operationId": "addVcsRootToBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/vcs-root-entry"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entry"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entry"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update all VCS roots of the matching build configuration.",
                "description": "",
                "operationId": "replaceAllVcsRoots",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/vcs-root-entries"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/vcs-root-entries"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a VCS root of the matching build configuration.",
                "description": "",
                "operationId": "getVcsRoot",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entry"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entry"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a VCS root of the matching build configuration.",
                "description": "",
                "operationId": "updateBuildTypeVcsRoot",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/vcs-root-entry"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entry"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-entry"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Remove a VCS root of the matching build configuration.",
                "description": "",
                "operationId": "deleteVcsRootOfBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get checkout rules of a VCS root of the matching build configuration.",
                "description": "",
                "operationId": "getVcsRootCheckoutRules",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update checkout rules of a VCS root of the matching build configuration.",
                "description": "",
                "operationId": "updateBuildTypeVcsRootCheckoutRules",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "List all files.",
                "description": "",
                "operationId": "getFilesListOfBuildType",
                "parameters": [
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get specific file zipped.",
                "description": "",
                "operationId": "getZippedFileOfBuildType",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Download specific file.",
                "description": "",
                "operationId": "downloadFileOfBuildType",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get metadata of specific file.",
                "description": "",
                "operationId": "getFileMetadataOfBuildType",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/file"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/file"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "List files under this path.",
                "description": "",
                "operationId": "getFilesListForSubpathOfBuildType",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(.*)?"
                        }
                    },
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/vcsRootInstances": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get all VCS root instances of the matching build configuration.",
                "description": "",
                "operationId": "getVcsRootInstancesOfBuildType",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/buildTypes/{btLocator}/{field}": {
            "get": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Get a field of the matching build configuration.",
                "description": "",
                "operationId": "getBuildTypeField",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "BuildType"
                ],
                "summary": "Update a field of the matching build configuration.",
                "description": "",
                "operationId": "setBuildTypeField",
                "parameters": [
                    {
                        "name": "btLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildTypeLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get all builds.",
                "description": "",
                "operationId": "getAllBuilds",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/aggregated/{buildLocator}/status": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get the build status of aggregated matching builds.",
                "description": "",
                "operationId": "getAggregatedBuildStatus",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get the status icon (in specified format) of aggregated matching builds.",
                "description": "",
                "operationId": "getAggregatedBuildStatusIcon",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "suffix",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(.*)?"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/builds/multiple/{buildLocator}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get multiple builds matching the locator.",
                "description": "",
                "operationId": "getMultipleBuilds",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Build"
                ],
                "summary": "cancelMultipleBuilds",
                "description": "",
                "operationId": "cancelMultiple",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/buildCancelRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Build"
                ],
                "summary": "Delete multiple builds matching the locator.",
                "description": "",
                "operationId": "deleteMultipleBuilds",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/multiple/{buildLocator}/comment": {
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Update comments in multiple matching builds.",
                "description": "",
                "operationId": "setMultipleBuildComments",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Build"
                ],
                "summary": "Delete comments of multiple matching builds.",
                "description": "",
                "operationId": "deleteMultipleBuildComments",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/multiple/{buildLocator}/pinInfo": {
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Pin multiple matching builds.",
                "description": "",
                "operationId": "pinMultipleBuilds",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/pinInfo"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/multiple/{buildLocator}/tags": {
            "post": {
                "tags": [
                    "Build"
                ],
                "summary": "Add tags to multiple matching builds.",
                "description": "",
                "operationId": "addTagsToMultipleBuilds",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/tags"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Build"
                ],
                "summary": "Remove tags from multiple matching builds.",
                "description": "",
                "operationId": "removeMultipleBuildTags",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/tags"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/multipleOperationResult"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get build matching the locator.",
                "description": "",
                "operationId": "getBuild",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Build"
                ],
                "summary": "cancelBuild",
                "description": "",
                "operationId": "cancelBuild",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/buildCancelRequest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Build"
                ],
                "summary": "Delete build matching the locator.",
                "description": "",
                "operationId": "deleteBuild",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/artifactDependencyChanges": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get artifact dependency changes of the matching build.",
                "description": "",
                "operationId": "getArtifactDependencyChanges",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildChanges"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildChanges"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "List all files.",
                "description": "",
                "operationId": "getFilesListOfBuild",
                "parameters": [
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "logBuildUsage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts/archived{path}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get specific file zipped.",
                "description": "",
                "operationId": "getZippedFileOfBuild",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "logBuildUsage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts/files{path}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Download specific file.",
                "description": "",
                "operationId": "downloadFileOfBuild",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "logBuildUsage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts/metadata{path}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get metadata of specific file.",
                "description": "",
                "operationId": "getFileMetadataOfBuild",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "logBuildUsage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/file"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/file"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/artifacts/{path}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "List files under this path.",
                "description": "",
                "operationId": "getFilesListForSubpathOfBuild",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(.*)?"
                        }
                    },
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "resolveParameters",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "logBuildUsage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/artifactsDirectory": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get the artifacts' directory of the matching build.",
                "description": "",
                "operationId": "getArtifactsDirectory",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/caches/finishProperties": {
            "delete": {
                "tags": [
                    "Build"
                ],
                "summary": "Remove build parameters from the matching build.",
                "description": "",
                "operationId": "resetBuildFinishProperties",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/canceledInfo": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Check if the matching build is canceled.",
                "description": "",
                "operationId": "getCanceledInfo",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/comment": {
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Update the comment on the matching build.",
                "description": "",
                "operationId": "setBuildComment",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Build"
                ],
                "summary": "Remove the build comment matching the locator.",
                "description": "",
                "operationId": "deleteBuildComment",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/finish": {
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Marks the running build as finished by passing agent the current time of the build to finish.",
                "description": "",
                "operationId": "setFinishedTime",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/finishDate": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get the finish date of the matching build.",
                "description": "",
                "operationId": "getBuildFinishDate",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Marks the running build as finished by passing agent the current time of the build to finish.",
                "description": "",
                "operationId": "setBuildFinishDate",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/log": {
            "post": {
                "tags": [
                    "Build"
                ],
                "summary": "Adds a message to the build log. Service messages are accepted.",
                "description": "",
                "operationId": "addLogMessageToBuild",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/number": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get the number of the matching build.",
                "description": "",
                "operationId": "getBuildNumber",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Update the number of the matching build.",
                "description": "",
                "operationId": "setBuildNumber",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/output-parameters": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get output parameters published by the build.",
                "description": "",
                "operationId": "getBuildOutputParametersOfBuild",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/output-parameters/{propertyName}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Returns the value of a build output parameter.",
                "description": "",
                "operationId": "getBuildOutputParameters",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/pinInfo": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Check if the matching build is pinned.",
                "description": "",
                "operationId": "getBuildPinInfo",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/pinInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/pinInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Update the pin info of the matching build.",
                "description": "",
                "operationId": "setBuildPinInfo",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/pinInfo"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/pinInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/pinInfo"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/problemOccurrences": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get build problems of the matching build.",
                "description": "",
                "operationId": "getBuildProblems",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/problemOccurrences"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/problemOccurrences"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Build"
                ],
                "summary": "Add a build problem to the matching build.",
                "description": "",
                "operationId": "addProblemToBuild",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/problemOccurrence"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/problemOccurrence"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/relatedIssues": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get related issues of the matching build.",
                "description": "",
                "operationId": "getBuildRelatedIssues",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/issuesUsages"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/issuesUsages"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/resolved/{value}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get the resolvement status of the matching build.",
                "description": "",
                "operationId": "getBuildResolved",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "value",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/resulting-properties": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get actual build parameters of the matching build.",
                "description": "",
                "operationId": "getBuildActualParameters",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Returns the final value that a given parameter had after the build finished.",
                "description": "",
                "operationId": "getBuildResultingProperties",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/runningData": {
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Starts the queued build as an agent-less build and returns the corresponding running build.",
                "description": "",
                "operationId": "markBuildAsRunning",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/build"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/sources/files/{fileName}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get a source file of the matching build.",
                "description": "",
                "operationId": "getBuildSourceFile",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fileName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": ".+"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/octet-stream": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/statistics": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get all statistical values of the matching build.",
                "description": "",
                "operationId": "getBuildStatisticValues",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/statistics/{name}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get a statistical value of the matching build.",
                "description": "",
                "operationId": "getBuildStatisticValue",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/status": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get status of the matching build.",
                "description": "",
                "operationId": "getBuildStatus",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Build"
                ],
                "summary": "Change status of the build.",
                "description": "",
                "operationId": "setBuildStatus",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildStatusUpdate"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildStatusUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/statusIcon{suffix}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get the status icon (in specified format) of the matching build.",
                "description": "",
                "operationId": "getBuildStatusIcon",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "suffix",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(.*)?"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/statusText": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get the build status text of the matching build.",
                "description": "",
                "operationId": "getBuildStatusText",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Update the build status of the matching build.",
                "description": "",
                "operationId": "setBuildStatusText",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/tags": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get tags of the matching build.",
                "description": "",
                "operationId": "getBuildTags",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "TagLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Build"
                ],
                "summary": "Add tags to the matching build.",
                "description": "",
                "operationId": "addTagsToBuild",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/tags"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Build"
                ],
                "summary": "Update tags of the matching build.",
                "description": "",
                "operationId": "setBuildTags",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "TagLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/tags"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tags"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/testOccurrences": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get test occurrences of the matching build.",
                "description": "",
                "operationId": "getBuildTestOccurrences",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/testOccurrences"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/testOccurrences"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/vcsLabels": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get VCS labels of the matching build.",
                "description": "",
                "operationId": "getBuildVcsLabels",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcsLabels"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcsLabels"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Build"
                ],
                "summary": "Add a VCS label to the matching build.",
                "description": "",
                "operationId": "addBuildVcsLabel",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcsLabels"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcsLabels"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/builds/{buildLocator}/{field}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "summary": "Get a field of the matching build.",
                "description": "",
                "operationId": "getBuildField",
                "parameters": [
                    {
                        "name": "buildLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "BuildLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get all changes.",
                "description": "",
                "operationId": "getAllChanges",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/changes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/changes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes/{changeLocator}": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get change matching the locator.",
                "description": "",
                "operationId": "getChange",
                "parameters": [
                    {
                        "name": "changeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/change"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/change"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes/{changeLocator}/attributes": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get attributes of the matching change.",
                "description": "",
                "operationId": "getChangeAttributes",
                "parameters": [
                    {
                        "name": "changeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes/{changeLocator}/duplicates": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get duplicates of the matching change.",
                "description": "",
                "operationId": "getChangeDuplicates",
                "parameters": [
                    {
                        "name": "changeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/changes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/changes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes/{changeLocator}/firstBuilds": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get first builds of the matching change.",
                "description": "",
                "operationId": "getChangeFirstBuilds",
                "parameters": [
                    {
                        "name": "changeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/builds"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes/{changeLocator}/issues": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get issues of the matching change.",
                "description": "",
                "operationId": "getChangeIssue",
                "parameters": [
                    {
                        "name": "changeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/issues"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/issues"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes/{changeLocator}/parentChanges": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get parent changes of the matching change.",
                "description": "",
                "operationId": "getChangeParentChanges",
                "parameters": [
                    {
                        "name": "changeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/changes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/changes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes/{changeLocator}/parentRevisions": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get parent revisions of the matching change.",
                "description": "",
                "operationId": "getChangeParentRevisions",
                "parameters": [
                    {
                        "name": "changeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/items"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/items"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes/{changeLocator}/vcsRootInstance": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get a VCS root instance of the matching change.",
                "description": "",
                "operationId": "getChangeVcsRoot",
                "parameters": [
                    {
                        "name": "changeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/changes/{changeLocator}/{field}": {
            "get": {
                "tags": [
                    "Change"
                ],
                "summary": "Get a field of the matching change.",
                "description": "",
                "operationId": "getChangeField",
                "parameters": [
                    {
                        "name": "changeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ChangeLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/cloud/images": {
            "get": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Get all cloud images.",
                "description": "",
                "operationId": "getAllCloudImages",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudImages"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudImages"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/cloud/images/{imageLocator}": {
            "get": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Get cloud image matching the locator.",
                "description": "",
                "operationId": "getCloudImage",
                "parameters": [
                    {
                        "name": "imageLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudImage"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudImage"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/cloud/instances": {
            "get": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Get all cloud instances.",
                "description": "",
                "operationId": "getAllCloudInstances",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudInstances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudInstances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Start a new cloud instance.",
                "description": "",
                "operationId": "startInstance",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/cloudInstance"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/cloudInstance"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/cloud/instances/{instanceLocator}": {
            "get": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Get cloud instance matching the locator.",
                "description": "",
                "operationId": "getCloudInstance",
                "parameters": [
                    {
                        "name": "instanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudInstance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudInstance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Stop cloud instance matching the locator.",
                "description": "",
                "operationId": "stopInstance",
                "parameters": [
                    {
                        "name": "instanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/cloud/instances/{instanceLocator}/actions/forceStop": {
            "post": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Terminates existing cloud instance immediately",
                "description": "",
                "operationId": "forseTerminateInstance",
                "parameters": [
                    {
                        "name": "instanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/cloud/instances/{instanceLocator}/actions/stop": {
            "post": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Schedules existing cloud instance for termination",
                "description": "",
                "operationId": "terminateInstance",
                "parameters": [
                    {
                        "name": "instanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/cloud/profiles": {
            "get": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Get all cloud profiles.",
                "description": "",
                "operationId": "getAllCloudProfiles",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudProfiles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudProfiles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/cloud/profiles/{profileLocator}": {
            "get": {
                "tags": [
                    "CloudInstance"
                ],
                "summary": "Get cloud profile matching the locator.",
                "description": "",
                "operationId": "getCloudProfile",
                "parameters": [
                    {
                        "name": "profileLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudProfile"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/cloudProfile"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/deploymentDashboards": {
            "get": {
                "tags": [
                    "DeploymentDashboard"
                ],
                "summary": "Get all deployment dashboards.",
                "description": "",
                "operationId": "getAllDashboards",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentDashboardLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboards"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboards"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "DeploymentDashboard"
                ],
                "summary": "Create a new deployment dashboard.",
                "description": "",
                "operationId": "createDashboard",
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/deploymentDashboard"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/deploymentDashboard"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboard"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboard"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/deploymentDashboards/{deploymentDashboardLocator}": {
            "get": {
                "tags": [
                    "DeploymentDashboard"
                ],
                "summary": "Get the deployment dashboard matching the locator.",
                "description": "",
                "operationId": "getDashboard",
                "parameters": [
                    {
                        "name": "deploymentDashboardLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentDashboardLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboard"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboard"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DeploymentDashboard"
                ],
                "summary": "Delete the deployment dashboard matching the locator.",
                "description": "",
                "operationId": "deleteDashboard",
                "parameters": [
                    {
                        "name": "deploymentDashboardLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentDashboardLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/deploymentDashboards/{deploymentDashboardLocator}/instances": {
            "get": {
                "tags": [
                    "DeploymentDashboard"
                ],
                "summary": "Get deployment instances for a given deployment dashboard.",
                "description": "",
                "operationId": "getInstances",
                "parameters": [
                    {
                        "name": "deploymentDashboardLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentDashboardLocator"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentInstanceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentInstances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentInstances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "DeploymentDashboard"
                ],
                "summary": "Create a new deployment instance.",
                "description": "",
                "operationId": "createInstance",
                "parameters": [
                    {
                        "name": "deploymentDashboardLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentDashboardLocator"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/deploymentInstance"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/deploymentInstance"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentInstance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentInstance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/deploymentDashboards/{deploymentDashboardLocator}/instances/{deploymentInstanceLocator}": {
            "get": {
                "tags": [
                    "DeploymentDashboard"
                ],
                "summary": "Get the deployment instance matching the locator.",
                "description": "",
                "operationId": "getInstance",
                "parameters": [
                    {
                        "name": "deploymentDashboardLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentDashboardLocator"
                        }
                    },
                    {
                        "name": "deploymentInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentInstanceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentInstance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentInstance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "DeploymentDashboard"
                ],
                "summary": "Report a new deployment for instance.",
                "description": "",
                "operationId": "reportNewDeploymentForInstance",
                "parameters": [
                    {
                        "name": "deploymentDashboardLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentDashboardLocator"
                        }
                    },
                    {
                        "name": "deploymentInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentInstanceLocator"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/deploymentStateEntry"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/deploymentStateEntry"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentInstance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentInstance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DeploymentDashboard"
                ],
                "summary": "Delete the deployment instance matching the locator.",
                "description": "",
                "operationId": "deleteInstance",
                "parameters": [
                    {
                        "name": "deploymentDashboardLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentDashboardLocator"
                        }
                    },
                    {
                        "name": "deploymentInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentInstanceLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/health": {
            "get": {
                "tags": [
                    "health"
                ],
                "operationId": "getHealthItems",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/healthStatusItems"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/healthStatusItems"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/health/category": {
            "get": {
                "tags": [
                    "health"
                ],
                "operationId": "getCategories",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/healthCategories"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/healthCategories"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/health/category/{locator}": {
            "get": {
                "tags": [
                    "health"
                ],
                "operationId": "getSingleCategory",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/healthCategory"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/health/{locator}": {
            "get": {
                "tags": [
                    "health"
                ],
                "operationId": "getSingleHealthItem",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/healthItem"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/healthItem"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/info": {
            "get": {
                "tags": [
                    "Root"
                ],
                "summary": "Get the plugin info.",
                "description": "",
                "operationId": "getPluginInfo",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/plugin"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/investigations": {
            "get": {
                "tags": [
                    "Investigation"
                ],
                "summary": "Get all investigations.",
                "description": "",
                "operationId": "getAllInvestigations",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigations"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigations"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Investigation"
                ],
                "summary": "Create a new investigation.",
                "description": "",
                "operationId": "addInvestigation",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/investigation"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigation"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigation"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/investigations/multiple": {
            "post": {
                "tags": [
                    "Investigation"
                ],
                "summary": "Create multiple new investigations.",
                "description": "",
                "operationId": "addMultipleInvestigations",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/investigations"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/investigations"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigations"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigations"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/investigations/{investigationLocator}": {
            "get": {
                "tags": [
                    "Investigation"
                ],
                "summary": "Get investigation matching the locator.",
                "description": "",
                "operationId": "getInvestigation",
                "parameters": [
                    {
                        "name": "investigationLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "InvestigationLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigation"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigation"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Investigation"
                ],
                "summary": "Update investigation matching the locator.",
                "description": "",
                "operationId": "replaceInvestigation",
                "parameters": [
                    {
                        "name": "investigationLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "InvestigationLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/investigation"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigation"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/investigation"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Investigation"
                ],
                "summary": "Delete investigation matching the locator.",
                "description": "",
                "operationId": "deleteInvestigation",
                "parameters": [
                    {
                        "name": "investigationLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "InvestigationLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/mutes": {
            "get": {
                "tags": [
                    "Mute"
                ],
                "summary": "Get all muted tests.",
                "description": "",
                "operationId": "getAllMutedTests",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/mutes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/mutes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Mute"
                ],
                "summary": "Mute a test.",
                "description": "",
                "operationId": "muteTest",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/mute"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/mute"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/mute"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/mute"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/mutes/multiple": {
            "post": {
                "tags": [
                    "Mute"
                ],
                "summary": "Mute multiple tests.",
                "description": "",
                "operationId": "muteMultipleTests",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/mutes"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/mutes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/mutes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Mute"
                ],
                "summary": "Unmute multiple tests.",
                "description": "",
                "operationId": "unmuteMultipleTests",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/mutes"
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/mutes/{muteLocator}": {
            "get": {
                "tags": [
                    "Mute"
                ],
                "summary": "Get a muted test.",
                "description": "",
                "operationId": "getMutedTest",
                "parameters": [
                    {
                        "name": "muteLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "MuteLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/mute"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/mute"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Mute"
                ],
                "summary": "Unmute the matching test.",
                "description": "",
                "operationId": "unmuteTest",
                "parameters": [
                    {
                        "name": "muteLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "MuteLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/approveQueuedBuildBody"
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/problemOccurrences": {
            "get": {
                "tags": [
                    "ProblemOccurrence"
                ],
                "summary": "Get all build problem occurrences.",
                "description": "",
                "operationId": "getAllBuildProblemOccurrences",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "ProblemOccurrenceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/problemOccurrences"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/problemOccurrences"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/problemOccurrences/{problemLocator}": {
            "get": {
                "tags": [
                    "ProblemOccurrence"
                ],
                "summary": "Get a matching build problem occurrence.",
                "description": "",
                "operationId": "getBuildProblemOccurrence",
                "parameters": [
                    {
                        "name": "problemLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProblemOccurrenceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/problemOccurrence"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/problemOccurrence"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/problems": {
            "get": {
                "tags": [
                    "Problem"
                ],
                "summary": "Get all build problems.",
                "description": "",
                "operationId": "getAllBuildProblems",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "ProblemLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/problems"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/problems"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/problems/{problemLocator}": {
            "get": {
                "tags": [
                    "Problem"
                ],
                "summary": "Get a matching build problem.",
                "description": "",
                "operationId": "getBuildProblem",
                "parameters": [
                    {
                        "name": "problemLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProblemLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/problem"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/problem"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get all projects.",
                "description": "",
                "operationId": "getAllProjects",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Create a new project.",
                "description": "",
                "operationId": "addProject",
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/newProjectDescription"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/newProjectDescription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{locator}/versionedSettings/affectedProjects": {
            "get": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Get a list of projects that are affected by Load Settings from VCS action.",
                "description": "",
                "operationId": "getVersionedSettingsProjectsToLoad",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{locator}/versionedSettings/checkForChanges": {
            "post": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Check for changes in Versioned Settings.",
                "description": "",
                "operationId": "checkForVersionedSettingsChanges",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/projects/{locator}/versionedSettings/commitCurrentSettings": {
            "post": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Perform Versioned Settings action: Commit current settings to VCS.",
                "description": "",
                "operationId": "commitCurrentSettings",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/projects/{locator}/versionedSettings/config": {
            "get": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Get Versioned Settings config.",
                "description": "",
                "operationId": "getVersionedSettingsConfig",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/versionedSettingsConfig"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Set Verseioned Settings config.",
                "description": "",
                "operationId": "setVersionedSettingsConfig",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/versionedSettingsConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/versionedSettingsConfig"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{locator}/versionedSettings/config/parameters/{name}": {
            "get": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Get Versioned Settings config parameter value.",
                "description": "",
                "operationId": "getVersionedSettingsConfigParameter",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Set Versioned Settings config parameter value.",
                "description": "",
                "operationId": "setVersionedSettingsConfigParameter",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Delete Versioned Settings config parameter value.",
                "description": "",
                "operationId": "deleteVersionedSettingsConfigParameter",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/projects/{locator}/versionedSettings/contextParameters": {
            "get": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Get Versioned Settings Context Parameters.",
                "description": "",
                "operationId": "getVersionedSettingsContextParameters",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/versionedSettingsContextParameters"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Set Versioned Settings Context Parameters.",
                "description": "",
                "operationId": "setVersionedSettingsContextParameters",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/versionedSettingsContextParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/versionedSettingsContextParameters"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{locator}/versionedSettings/loadSettings": {
            "post": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Perform Versioned Settings action: Load Setting from VCS.",
                "description": "",
                "operationId": "loadSettingsFromVCS",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{locator}/versionedSettings/status": {
            "get": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Get current status of Versioned Settings.",
                "description": "",
                "operationId": "getVersionedSettingsStatus",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/versionedSettingsStatus"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{locator}/versionedSettings/tokens": {
            "get": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Get Versioned Settings Tokens.",
                "description": "",
                "operationId": "getVersionedSettingsTokens",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/versionedSettingsTokens"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Add Versioned Settings Tokens.",
                "description": "",
                "operationId": "addVersionedSettingsTokens",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/versionedSettingsTokens"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/versionedSettingsTokens"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VersionedSettings"
                ],
                "summary": "Delete Versioned Settings Tokens.",
                "description": "",
                "operationId": "deleteVersionedSettingsTokens",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/versionedSettingsTokens"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/versionedSettingsTokens"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get project matching the locator.",
                "description": "",
                "operationId": "getProject",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "Delete project matching the locator.",
                "description": "",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/agentPools": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get agent pools appointed to the matching project.",
                "description": "",
                "operationId": "getAgentPoolsProject",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPools"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPools"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Assign the matching project to the agent pool.",
                "description": "",
                "operationId": "addAgentPoolsProject",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/agentPool"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPool"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update agent pools apppointed to the matching project.",
                "description": "",
                "operationId": "setAgentPoolsProject",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/agentPools"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/agentPools"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPools"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/agentPools"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}": {
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "Unassign a project from the matching agent pool.",
                "description": "",
                "operationId": "removeProjectFromAgentPool",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "agentPoolLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/branches": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get all branches of the matching project.",
                "description": "",
                "operationId": "getAllBranches",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/branches"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/branches"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/buildTypes": {
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Add a build configuration to the matching project.",
                "description": "",
                "operationId": "addBuildType",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/newBuildTypeDescription"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/defaultTemplate": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get the default template of the matching project.",
                "description": "",
                "operationId": "getDefaultTemplate",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update the default template of the matching project.",
                "description": "",
                "operationId": "setDefaultTemplate",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/buildType"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "Remove the default template from the matching project.",
                "description": "",
                "operationId": "removeDefaultTemplate",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/defaultValueSets": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "getDefaultValueSets",
                "description": "",
                "operationId": "getDefaultValueSets",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/typedValueSets"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/typedValueSets"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/deploymentDashboards": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "getDeploymentDashboardsInProjet",
                "description": "",
                "operationId": "getDeploymentDashboardsInProject",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboards"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboards"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/deploymentDashboards/{dashboardLocator}": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "getDeploymentDashboardInProject",
                "description": "",
                "operationId": "getDeploymentDashboardInProject",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "dashboardLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "DeploymentDashboardLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboard"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deploymentDashboard"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/order/buildTypes": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get all build configurations from the matching project, with custom ordering applied.",
                "description": "",
                "operationId": "getAllBuildTypesOrdered",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update custom ordering of build configurations of the matching project.",
                "description": "",
                "operationId": "setBuildTypesOrder",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/buildTypes"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/order/projects": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get all subprojects of the matching project, with custom ordering applied.",
                "description": "",
                "operationId": "getAllSubprojectsOrdered",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update custom ordering of subprojects of the matching project.",
                "description": "",
                "operationId": "setSubprojectsOrder",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/projects"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/projects"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/parameters": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get build parameters.",
                "description": "",
                "operationId": "getBuildParameters",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Create a build parameter.",
                "description": "",
                "operationId": "createBuildParameter",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/property"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update build parameters.",
                "description": "",
                "operationId": "updateBuildParameters",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/properties"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "Delete all build parameters.",
                "description": "",
                "operationId": "deleteBuildParameters",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/parameters/{name}": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get build parameter.",
                "description": "",
                "operationId": "getBuildParameter",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update build parameter.",
                "description": "",
                "operationId": "updateBuildParameter",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/property"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/property"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "Delete build parameter.",
                "description": "",
                "operationId": "deleteBuildParameter",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/parameters/{name}/type": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get type of build parameter.",
                "description": "",
                "operationId": "getBuildParameterType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/type"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/type"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update type of build parameter.",
                "description": "",
                "operationId": "updateBuildParameterType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/type"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/type"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/type"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get build parameter specification.",
                "description": "",
                "operationId": "getBuildParameterSpecification",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update build parameter specification.",
                "description": "",
                "operationId": "updateBuildParameterSpecification",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/parameters/{name}/value": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get value of build parameter.",
                "description": "",
                "operationId": "getBuildParameterValue",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update value of build parameter.",
                "description": "",
                "operationId": "updateBuildParameterValue",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/parentProject": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get the parent project of the matching project.",
                "description": "",
                "operationId": "getProjectParentProject",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update the parent project of the matching project.",
                "description": "",
                "operationId": "setParentProject",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/project"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/project"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/projectFeatures": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get all features.",
                "description": "",
                "operationId": "getFeatures",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Add a feature.",
                "description": "",
                "operationId": "addFeature",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/projectFeature"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update all features.",
                "description": "",
                "operationId": "updateFeatures",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/projectFeatures"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/projectFeatures"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get a matching feature.",
                "description": "",
                "operationId": "getFeature",
                "parameters": [
                    {
                        "name": "featureLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update a matching feature.",
                "description": "",
                "operationId": "updateFeature",
                "parameters": [
                    {
                        "name": "featureLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/projectFeature"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "Delete a matching feature.",
                "description": "",
                "operationId": "deleteFeature",
                "parameters": [
                    {
                        "name": "featureLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/secure/tokens": {
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Creates a new [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens) to store the sensitive value passed in the request body. Returns the scrambled value that is the new token name. This operation is available only for users with the EDIT_PROJECT permission (included in the Project Administrator role by default).",
                "description": "",
                "operationId": "addSecureToken",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/secure/values/{token}": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Returns the value of the given [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens).This operation is available only for users with the CHANGE_SERVER_SETTINGS permission (included only in System Administrator role by default).",
                "description": "",
                "operationId": "getSecureValue",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "token",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/settingsFile": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get the settings file of the matching build configuration.",
                "description": "",
                "operationId": "getProjectSettingsFile",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/templates": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get all templates of the matching project.",
                "description": "",
                "operationId": "getProjectTemplates",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildTypes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Add a build configuration template to the matching project.",
                "description": "",
                "operationId": "addTemplate",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/newBuildTypeDescription"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buildType"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/projects/{projectLocator}/{field}": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get a field of the matching project.",
                "description": "",
                "operationId": "getProjectField",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Project"
                ],
                "summary": "Update a field of the matching project.",
                "description": "",
                "operationId": "setProjectField",
                "parameters": [
                    {
                        "name": "projectLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "ProjectLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/roles": {
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Get all roles.",
                "description": "",
                "operationId": "getRoles",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Role"
                ],
                "summary": "Create a new role.",
                "description": "",
                "operationId": "createRole",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/role"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/roles/id:{id}": {
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Get a role with specified id.",
                "description": "",
                "operationId": "getRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Role"
                ],
                "summary": "Delete a role matching the id.",
                "description": "",
                "operationId": "deleteRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/roles/id:{roleId}/included/{includedId}": {
            "put": {
                "tags": [
                    "Role"
                ],
                "summary": "Add an included role.",
                "description": "",
                "operationId": "addIncludedRole",
                "parameters": [
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includedId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Role"
                ],
                "summary": "Remove an included role.",
                "description": "",
                "operationId": "removeIncludedRole",
                "parameters": [
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includedId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/roles/id:{roleId}/permissions/{permissionId}": {
            "put": {
                "tags": [
                    "Role"
                ],
                "summary": "Add a permission to a role.",
                "description": "",
                "operationId": "addPermission",
                "parameters": [
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "permissionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Role"
                ],
                "summary": "Remove a permission from a role.",
                "description": "",
                "operationId": "removePermission",
                "parameters": [
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "permissionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get the server info.",
                "description": "",
                "operationId": "getServerInfo",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/server"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/server"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/authSettings": {
            "get": {
                "tags": [
                    "Server Authentication Settings"
                ],
                "summary": "Get authentication settings.",
                "description": "",
                "operationId": "getAuthSettings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/serverAuthSettings"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/serverAuthSettings"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Server Authentication Settings"
                ],
                "summary": "Set authentication settings.",
                "description": "",
                "operationId": "setAuthSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/serverAuthSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/serverAuthSettings"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/serverAuthSettings"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/backup": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get the latest backup status.",
                "description": "",
                "operationId": "getBackupStatus",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Server"
                ],
                "summary": "Start a new backup.",
                "description": "",
                "operationId": "startBackup",
                "parameters": [
                    {
                        "name": "fileName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addTimestamp",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeConfigs",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeDatabase",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeBuildLogs",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includePersonalChanges",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeRunningBuilds",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeSupplimentaryData",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/cleanup": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get clean-up settings.",
                "description": "",
                "operationId": "getCleanupSettings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/cleanup"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/cleanup"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Server"
                ],
                "summary": "Set clean-up settings.",
                "description": "",
                "operationId": "setCleanupSettings",
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/cleanup"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/cleanup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/cleanup"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/cleanup"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/files/{areaId}": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "List all files.",
                "description": "",
                "operationId": "getFilesListOfServer",
                "parameters": [
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "areaId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/files/{areaId}/archived{path}": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get specific file zipped.",
                "description": "",
                "operationId": "getZippedFileOfServer",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "areaId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/files/{areaId}/files{path}": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Download specific file.",
                "description": "",
                "operationId": "downloadFileOfServer",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "areaId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/files/{areaId}/metadata{path}": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get metadata of specific file.",
                "description": "",
                "operationId": "getFileMetadataOfServer",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "areaId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/file"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/file"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/files/{areaId}/{path}": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "List files under this path.",
                "description": "",
                "operationId": "getFilesListForSubpathOfServer",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(.*)?"
                        }
                    },
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "areaId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/globalSettings": {
            "get": {
                "tags": [
                    "Global Server Settings"
                ],
                "summary": "Get global settings.",
                "description": "",
                "operationId": "getGlobalSettings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/serverGlobalSettings"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/serverGlobalSettings"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Global Server Settings"
                ],
                "summary": "Set global settings.",
                "description": "",
                "operationId": "setGlobalSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/serverGlobalSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/serverGlobalSettings"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/serverGlobalSettings"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/licensingData": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get the licensing data.",
                "description": "",
                "operationId": "getLicensingData",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/licensingData"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/licensingData"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/licensingData/licenseKeys": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get all license keys.",
                "description": "",
                "operationId": "getLicenseKeys",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseKeys"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseKeys"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Server"
                ],
                "summary": "Add license keys.",
                "description": "",
                "operationId": "addLicenseKeys",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseKeys"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseKeys"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/licensingData/licenseKeys/{licenseKey}": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get a license key.",
                "description": "",
                "operationId": "getLicenseKey",
                "parameters": [
                    {
                        "name": "licenseKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseKey"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseKey"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Server"
                ],
                "summary": "Delete a license key.",
                "description": "",
                "operationId": "deleteLicenseKey",
                "parameters": [
                    {
                        "name": "licenseKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/server/metrics": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get metrics.",
                "description": "",
                "operationId": "getAllMetrics",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/metrics"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/metrics"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/nodes": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get all TeamCity nodes.",
                "description": "",
                "operationId": "getAllNodes",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "TeamCityNodeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/nodes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/nodes"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/nodes/{nodeLocator}": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get a node matching the locator.",
                "description": "",
                "operationId": "getNode",
                "parameters": [
                    {
                        "name": "nodeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "TeamCityNodeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/node"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/node"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/nodes/{nodeLocator}/disabledResponsibilities": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get all effective responsibilities for a node matching the locator.",
                "description": "",
                "operationId": "getDisabledResponsibilities",
                "parameters": [
                    {
                        "name": "nodeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "TeamCityNodeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/disabledResponsibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/disabledResponsibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/nodes/{nodeLocator}/effectiveResponsibilities": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get all effective responsibilities for a node matching the locator.",
                "description": "",
                "operationId": "getEffectiveResponsibilities",
                "parameters": [
                    {
                        "name": "nodeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "TeamCityNodeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/effectiveResponsibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/effectiveResponsibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get all enabled responsibilities for a node matching the locator.",
                "description": "",
                "operationId": "getEnabledResponsibilities",
                "parameters": [
                    {
                        "name": "nodeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "TeamCityNodeLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/enabledResponsibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/enabledResponsibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/nodes/{nodeLocator}/enabledResponsibilities/{name}": {
            "put": {
                "tags": [
                    "Node"
                ],
                "summary": "Enables or disables responsibility for a node.",
                "description": "",
                "operationId": "changeNodeResponsibility",
                "parameters": [
                    {
                        "name": "nodeLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "TeamCityNodeLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/enabledResponsibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/enabledResponsibilities"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/plugins": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get all plugins.",
                "description": "",
                "operationId": "getAllPlugins",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/plugins"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/plugins"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/server/{field}": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Get a field of the server info.",
                "description": "",
                "operationId": "getServerField",
                "parameters": [
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/testOccurrences": {
            "get": {
                "tags": [
                    "TestOccurrence"
                ],
                "summary": "Get all test occurrences.",
                "description": "",
                "operationId": "getAllTestOccurrences",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "TestOccurrenceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/testOccurrences"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/testOccurrences"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/testOccurrences/{testLocator}": {
            "get": {
                "tags": [
                    "TestOccurrence"
                ],
                "summary": "Get a matching test occurrence.",
                "description": "",
                "operationId": "getTestOccurrence",
                "parameters": [
                    {
                        "name": "testLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "TestOccurrenceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/testOccurrence"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/testOccurrence"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/tests": {
            "get": {
                "tags": [
                    "Test"
                ],
                "summary": "Get all tests.",
                "description": "",
                "operationId": "getTests",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "TestLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/tests"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tests"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/tests/{testLocator}": {
            "get": {
                "tags": [
                    "Test"
                ],
                "summary": "Get a matching test.",
                "description": "",
                "operationId": "getTest",
                "parameters": [
                    {
                        "name": "testLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "TestLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/test"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/test"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/userGroups": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get all user groups.",
                "description": "",
                "operationId": "getAllGroups",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Group"
                ],
                "summary": "Add a new user group.",
                "description": "",
                "operationId": "addGroup",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/group"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/group"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/group"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/group"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/userGroups/{groupLocator}": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get user group matching the locator.",
                "description": "",
                "operationId": "getUserGroupOfGroup",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/group"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/group"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Group"
                ],
                "summary": "Delete user group matching the locator.",
                "description": "",
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/userGroups/{groupLocator}/parent-groups": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get parent groups of the matching user group.",
                "description": "",
                "operationId": "getGroupParentGroups",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Group"
                ],
                "summary": "Update parent groups of the matching user group.",
                "description": "",
                "operationId": "setGroupParentGroups",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/groups"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/userGroups/{groupLocator}/properties": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get properties of the matching user group.",
                "description": "",
                "operationId": "getGroupProperties",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/userGroups/{groupLocator}/properties/{name}": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get a property of the matching user group.",
                "description": "",
                "operationId": "getGroupProperty",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Group"
                ],
                "summary": "Update a property of the matching user group.",
                "description": "",
                "operationId": "setGroupProperty",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Group"
                ],
                "summary": "Remove a property of the matching user group.",
                "description": "",
                "operationId": "removeGroupProperty",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/userGroups/{groupLocator}/roles": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get all roles of the matching user group.",
                "description": "",
                "operationId": "getGroupRoles",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Group"
                ],
                "summary": "Add a role to the matching user group.",
                "description": "",
                "operationId": "addRoleToGroup",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/role"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Group"
                ],
                "summary": "Update roles of the matching user group.",
                "description": "",
                "operationId": "setGroupRoles",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/roles"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get a role with the specific scope of the matching user group.",
                "description": "",
                "operationId": "getGroupRoleAtScope",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Group"
                ],
                "summary": "Add a role with the specific scope to the matching user group.",
                "description": "",
                "operationId": "addRoleAtScopeToGroup",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Group"
                ],
                "summary": "Remove a role with the specific scope from the matching user group.",
                "description": "",
                "operationId": "removeRoleAtScopeFromGroup",
                "parameters": [
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/users": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all users.",
                "description": "",
                "operationId": "getAllUsers",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/users"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/users"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create a new user.",
                "description": "",
                "operationId": "addUser",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/user"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user matching the locator.",
                "description": "",
                "operationId": "getUser",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update user matching the locator.",
                "description": "",
                "operationId": "replaceUser",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/user"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete user matching the locator.",
                "description": "",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/debug/rememberMe": {
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove the RememberMe data of the matching user.",
                "description": "",
                "operationId": "removeUserRememberMe",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/groups": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all groups of the matching user.",
                "description": "",
                "operationId": "getAllUserGroups",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update groups of the matching user.",
                "description": "",
                "operationId": "setUserGroups",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/groups"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/groups"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/groups/{groupLocator}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get a user group of the matching user.",
                "description": "",
                "operationId": "getUserGroup",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/group"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/group"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove the matching user from the specific group.",
                "description": "",
                "operationId": "removeUserFromGroup",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "groupLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/logout": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Terminate all current sessions of the matching user.",
                "description": "",
                "operationId": "logoutUser",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/permissions": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all permissions effective for the matching user.",
                "description": "",
                "operationId": "getUserPermissions",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/permissionAssignments"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/permissionAssignments"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/properties": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all properties of the matching user.",
                "description": "",
                "operationId": "getUserProperties",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/properties/{name}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get a property of the matching user.",
                "description": "",
                "operationId": "getUserProperty",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update a property of the matching user.",
                "description": "",
                "operationId": "setUserProperty",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove a property of the matching user.",
                "description": "",
                "operationId": "removeUserProperty",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/roles": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all user roles of the matching user.",
                "description": "",
                "operationId": "getAllUserRoles",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Add a role to the matching user.",
                "description": "",
                "operationId": "addRoleToUser",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/role"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update user roles of the matching user.",
                "description": "",
                "operationId": "setUserRoles",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/roles"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/roles/{roleId}/{scope}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get a user role with the specific scope from the matching user.",
                "description": "",
                "operationId": "getUserRolesAtScope",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Add a role with the specific scope to the matching user.",
                "description": "",
                "operationId": "addRoleToUserAtScope",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove a role with the specific scope from the matching user.",
                "description": "",
                "operationId": "removeUserRoleAtScope",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/tokens": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all authentication tokens of the matching user.",
                "description": "",
                "operationId": "getUserTokens",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/tokens"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tokens"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create a new authentication token for the matching user.",
                "description": "",
                "operationId": "addUserToken",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/token"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/token"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/token"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/tokens/{name}": {
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove an authentication token from the matching user.",
                "description": "",
                "operationId": "deleteUserToken",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/users/{userLocator}/{field}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get a field of the matching user.",
                "description": "",
                "operationId": "getUserField",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update a field of the matching user.",
                "description": "",
                "operationId": "setUserField",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove a property of the matching user.",
                "description": "",
                "operationId": "deleteUserField",
                "parameters": [
                    {
                        "name": "userLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "UserLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Get all VCS root instances.",
                "description": "",
                "operationId": "getAllVcsRootInstances",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/checkingForChangesQueue": {
            "post": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Check for the pending changes for all VCS root instances.",
                "description": "",
                "operationId": "requestPendingChangesCheck",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "requestor",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/commitHookNotification": {
            "post": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Send the commit hook notification.",
                "description": "",
                "operationId": "triggerCommitHookNotification",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "okOnNothingFound",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Get VCS root instance matching the locator.",
                "description": "",
                "operationId": "getVcsRootInstance",
                "parameters": [
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instance"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "List all files.",
                "description": "",
                "operationId": "getFilesList",
                "parameters": [
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Get specific file zipped.",
                "description": "",
                "operationId": "getZippedFile",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Download specific file.",
                "description": "",
                "operationId": "downloadFile",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Get metadata of specific file.",
                "description": "",
                "operationId": "getFileMetadata",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(/.*)?"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/file"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/file"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "List files under this path.",
                "description": "",
                "operationId": "getFilesListForSubpath",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "(.*)?"
                        }
                    },
                    {
                        "name": "basePath",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Get all properties of the matching VCS root instance.",
                "description": "",
                "operationId": "getVcsRootInstanceProperties",
                "parameters": [
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Get the repository state of the matching VCS root instance.",
                "description": "",
                "operationId": "getVcsRootInstanceRepositoryState",
                "parameters": [
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Update the repository state of the matching VCS root instance.",
                "description": "",
                "operationId": "setVcsRootInstanceRepositoryState",
                "parameters": [
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/entries"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/entries"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/entries"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Delete the last repository state of the matching VCS root instance.",
                "description": "",
                "operationId": "deleteVcsRootInstanceRepositoryState",
                "parameters": [
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Get the creation date of the matching VCS root instance.",
                "description": "",
                "operationId": "getVcsRootInstanceCreationDate",
                "parameters": [
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}": {
            "get": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Get a field of the matching VCS root instance.",
                "description": "",
                "operationId": "getVcsRootInstanceField",
                "parameters": [
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Get a field of the matching VCS root instance.",
                "description": "",
                "operationId": "setVcsRootInstanceField",
                "parameters": [
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VcsRootInstance"
                ],
                "summary": "Remove a field of the matching VCS root instance.",
                "description": "",
                "operationId": "deleteVcsRootInstanceField",
                "parameters": [
                    {
                        "name": "vcsRootInstanceLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootInstanceLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/vcs-roots": {
            "get": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Get all VCS roots.",
                "description": "",
                "operationId": "getAllVcsRoots",
                "parameters": [
                    {
                        "name": "locator",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-roots"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-roots"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Add a new VCS root.",
                "description": "",
                "operationId": "addVcsRoot",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/vcs-root"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/vcs-root"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}": {
            "get": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Get root endpoints.",
                "description": "",
                "operationId": "getRootEndpoints",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Remove VCS root matching the locator.",
                "description": "",
                "operationId": "deleteVcsRoot",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/instances": {
            "get": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Get all VCS root instances of the matching VCS root.",
                "description": "",
                "operationId": "getVcsRootInstances",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vcs-root-instances"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/properties": {
            "get": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Get all properties of the matching VCS root.",
                "description": "",
                "operationId": "getAllVcsRootProperties",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Update all properties of the matching VCS root.",
                "description": "",
                "operationId": "setVcsRootProperties",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/properties"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/properties"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Delete all properties of the matching VCS root.",
                "description": "",
                "operationId": "deleteAllVcsRootProperties",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}": {
            "get": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Get a property on the matching VCS root.",
                "description": "",
                "operationId": "getVcsRootProperty",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Update a property of the matching VCS root.",
                "description": "",
                "operationId": "setVcsRootProperty",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Delete a property of the matching VCS root.",
                "description": "",
                "operationId": "deleteVcsRootProperty",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/settingsFile": {
            "get": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Get the settings file of the matching VCS root.",
                "description": "",
                "operationId": "getVcsRootSettingsFile",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/vcs-roots/{vcsRootLocator}/{field}": {
            "get": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Get a field of the matching VCS root.",
                "description": "",
                "operationId": "getVcsRootField",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "VcsRoot"
                ],
                "summary": "Update a field of the matching VCS root.",
                "description": "",
                "operationId": "setVcsRootField",
                "parameters": [
                    {
                        "name": "vcsRootLocator",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "VcsRootLocator"
                        }
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/setAgentPoolFieldBody"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/rest/version": {
            "get": {
                "tags": [
                    "Root"
                ],
                "summary": "Get the TeamCity server version.",
                "description": "",
                "operationId": "getVersion",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "response": {
                                        "value": ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "servers": [
        {
            "url": "//ubermorgen.teamcity.com"
        }
    ],
    "components": {
        "requestBodies": {
            "projects": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/projects"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/projects"
                        }
                    }
                }
            },
            "setAgentPoolFieldBody": {
                "content": {
                    "text/plain": {
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "properties": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/properties"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/properties"
                        }
                    }
                }
            },
            "user": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/user"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/user"
                        }
                    }
                }
            },
            "type": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/type"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/type"
                        }
                    }
                }
            },
            "role": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/role"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/role"
                        }
                    }
                }
            },
            "buildTypes": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/buildTypes"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/buildTypes"
                        }
                    }
                }
            },
            "snapshot-dependency": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/snapshot-dependency"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/snapshot-dependency"
                        }
                    }
                }
            },
            "projectFeature": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/projectFeature"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/projectFeature"
                        }
                    }
                }
            },
            "feature": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/feature"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/feature"
                        }
                    }
                }
            },
            "versionedSettingsTokens": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/versionedSettingsTokens"
                        }
                    }
                }
            },
            "build": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/build"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/build"
                        }
                    }
                }
            },
            "approveQueuedBuildBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "pinInfo": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/pinInfo"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/pinInfo"
                        }
                    }
                }
            },
            "buildType": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/buildType"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/buildType"
                        }
                    }
                }
            },
            "roles": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/roles"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/roles"
                        }
                    }
                }
            },
            "groups": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/groups"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/groups"
                        }
                    }
                }
            },
            "step": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/step"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/step"
                        }
                    }
                }
            },
            "agentPool": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/agentPool"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/agentPool"
                        }
                    }
                }
            },
            "newBuildTypeDescription": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/newBuildTypeDescription"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/newBuildTypeDescription"
                        }
                    }
                }
            },
            "buildCancelRequest": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/buildCancelRequest"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/buildCancelRequest"
                        }
                    }
                }
            },
            "project": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/project"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/project"
                        }
                    }
                }
            },
            "tags": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/tags"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/tags"
                        }
                    }
                }
            },
            "agent-requirement": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/agent-requirement"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/agent-requirement"
                        }
                    }
                }
            },
            "artifact-dependency": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/artifact-dependency"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/artifact-dependency"
                        }
                    }
                }
            },
            "property": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/property"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/property"
                        }
                    }
                }
            },
            "trigger": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/trigger"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/trigger"
                        }
                    }
                }
            },
            "vcs-root-entry": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/vcs-root-entry"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/vcs-root-entry"
                        }
                    }
                }
            },
            "investigation": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/investigation"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/investigation"
                        }
                    }
                }
            },
            "mutes": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/mutes"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/mutes"
                        }
                    }
                }
            }
        },
        "schemas": {
            "AgentLocator": {
                "type": "object",
                "properties": {
                    "$singleValue": {
                        "type": "string",
                        "format": "String value",
                        "description": "Agent name."
                    },
                    "authorized": {
                        "type": "string",
                        "description": "Is the agent authorized.",
                        "enum": [
                            "true",
                            "false",
                            "any"
                        ]
                    },
                    "build": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build locator which run on this agent (or is compatible with for queued builds)."
                    },
                    "compatible": {
                        "type": "string",
                        "format": "CompatibleDimensions",
                        "description": "Compatible build types locator."
                    },
                    "connected": {
                        "type": "string",
                        "description": "Is the agent connected.",
                        "enum": [
                            "true",
                            "false",
                            "any"
                        ]
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "enabled": {
                        "type": "string",
                        "description": "Is the agent enabled.",
                        "enum": [
                            "true",
                            "false",
                            "any"
                        ]
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Agent id."
                    },
                    "ip": {
                        "type": "string",
                        "format": "String value",
                        "description": "Agent ip address"
                    },
                    "name": {
                        "type": "string",
                        "format": "String value",
                        "description": "Agent name."
                    },
                    "parameter": {
                        "type": "string",
                        "format": "Parameter condition.",
                        "description": "Matching parameter."
                    },
                    "pool": {
                        "type": "string",
                        "format": "AgentPoolDimensions",
                        "description": "Agent pool locator."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Agent",
                "x-model-examples": [
                    "`name:DefaultAgent` - find agent with `DefaultAgent` name.",
                    "`pool:(<agentPoolLocator>),connected:true` - find all connected agents in a pool found by `agentPoolLocator`."
                ],
                "description": "Represents a locator string for filtering Agent entities."
            },
            "AgentPoolLocator": {
                "type": "object",
                "properties": {
                    "$singleValue": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Agent pool id."
                    },
                    "agent": {
                        "type": "string",
                        "format": "AgentDimensions",
                        "description": "Pool's associated agents locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Agent pool id."
                    },
                    "name": {
                        "type": "string",
                        "format": "String value",
                        "description": "Agent pool name."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Pool's associated projects locator."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "AgentPool",
                "x-model-examples": [
                    "`name:Default` — find `Default` agent pool details.",
                    "`project:(<projectLocator>)` — find pool associated with project found by `projectLocator`."
                ],
                "description": "Represents a locator string for filtering AgentPool entities."
            },
            "AgentTypeLocator": {
                "type": "object",
                "properties": {
                    "$singleValue": {
                        "type": "string",
                        "format": "String value",
                        "description": "id of the AgentType."
                    },
                    "agent": {
                        "type": "string",
                        "format": "AgentDimensions",
                        "description": "AgentType of the given agent."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "id of the AgentType."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "AgentType",
                "description": "Represents a locator string for filtering AgentType entities."
            },
            "ArtifactDownloadInfo": {
                "type": "object",
                "properties": {
                    "downloadTimestamp": {
                        "type": "string",
                        "example": "20250402T151529+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The time when a corresponding file was downloaded."
                    },
                    "path": {
                        "type": "string",
                        "example": "output/lib/log.txt",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The path to the artifact file on a build agent machine that processed the upstream build which published this file."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.downloadedArtifacts.",
                "x-is-data": true,
                "description": "Stores information about each of the files provided by a build chain build to a downstream dependent build. Can be accessed via the `artifactInfo` field of the `DownloadInfo` object."
            },
            "AuditLocator": {
                "type": "object",
                "properties": {
                    "$singleValue": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Event id."
                    },
                    "action": {
                        "type": "string",
                        "description": "Type of the action.",
                        "enum": [
                            "build_problem_investigation_assign_sticky_no_assignee",
                            "group_remove_all_roles",
                            "build_type_template_extract",
                            "cleanup_user_interrupt",
                            "role_add_permission",
                            "build_type_investigation_assign_no_assignee",
                            "build_type_create",
                            "trusted_project_removed",
                            "node_responsibility_disabled",
                            "build_type_template_delete",
                            "build_type_delete",
                            "server_encryption_key_changed",
                            "role_delete_permission",
                            "build_type_investigation_change_with_reassign",
                            "group_add_role",
                            "create_token_for_user",
                            "agent_unauthorize",
                            "node_responsibility_enabled",
                            "vcs_root_scope_change",
                            "build_type_investigation_change",
                            "test_mute_in_project",
                            "vcs_root_edit_settings",
                            "build_type_investigation_remove_no_assignee",
                            "build_problem_investigation_change",
                            "_test_mute_in_project",
                            "build_problem_investigation_assign_no_assignee",
                            "test_investigation_assign",
                            "user_delete",
                            "role_include_another_role",
                            "test_mute_in_build",
                            "build_type_pause",
                            "agent_pool_props_changed",
                            "agent_type_can_run_configurations_change",
                            "_global_vcs_root_remove",
                            "build_problem_mute_in_build",
                            "build_type_edit_settings",
                            "health_status_item_show",
                            "private_recipe_created_from_template",
                            "server_update",
                            "vcs_root_create",
                            "backup_settings_change",
                            "artifacts_storage_settings_activated",
                            "_build_type_delete",
                            "test_mute_in_build_type",
                            "plugin_enable",
                            "changed_https_redirect_strategy",
                            "_build_problem_unmute_in_build",
                            "usage_statistics_reporting_disabled",
                            "added_agent_jdk",
                            "project_associate_with_pool",
                            "refresh_2fa_grace_period_for_user",
                            "build_type_sources_clean",
                            "native_git_enabled",
                            "test_unmute",
                            "build_cancel",
                            "ssl_certificate_upload",
                            "_local_vcs_root_remove",
                            "connected_servers_update",
                            "build_problem_unmute_in_build",
                            "build_type_template_create",
                            "agent_disable",
                            "artifacts_storage_settings_created",
                            "build_pin",
                            "build_type_create_from_template",
                            "user_add_to_group",
                            "project_rename",
                            "test_mark_as_fixed",
                            "test_mark_as_fixed_no_assignee",
                            "agent_type_move_to_pool",
                            "stored_oauth_token_deleted_by_user",
                            "agent_reboot_requested",
                            "project_external_id_change",
                            "build_problem_mute_in_build_type",
                            "build_remove",
                            "build_type_detach_from_template",
                            "_build_type_copy",
                            "delete_all_tokens",
                            "artifacts_storage_settings_updated",
                            "user_update",
                            "agent_delete",
                            "agent_authorize",
                            "_user_group_delete",
                            "created_agent_interactive_session",
                            "agent_type_run_configuration_policy_change",
                            "private_recipe_created",
                            "_build_problem_mute_in_build",
                            "project_edit_settings",
                            "test_investigation_change",
                            "user_group_create",
                            "build_queue_resumed",
                            "_test_mute_in_build_type",
                            "build_problem_mute_in_project",
                            "user_remove_from_group",
                            "build_type_templates_reordered",
                            "_project_remove",
                            "build_problem_investigation_remove",
                            "tool_removed",
                            "deactivated_jwt_license",
                            "cleanup_manual_start",
                            "vcs_root_external_id_change",
                            "private_recipe_updated",
                            "role_exclude_another_role",
                            "authentication_edit_settings",
                            "project_create",
                            "tool_default_changed",
                            "delete_token_for_user",
                            "build_promotion_tag_change",
                            "test_investigation_assign_sticky",
                            "build_problem_investigation_assign",
                            "user_group_delete",
                            "plugin_disable",
                            "user_remove_role_in_scope",
                            "vcs_root_update",
                            "health_status_item_hide",
                            "build_type_template_edit_settings",
                            "build_queue_paused",
                            "_build_comment",
                            "build_comment_remove",
                            "server_remove_ssl_certificate",
                            "build_comment",
                            "build_type_copy",
                            "build_type_investigation_assign_sticky_no_assignee",
                            "build_add_to_queue",
                            "_user_delete",
                            "test_investigation_assign_no_assignee",
                            "agent_pool_create",
                            "create_restricted_token_for_user",
                            "build_type_external_id_change",
                            "user_remove_all_roles",
                            "delete_tokens_by_system",
                            "build_type_activate",
                            "test_investigation_remove_no_assignee",
                            "build_type_mark_as_fixed_no_assignee",
                            "_agent_delete",
                            "native_git_disabled",
                            "ssl_certificate_renamed",
                            "_build_comment_remove",
                            "build_type_investigation_assign",
                            "load_settings_from_vcs",
                            "agent_sources_clean",
                            "build_problem_mark_as_fixed",
                            "build_problem_unmute",
                            "plugin_deleted",
                            "backup_stop",
                            "tool_added",
                            "activated_jwt_license",
                            "plugin_uploaded",
                            "test_investigation_change_with_reassign",
                            "role_delete",
                            "build_approved_by_user",
                            "removed_agent_jdk",
                            "build_unpin",
                            "build_type_template_external_id_change",
                            "_project_copy",
                            "artifacts_storage_settings_deleted",
                            "private_recipe_created_from_build_type",
                            "agent_pool_delete",
                            "project_dearchive",
                            "project_remove",
                            "user_remove_role",
                            "build_problem_investigation_change_with_reassign",
                            "build_type_internal_id_change",
                            "dsl_library_uploaded",
                            "agent_enable",
                            "delete_all_tokens_for_user",
                            "dependency_check_mode_changed",
                            "usage_statistics_collecting_started",
                            "build_marked_as_successful",
                            "logout_all_sessions_of_user",
                            "server_restarted",
                            "trusted_project_added",
                            "project_move",
                            "unknown_action",
                            "group_remove_role_in_scope",
                            "build_type_template_copy",
                            "ssl_certificate_deleted",
                            "disable_2fa_for_user",
                            "private_recipe_updated_from_template",
                            "build_marked_as_failed",
                            "build_type_attach_to_template",
                            "private_recipe_removed",
                            "artifacts_storage_settings_deactivated",
                            "role_create",
                            "usage_statistics_reporting_enabled",
                            "test_investigation_assign_sticky_no_assignee",
                            "project_archive",
                            "changed_https_port",
                            "global_vcs_root_remove",
                            "group_add_to_group",
                            "backup_start",
                            "agent_pool_rename",
                            "project_copy",
                            "server_file_change",
                            "commit_settings_to_vcs",
                            "build_tag_change",
                            "build_type_investigation_remove",
                            "build_type_mark_as_fixed",
                            "project_dissociate_from_pool",
                            "private_recipe_updated_from_build_type",
                            "user_add_role",
                            "build_type_template_move",
                            "agent_update_java_requested",
                            "build_problem_investigation_assign_sticky",
                            "user_create",
                            "__test_mute_in_project",
                            "local_vcs_root_remove",
                            "build_type_investigation_assign_sticky",
                            "server_security_updates_mode_changed",
                            "plugins_repository_settings_updated",
                            "stored_oauth_token_created_by_user",
                            "build_type_move",
                            "_build_type_move",
                            "server_install_ssl_certificate",
                            "dsl_library_removed",
                            "build_problem_investigation_remove_no_assignee",
                            "group_remove_from_group",
                            "build_problem_mark_as_fixed_no_assignee",
                            "create_2fa_secret_for_user",
                            "logout_all_users",
                            "create_2fa_recovery_for_user",
                            "build_remove_from_queue",
                            "group_remove_role",
                            "test_investigation_remove",
                            "vcs_root_edit_commit_description"
                        ]
                    },
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Related project locator, only single values are supported."
                    },
                    "buildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Related build type or template of the action, only single values are supported."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "string",
                        "format": "String value",
                        "description": "Event id."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "systemAction": {
                        "type": "string",
                        "description": "Is an action made by TeamCity itself.",
                        "enum": [
                            "true",
                            "false",
                            "any"
                        ]
                    },
                    "user": {
                        "type": "string",
                        "format": "UserDimensions",
                        "description": "Locator of user who caused the audit event."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "AuditEvent",
                "x-model-examples": [
                    "`count:1000` — find last `1000` audit events.",
                    "`user:(<userLocator>)` — find last 100 events by user found by `userLocator`."
                ],
                "description": "Represents a locator string for filtering AuditEvent entities."
            },
            "AuthModule": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true
            },
            "AuthModules": {
                "type": "object",
                "properties": {
                    "module": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthModule"
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true
            },
            "BranchLocator": {
                "type": "object",
                "properties": {
                    "$singleValue": {
                        "type": "string",
                        "format": "String value",
                        "description": "Branch name."
                    },
                    "build": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build locator."
                    },
                    "buildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator."
                    },
                    "changesFromDependencies": {
                        "type": "string",
                        "description": "Include branches from dependencies.",
                        "enum": [
                            "true",
                            "false",
                            "any"
                        ]
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "default": {
                        "type": "string",
                        "description": "Is default branch.",
                        "enum": [
                            "true",
                            "false",
                            "any"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "format": "ValueCondition",
                        "description": "Branch name."
                    },
                    "policy": {
                        "type": "string",
                        "description": "Branch retrieval policy.",
                        "enum": [
                            "vcs_branches",
                            "active_vcs_branches",
                            "history_branches",
                            "active_history_branches",
                            "active_history_and_active_vcs_branches",
                            "all_branches"
                        ]
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "unspecified": {
                        "type": "string",
                        "description": "Branch is unspecified if for some reason TeamCity failed to find appropriate branch name for the build.",
                        "enum": [
                            "true",
                            "false",
                            "any"
                        ]
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Branch",
                "x-model-examples": [
                    "`build:<buildLocator>` - find branch with which the build found by `buildLocator` was started.",
                    "`buildType:<buildTypeLocator>` - find branches of a build configuration found by `buildTypeLocator`."
                ],
                "description": "Represents a locator string for filtering Branch entities."
            },
            "BuildExecutor": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "k8s-external",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The name of an external executor that processed this build."
                    }
                },
                "x-help-article-name": "External Kubernetes Agents",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/external-kubernetes-agents.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "description": "Represents an executor of a build."
            },
            "BuildLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "agent": {
                        "type": "string",
                        "format": "AgentLocator",
                        "description": "Agent locator."
                    },
                    "agentTypeId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "typeId of agent used to execute build."
                    },
                    "any": {
                        "type": "boolean",
                        "description": "State can be any."
                    },
                    "artifactDependency": {
                        "type": "string"
                    },
                    "branch": {
                        "type": "string",
                        "format": "BranchLocator",
                        "description": "Branch locator."
                    },
                    "buildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator."
                    },
                    "canceled": {
                        "type": "boolean",
                        "description": "Is canceled."
                    },
                    "compatibleAgent": {
                        "type": "string",
                        "format": "AgentLocator",
                        "description": "Agent locator."
                    },
                    "composite": {
                        "type": "boolean",
                        "description": "Is composite."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "defaultFilter": {
                        "type": "boolean",
                        "description": "If true, applies default filter which returns only \"normal\" builds (finished builds which are not canceled, not failed-to-start, not personal, and on default branch (in branched build configurations))."
                    },
                    "failedToStart": {
                        "type": "boolean",
                        "description": "Is failed to start."
                    },
                    "finishDate": {
                        "type": "string",
                        "format": "date:<yyyyMMddTHHmmss+ZZZZ>,build:<build locator>,condition:<before/after>",
                        "description": "Requires either date or build dimension."
                    },
                    "finished": {
                        "type": "boolean",
                        "description": "Is finished."
                    },
                    "hanging": {
                        "type": "boolean",
                        "description": "Is hanging."
                    },
                    "history": {
                        "type": "boolean",
                        "description": "Is history build."
                    },
                    "id": {
                        "type": "string",
                        "description": "Entity ID."
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "lookupLimit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit processing to the latest `<lookupLimit>` entities."
                    },
                    "number": {
                        "type": "string",
                        "description": "Build number string."
                    },
                    "personal": {
                        "type": "boolean",
                        "description": "Is a personal build."
                    },
                    "pinned": {
                        "type": "boolean",
                        "description": "Is pinned."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct parent) locator."
                    },
                    "property": {
                        "type": "string",
                        "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                        "enum": [
                            "exists",
                            "not-exists",
                            "equals",
                            "does-not-equal",
                            "starts-with",
                            "contains",
                            "does-not-contain",
                            "ends-with",
                            "any",
                            "matches",
                            "does-not-match",
                            "more-than",
                            "no-more-than",
                            "less-than",
                            "no-less-than",
                            "ver-more-than",
                            "ver-no-more-than",
                            "ver-less-than",
                            "ver-no-less-than"
                        ]
                    },
                    "queued": {
                        "type": "boolean",
                        "description": "Is queued."
                    },
                    "queuedDate": {
                        "type": "string",
                        "format": "date:<yyyyMMddTHHmmss+ZZZZ>,build:<build locator>,condition:<before/after>",
                        "description": "Requires either date or build dimension."
                    },
                    "revision": {
                        "type": "string",
                        "description": "Build revision."
                    },
                    "running": {
                        "type": "boolean",
                        "description": "Is running."
                    },
                    "snapshotDependency": {
                        "type": "string"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date:<yyyyMMddTHHmmss+ZZZZ>,build:<build locator>,condition:<before/after>",
                        "description": "Requires either date or build dimension."
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "queued",
                            "running",
                            "finished",
                            "any"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "Status text."
                    },
                    "tag": {
                        "type": "string",
                        "format": "TagLocator",
                        "description": "Tag locator."
                    },
                    "taskId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "ID of a build or build promotion."
                    },
                    "user": {
                        "type": "string",
                        "format": "UserLocator",
                        "description": "For personal builds checks the owner of the build, triggerring user in other cases."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Build",
                "x-model-examples": [
                    "`id:1` — find build with ID `1`.",
                    "`buildType:<buildTypeLocator>` — find builds under build configuration found by `buildTypeLocator`.",
                    "`defaultFilter:false,agent:<agentLocator>` — find builds executed on agent found by `agentLocator`, with `defaultFilter` disabled (see below)."
                ],
                "description": "Represents a locator string for filtering Build entities."
            },
            "BuildQueueLocator": {
                "type": "object",
                "properties": {
                    "agent": {
                        "type": "string",
                        "format": "AgentLocator",
                        "description": "Agent locator."
                    },
                    "buildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "string",
                        "description": "Entity ID."
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "personal": {
                        "type": "boolean",
                        "description": "Is personal."
                    },
                    "pool": {
                        "type": "string",
                        "format": "AgentPoolLocator",
                        "description": "Agent pool locator."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project locator."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "taskId": {
                        "type": "string",
                        "description": "Deprecated."
                    },
                    "user": {
                        "type": "string",
                        "format": "UserLocator",
                        "description": "User locator."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Build",
                "x-model-examples": [
                    "`buildType:<buildTypeLocator>` — find queued builds under build configuration found by buildTypeLocator.",
                    "`user:<userLocator>` — find queued builds started by user found by userLocator."
                ],
                "description": "Represents a locator string for filtering Build entities."
            },
            "BuildStatusUpdate": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "SUCCESS",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Set to either 'FAILURE' or 'SUCCESS'."
                    },
                    "comment": {
                        "type": "string",
                        "example": "Irrelevant test failures.",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Your custom note that explains why the build status was manually changed."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "description": "Send instances of this class to the `/app/rest/builds/<locator>/status` endpoint to change the status of a build to either 'SUCCESS' or 'FAILURE'. This replicates the *Mark as failed...* and *Mark as successful...* operations available from the 'Actions' menu on the build results page in TeamCity UI."
            },
            "BuildTriggerCustomization": {
                "type": "object",
                "properties": {
                    "enforceCleanCheckout": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if the agent should clear the build checkout directory before checking out sources from the VCS; otherwise, **false**."
                    },
                    "enforceCleanCheckoutForDependencies": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if the `enforceCleanCheckout` behavior should all apply to all snapshot dependencies of this build; otherwise, **false**."
                    },
                    "parameters": {
                        "$ref": "#/components/schemas/properties"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "description": "Passed to the `Trigger.buildCustomization` property to trigger a customized build."
            },
            "BuildTypeLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "build": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "string"
                    },
                    "internalId": {
                        "type": "string"
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "name": {
                        "type": "string"
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "Is paused."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct parent) locator."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "template": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Base template locator."
                    },
                    "templateFlag": {
                        "type": "boolean",
                        "description": "Is a template."
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "vcsRoot": {
                        "type": "string",
                        "format": "VcsRootLocator",
                        "description": "VCS root locator."
                    },
                    "vcsRootInstance": {
                        "type": "string",
                        "format": "VcsRootInstanceLocator",
                        "description": "VCS root instance locator."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "BuildType",
                "x-model-examples": [
                    "`name:MyBuildType` — find build configuration with `MyBuildType` name",
                    "`project:<projectLocator>` — find build configurations under project found by `projectLocator`"
                ],
                "description": "Represents a locator string for filtering BuildType entities."
            },
            "ChangeLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "build": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build locator."
                    },
                    "buildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator."
                    },
                    "comment": {
                        "type": "string"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "file": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "Entity ID."
                    },
                    "internalVersion": {
                        "type": "string",
                        "description": "Commit SHA."
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "pending": {
                        "type": "boolean",
                        "description": "Is pending."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project locator."
                    },
                    "sinceChange": {
                        "type": "string",
                        "description": "Commit SHA since which the changes should be returned."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "user": {
                        "type": "string",
                        "format": "UserLocator",
                        "description": "User locator."
                    },
                    "username": {
                        "type": "string",
                        "description": "VCS side username."
                    },
                    "vcsRoot": {
                        "type": "string",
                        "format": "VcsRootLocator",
                        "description": "VCS root locator."
                    },
                    "vcsRootInstance": {
                        "type": "string",
                        "format": "VcsRootInstanceLocator",
                        "description": "VCS instance locator."
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Change",
                "x-model-examples": [
                    "`username:MyVCSUsername` — find last 100 changes made by user with `MyVCSUsername` VCS username.",
                    "`pending:true,buildType:<buildTypeLocator>` — find all pending changes on build configuration found by `buildTypeLocator`."
                ],
                "description": "Represents a locator string for filtering Change entities."
            },
            "ChangeStatus": {
                "type": "object",
                "properties": {
                    "runningSuccessfullyBuilds": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of builds that process this change and are currently running with the 'running and failing' status."
                    },
                    "pendingBuildTypes": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of build configurations (build types) that have not yet processed this change and have it in their 'pending changes' list."
                    },
                    "finishedBuilds": {
                        "type": "integer",
                        "format": "int32",
                        "example": 4,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of finished builds that processed this change, regardless of their final status."
                    },
                    "successfulBuilds": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns how many of `finishedBuilds` finished successfully."
                    },
                    "totalProblems": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The total number of build problems associated with this change, across all build configurations and their builds."
                    },
                    "newFailedTests": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The total number of new failed tests associated with this change, across all build configurations and their builds."
                    },
                    "otherFailedTests": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The total number of failed tests associated with this change. This number does not inlcude the number of new test failures."
                    },
                    "queuedBuildsCount": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of currently queued builds whose list of processed changes includes this change."
                    },
                    "criticalBuilds": {
                        "$ref": "#/components/schemas/builds"
                    },
                    "notCriticalBuilds": {
                        "$ref": "#/components/schemas/builds"
                    },
                    "newTestsFailedBuilds": {
                        "$ref": "#/components/schemas/builds"
                    },
                    "compilationErrorBuilds": {
                        "$ref": "#/components/schemas/builds"
                    },
                    "runningBuilds": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of currently running builds processing this change, regardless of their current build status."
                    },
                    "failedBuilds": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns how many of `finishedBuilds` failed."
                    },
                    "cancelledBuilds": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns how many of `finishedBuilds` were cancelled before they finished."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "description": "Stores information this change in terms of effects it had on the TeamCity server: the number of failed/cancelled/successful builds, the number of build configurations that have this change in the pending changes list, the number of build problems and failed tests caused by this change, and so on. Fairly expensive to compute."
            },
            "CloudImageLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Projects where the cloud profiles/images are accessible."
                    },
                    "agent": {
                        "type": "string",
                        "format": "AgentDimensions",
                        "description": "Agent locator."
                    },
                    "agentPool": {
                        "type": "string",
                        "format": "AgentPoolDimensions",
                        "description": "Agent pool locator."
                    },
                    "agentType": {
                        "type": "string",
                        "format": "AgentTypeDimensions",
                        "description": "Agent type locator."
                    },
                    "compatibleBuildPromotion": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build promotion locator."
                    },
                    "compatibleBuildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "string",
                        "format": "Specially formatted text",
                        "description": "Image id as provided by list images call."
                    },
                    "instance": {
                        "type": "string",
                        "format": "CloudInstanceDimensions",
                        "description": "Cloud instance locator."
                    },
                    "name": {
                        "type": "string",
                        "format": "Value condition",
                        "description": "Image name."
                    },
                    "profile": {
                        "type": "string",
                        "format": "CloudProfileFinder",
                        "description": "Cloud profile locator."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Projects defining the cloud profiles/images."
                    },
                    "property": {
                        "type": "string",
                        "format": "`property:(name:<name>,value:<value>,matchType:<matchType>)` where `matchType` is one of: [exists,not-exists,equals,does-not-equal,starts-with,contains,does-not-contain,ends-with,any,matches,does-not-match,more-than,no-more-than,less-than,no-less-than,ver-more-than,ver-no-more-than,ver-less-than,ver-no-less-than]"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "CloudImage",
                "x-model-examples": [
                    "`name:MyImage` - find image with name `MyImage`.",
                    "`profile:<profileLocator>` - find all images in cloud profile found by `profileLocator`."
                ],
                "description": "Represents a locator string for filtering CloudImage entities."
            },
            "CloudInstanceLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Projects where the cloud profiles/images are accessible."
                    },
                    "agent": {
                        "type": "string",
                        "format": "AgentDimensions",
                        "description": "Agent running on an instance."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "string",
                        "format": "Should be in the form \"profileId:<profileId>,imageId:<imageId>,id:<instanceId>\".",
                        "description": "Instance id as provided by list instances call."
                    },
                    "image": {
                        "type": "string",
                        "format": "CloudImageDimensions",
                        "description": "Cloud image corresponding to an instance."
                    },
                    "networkAddress": {
                        "type": "string",
                        "format": "DNS name or IP address",
                        "description": "Instance network address."
                    },
                    "profile": {
                        "type": "string",
                        "format": "CloudProfileFinder",
                        "description": "Cloud profile of an instance."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project defining the cloud profiles/images."
                    },
                    "property": {
                        "type": "string",
                        "format": "`property:(name:<name>,value:<value>,matchType:<matchType>)` where `matchType` is one of: [exists,not-exists,equals,does-not-equal,starts-with,contains,does-not-contain,ends-with,any,matches,does-not-match,more-than,no-more-than,less-than,no-less-than,ver-more-than,ver-no-more-than,ver-less-than,ver-no-less-than]"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "CloudInstance",
                "x-model-examples": [
                    "`agent:<agentLocator>` - find cloud instance which hosts agent found by `agentLocator`.",
                    "`profile:<profileLocator>` - find all cloud instances in cloud profile found by `profileLocator`."
                ],
                "description": "Represents a locator string for filtering CloudInstance entities."
            },
            "CloudProfileLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Projects where the cloud profiles are accessible"
                    },
                    "cloudProviderId": {
                        "type": "string",
                        "format": "String value",
                        "description": "Profile cloud provider id."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "string",
                        "format": "String value",
                        "description": "Profile id."
                    },
                    "image": {
                        "type": "string",
                        "format": "CloudImageDimensions",
                        "description": "Cloud image which belongs to a profile."
                    },
                    "instance": {
                        "type": "string",
                        "format": "CloudInstanceDimensions",
                        "description": "Cloud instance which belongs to a profile."
                    },
                    "name": {
                        "type": "string",
                        "format": "ValueCondition",
                        "description": "Profile name."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Projects defining the cloud profiles."
                    },
                    "property": {
                        "type": "string",
                        "format": "`property:(name:<name>,value:<value>,matchType:<matchType>)` where `matchType` is one of: [exists,not-exists,equals,does-not-equal,starts-with,contains,does-not-contain,ends-with,any,matches,does-not-match,more-than,no-more-than,less-than,no-less-than,ver-more-than,ver-no-more-than,ver-less-than,ver-no-less-than]"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "CloudProfile",
                "x-model-examples": [
                    "`name:MyCloudProfile` - find cloud profile with `MyCloudProfile` name.",
                    "`project:<projectLocator>` - find all cloud profiles under project found by `projectLocator`."
                ],
                "description": "Represents a locator string for filtering CloudProfile entities."
            },
            "DeploymentDashboardLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Projects where the deployment dashboards are accessible."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "string",
                        "format": "String value",
                        "description": "Dashboard id."
                    },
                    "name": {
                        "type": "string",
                        "format": "String value",
                        "description": "Dashboard name."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Projects defining the deployment dashboards."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "DeploymentDashboard",
                "x-model-examples": [
                    "`id:<dashboardId>` - find dashboard with ID `dashboardId`.",
                    "`project:<projectLocator>` - find all deployment dashboards under project found by `projectLocator`."
                ],
                "description": "Represents a locator string for filtering DeploymentDashboard entities."
            },
            "DeploymentHistory": {
                "type": "object",
                "properties": {
                    "currentState": {
                        "$ref": "#/components/schemas/DeploymentStateEntry"
                    },
                    "states": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeploymentStateEntry"
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-is-data": true
            },
            "DeploymentInstanceLocator": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "currentState": {
                        "type": "string",
                        "description": "Current state of deployment.",
                        "enum": [
                            "in_progress",
                            "successful",
                            "failed",
                            "cancelled",
                            "unknown"
                        ]
                    },
                    "dashboard": {
                        "type": "string",
                        "format": "DeploymentDashboardLocator",
                        "description": "Deployment dashboard locator."
                    },
                    "id": {
                        "type": "string",
                        "format": "String value",
                        "description": "Dashboard id."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "DeploymentInstance",
                "x-model-examples": [
                    "`id:<instanceId>,dashboard:<dashboardLocator>` - find instance with ID `instanceId` under dashboard found by `dashboardLocator`."
                ],
                "description": "Represents a locator string for filtering DeploymentInstance entities."
            },
            "DeploymentStateEntry": {
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "enum": [
                            "IN_PROGRESS",
                            "SUCCESSFUL",
                            "FAILED",
                            "CANCELLED",
                            "UNKNOWN"
                        ]
                    },
                    "buildId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "changeDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "x-object-type": "DataEntity",
                "x-is-data": true
            },
            "FileChange": {
                "type": "object",
                "properties": {
                    "before-revision": {
                        "type": "string",
                        "example": "a351752816bb639a5044570fa40ea00f7b311727",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The revision a modified file had before the change."
                    },
                    "after-revision": {
                        "type": "string",
                        "example": "42697188bbf4e4fdb5128b03f3c88e0da55a2dce",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The revision a modified file obtained after the change."
                    },
                    "changeType": {
                        "type": "string",
                        "example": "edited",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Specifies the type of a file edit: `added`, `removed`, or `edited`."
                    },
                    "changeTypeComment": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "file": {
                        "type": "string",
                        "example": "src/test/java/com/mycompany/app/AppTest.java",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The name of a modified file, including the relative repository path."
                    },
                    "relative-file": {
                        "type": "string",
                        "example": "src/test/java/com/mycompany/app/AppTest.java",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative name of a modified file."
                    },
                    "directory": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if a modified entity is a directory instead of a file; otherwise, **true**."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "description": "The file changed by the specific commit."
            },
            "InvestigationLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "assignee": {
                        "type": "string",
                        "format": "UserLocator",
                        "description": "User locator."
                    },
                    "assignmentProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct parent) locator."
                    },
                    "buildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "problem": {
                        "type": "string",
                        "format": "ProblemLocator",
                        "description": "Problem locator."
                    },
                    "reporter": {
                        "type": "string",
                        "format": "UserLocator",
                        "description": "User locator."
                    },
                    "resolution": {
                        "type": "string",
                        "enum": [
                            "manually",
                            "when_fixed"
                        ]
                    },
                    "sinceDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "yyyyMMddTHHmmss+ZZZZ"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "taken",
                            "fixed",
                            "given_up",
                            "none"
                        ]
                    },
                    "test": {
                        "type": "string",
                        "format": "TestLocator",
                        "description": "Test locator."
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "anyProblem",
                            "test",
                            "problem",
                            "unknown"
                        ]
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Investigation",
                "x-model-examples": [
                    "`assignee:John Smith` - find investigations assigned to `John Smith`.",
                    "`state:taken` - find investigations which are currently in work."
                ],
                "description": "Represents a locator string for filtering Investigation entities."
            },
            "Issue": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "url": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".issue.",
                "x-is-data": true,
                "description": "Represents an issue related to the specific change."
            },
            "IssueUsage": {
                "type": "object",
                "properties": {
                    "changes": {
                        "$ref": "#/components/schemas/changes"
                    },
                    "issue": {
                        "$ref": "#/components/schemas/Issue"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".issue.",
                "x-is-data": true,
                "description": "Represents a relation between the issue and the Changes entity."
            },
            "LabeledValue": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "label": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".project.",
                "x-is-data": true
            },
            "MatrixConfiguration": {
                "type": "object",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "example": false,
                        "description": "This is the internal property and is not intended to be used."
                    },
                    "parameters": {
                        "$ref": "#/components/schemas/matrixBuildFeatureDescriptor"
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the build feature is enabled; otherwise, *false*."
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/MatrixDependencies"
                    }
                },
                "x-help-article-name": "Matrix Build",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/matrix-build.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.matrix.",
                "x-is-data": true,
                "description": "Stores unique matrix build settings. Matrix builds are virtual builds spawned by build configurations with the Matrix Build feature. This object is accessible via the `build.matrixConfiguration` field."
            },
            "MatrixDependencies": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 7,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of MatrixDependency objects owned by this collection.",
                        "x-defined-in-base": true
                    },
                    "dependency": {
                        "type": "array",
                        "description": "The list of MatrixDependency objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/MatrixDependency"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".build.matrix.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Dependency",
                "description": "Represents a list of Dependency entities."
            },
            "MatrixDependency": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "$ref": "#/components/schemas/entries"
                    },
                    "build": {
                        "$ref": "#/components/schemas/build"
                    }
                },
                "x-help-article-name": "Matrix Build",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/matrix-build.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.matrix.",
                "x-is-data": true,
                "description": "Stores all combinations of Matrix Build parameter values and virtual builds that processed these combinations."
            },
            "MatrixParameterDescriptor": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "valueCount": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LabeledValue"
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".pages.matrix.",
                "x-is-data": true
            },
            "MuteLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project affected by the mutes."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Mute creation time, yyyyMMddTHHmmss+ZZZZ."
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Internal mute id."
                    },
                    "problem": {
                        "type": "string",
                        "format": "ProblemLocator",
                        "description": "Problem for which mute is assigned."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project in which mute is assigned."
                    },
                    "reporter": {
                        "type": "string",
                        "format": "UserLocator",
                        "description": "User who muted this test/problem."
                    },
                    "resolution": {
                        "type": "string",
                        "description": "Unmute condition.",
                        "enum": [
                            "manually",
                            "whenfixed",
                            "attime"
                        ]
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "test": {
                        "type": "string",
                        "format": "TestLocator",
                        "description": "test for which mute is assigned"
                    },
                    "type": {
                        "type": "string",
                        "description": "What is muted.",
                        "enum": [
                            "test",
                            "problem"
                        ]
                    },
                    "unmuteDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Automatic unmute time, yyyyMMddTHHmmss+ZZZZ."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Mute",
                "x-model-examples": [
                    "`project:<projectLocator>` - find muted problem under project found by `projectLocator`.",
                    "`type:test` - find last 100 muted tests."
                ],
                "description": "Represents a locator string for filtering Mute entities."
            },
            "ParsedTestName": {
                "type": "object",
                "properties": {
                    "testPackage": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "testSuite": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "testClass": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "testShortName": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "testNameWithoutPrefix": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "testMethodName": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "testNameWithParameters": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "description": "Represents test metadata (package, method, class, and so on)."
            },
            "Permissions": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "permission": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/permission"
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".role.",
                "x-is-data": true
            },
            "ProblemLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "build": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "currentlyFailing": {
                        "type": "boolean",
                        "description": "Is currently failing."
                    },
                    "currentlyInvestigated": {
                        "type": "boolean",
                        "description": "Is currently investigated."
                    },
                    "currentlyMuted": {
                        "type": "boolean",
                        "description": "Is currently muted."
                    },
                    "id": {
                        "type": "string",
                        "description": "Entity ID."
                    },
                    "identity": {
                        "type": "string"
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "lookupLimit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit processing to the latest `<lookupLimit>` entities."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Problem",
                "x-model-examples": [
                    "`currentlyInvestigated:true` — find last 100 build problems which are being currently investigated.",
                    "`build:<buildLocator>` — find build problems under build found by `buildLocator`."
                ],
                "description": "Represents a locator string for filtering Problem entities."
            },
            "ProblemOccurrenceLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "build": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "currentlyFailing": {
                        "type": "boolean",
                        "description": "Is currently failing."
                    },
                    "currentlyInvestigated": {
                        "type": "boolean",
                        "description": "Is currently investigated."
                    },
                    "currentlyMuted": {
                        "type": "boolean",
                        "description": "Is currently muted."
                    },
                    "identity": {
                        "type": "string"
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "lookupLimit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit processing to the latest `<lookupLimit>` entities."
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Has ever been muted."
                    },
                    "problem": {
                        "type": "string"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "ProblemOccurrence",
                "x-model-examples": [
                    "`currentlyInvestigated:true` — find last 100 build problem occurrences which are being currently investigated.",
                    "`build:<buildLocator>` — find build problem occurrences under build found by `buildLocator`."
                ],
                "description": "Represents a locator string for filtering ProblemOccurrence entities."
            },
            "ProblemScope": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/components/schemas/project"
                    },
                    "buildTypes": {
                        "$ref": "#/components/schemas/buildTypes"
                    },
                    "buildType": {
                        "$ref": "#/components/schemas/buildType"
                    }
                },
                "x-help-article-name": "Working with Build and Test Failures",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/investigating-and-muting-build-failures.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "description": "The investigation scope that allows you to identify whether the problem scope is limited to the specific configurations or an entire project."
            },
            "ProblemTarget": {
                "type": "object",
                "properties": {
                    "anyProblem": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if the investigation targets an entire build configuration and is not related to any specific issue, **false** if the issue is a build problem or a failed test."
                    },
                    "tests": {
                        "$ref": "#/components/schemas/tests"
                    },
                    "problems": {
                        "$ref": "#/components/schemas/problems"
                    }
                },
                "x-help-article-name": "Working with Build and Test Failures",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/investigating-and-muting-build-failures.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "description": "Specifies whether the issue is a build problem, a failed test, or not a specific issue at all (for configuration-wide investigations)."
            },
            "ProjectLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "archived": {
                        "type": "boolean",
                        "description": "Is archived."
                    },
                    "build": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build locator."
                    },
                    "buildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "defaultTemplate": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Default template locator."
                    },
                    "id": {
                        "type": "string"
                    },
                    "internalId": {
                        "type": "string"
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "name": {
                        "type": "string"
                    },
                    "pool": {
                        "type": "string",
                        "format": "AgentPoolLocator",
                        "description": "Associated agent pool locator."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct parent) locator."
                    },
                    "projectFeature": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project feature locator."
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "vcsRoot": {
                        "type": "string",
                        "format": "VcsRootLocator",
                        "description": "VCS root locator."
                    },
                    "virtual": {
                        "type": "boolean",
                        "description": "Is virtual (default=false)."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Project",
                "x-model-examples": [
                    "`name:MyProject` — find a project with name `MyProject`.",
                    "`archived:false` — find projects which are not archived."
                ],
                "description": "Represents a locator string for filtering Project entities."
            },
            "Resolution": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "manually",
                            "whenFixed",
                            "atTime"
                        ]
                    },
                    "time": {
                        "type": "string"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "description": "Represents an investigation resolution timestamp and details."
            },
            "Revision": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "example": "version",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The SHA revision."
                    },
                    "internalVersion": {
                        "type": "string",
                        "example": "version",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internally used revision number."
                    },
                    "vcsBranchName": {
                        "type": "string",
                        "example": "refs/heads/main",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The full name of a VCS branch where a corresponding change was authored."
                    },
                    "vcs-root-instance": {
                        "$ref": "#/components/schemas/vcs-root-instance"
                    },
                    "checkout-rules": {
                        "type": "string",
                        "example": "+:. => maven-root-repo",
                        "description": "The checkout rules of a configuration whose build processed a related change."
                    }
                },
                "x-help-article-name": "Revision",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/revision.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "description": "The VCS revision for a related change."
            },
            "Revisions": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 7,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of Revision objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "revision": {
                        "type": "array",
                        "description": "The list of Revision objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/Revision"
                        }
                    },
                    "failOnMissingRevisions": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "**true** if the build should fail when child Revision objects are missing valid `version` values; **false** if in this case a build should process latest changes."
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Revision",
                "description": "Represents a list of Revision entities."
            },
            "SnapshotDependencyLink": {
                "type": "object",
                "properties": {
                    "build": {
                        "$ref": "#/components/schemas/build"
                    },
                    "buildType": {
                        "$ref": "#/components/schemas/buildType"
                    },
                    "buildTypeBranch": {
                        "type": "string",
                        "description": "The branch of build configuration that was targeted by an upstream build."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "description": "The link to the upstream build of a chain that processed this change. If a downstream build of a chain includes a change that was already processed by an upstream build, this change's type equals `SNAPSHOT_DEPENDENCY_VCS_CHANGE` and its `snapshotDependencyLink` property stores data about this upstream build."
            },
            "StateField": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "inherited": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".project.",
                "x-is-data": true,
                "description": "Represents a project state field (as of now, limited to the read-only state of project)."
            },
            "TagLocator": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "private": {
                        "type": "string"
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Tag",
                "description": "Represents a locator string for filtering Tag entities."
            },
            "TeamCityNodeLocator": {
                "type": "object",
                "properties": {
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "role": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Node",
                "x-model-examples": [
                    "`id:node-1` - find a node with id `node-1`.",
                    "`state:<stateLocator>` - find all nodes having the given state.",
                    "`role:<role>` - finds a node with the specified role, possible values are: main_node or secondary_node."
                ],
                "description": "Represents a locator string for filtering Node entities."
            },
            "TestLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "currentlyFailing": {
                        "type": "boolean",
                        "description": "Is currently failing."
                    },
                    "currentlyInvestigated": {
                        "type": "boolean",
                        "description": "Is currently investigated."
                    },
                    "currentlyMuted": {
                        "type": "boolean",
                        "description": "Is currently muted."
                    },
                    "id": {
                        "type": "string",
                        "description": "Entity ID."
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "lookupLimit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit processing to the latest `<lookupLimit>` entities."
                    },
                    "muteAffected": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator (for finding out if this test is affected by mutes in build type)."
                    },
                    "name": {
                        "type": "string"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Test",
                "x-model-examples": [
                    "`currentlyInvestigated:true` — find last 100 tests which are being currently investigated.",
                    "`build:<buildLocator>` — find tests under build found by `buildLocator`."
                ],
                "description": "Represents a locator string for filtering Test entities."
            },
            "TestOccurrenceLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "branch": {
                        "type": "string"
                    },
                    "build": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build locator."
                    },
                    "buildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "currentlyFailing": {
                        "type": "boolean",
                        "description": "Is currently failing."
                    },
                    "currentlyInvestigated": {
                        "type": "boolean",
                        "description": "Is currently investigated."
                    },
                    "currentlyMuted": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "Entity ID."
                    },
                    "ignored": {
                        "type": "boolean",
                        "description": "Is ignored."
                    },
                    "includePersonal": {
                        "type": "boolean"
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "lookupLimit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit processing to the latest `<lookupLimit>` entities."
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Is muted."
                    },
                    "name": {
                        "type": "string"
                    },
                    "newFailure": {
                        "type": "string"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "unknown",
                            "normal",
                            "warning",
                            "failure",
                            "error",
                            "success"
                        ]
                    },
                    "test": {
                        "type": "string",
                        "format": "TestLocator",
                        "description": "Test locator."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "TestOccurrence",
                "x-model-examples": [
                    "`currentlyInvestigated:true` — find last 100 test occurrences which are being currently investigated.",
                    "`build:<buildLocator>` — find test occurrences under build found by `buildLocator`."
                ],
                "description": "Represents a locator string for filtering TestOccurrence entities."
            },
            "TriggeredBy": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "example": "user",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the following values depending on the authority that triggered this build: \n\n* *user* if the build was triggered manually in TeamCity UI or via REST API.\n* *snapshotDependency* if the build is a part of a build chain and was requested by a downstream build configuration.\n* *vcs* if the build was initiated by the VCS Trigger that found new commits in the remote repository.\n* *schedule* if the build was initiated by the Schedule Trigger.\n* *finishBuild* if the build was initiated by the Finish Build Trigger.\n* *retry* if the build was initiated by the Retry Trigger that re-starts failed builds."
                    },
                    "details": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Optional details regarding the triggering event."
                    },
                    "date": {
                        "type": "string",
                        "example": "20240515T132432+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The timestamp of the build triggering."
                    },
                    "displayText": {
                        "type": "string",
                        "example": "Snapshot dependency; Finish Build Trigger; Pet Clinic / Update Packages, build #27",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The summary displayed next to the 'Triggered' line in TeamCity UI. Enumerates authorities that caused this build to run and displays the build's parent configuration name and number."
                    },
                    "rawValue": {
                        "type": "string",
                        "example": "##buildTypeId='bt403' origin='rest' buildId='9543' type='snapshotDependency' userId='1'",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The string representation of the `properties` array."
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "build": {
                        "$ref": "#/components/schemas/build"
                    },
                    "buildType": {
                        "$ref": "#/components/schemas/buildType"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "description": "Identifies the authority that triggered this build."
            },
            "TypedValueSet": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "displayName": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "keyword": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "xml": {
                                "name": "keyword"
                            }
                        }
                    },
                    "shortDescription": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LabeledValue"
                        }
                    },
                    "description": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".project.",
                "x-is-data": true,
                "description": "Represents a named set of predefined typed values."
            },
            "UserGroupLocator": {
                "type": "object",
                "properties": {
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "Group",
                "x-model-examples": [
                    "'name:MyGroupName' – find group with name `MyGroupName`.",
                    "'key:MyGroupKey' – find group with key `MyGroupKey`."
                ],
                "description": "Represents a locator string for filtering Group entities."
            },
            "UserLocator": {
                "type": "object",
                "properties": {
                    "$singleValue": {
                        "type": "string",
                        "format": "String value",
                        "description": "Username or 'current' for current user."
                    },
                    "affectedGroup": {
                        "type": "string",
                        "format": "UserGroupLocator",
                        "description": "User group (direct or indirect parent) locator, includes the user considering group hierarchy."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "email": {
                        "type": "string",
                        "format": "String value",
                        "description": "User email."
                    },
                    "group": {
                        "type": "string",
                        "format": "UserGroupLocator",
                        "description": "User group (direct parent) locator, includes the user directly."
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User id."
                    },
                    "lastLogin": {
                        "type": "string",
                        "format": "date-time",
                        "description": "User's last login time formatted as 'yyyyMMddTHHmmss+ZZZZ'"
                    },
                    "name": {
                        "type": "string",
                        "format": "ValueCondition",
                        "description": "User's display name"
                    },
                    "property": {
                        "type": "string",
                        "format": "`property:(name:<name>,value:<value>,matchType:<matchType>)` where `matchType` is one of: [exists,not-exists,equals,does-not-equal,starts-with,contains,does-not-contain,ends-with,any,matches,does-not-match,more-than,no-more-than,less-than,no-less-than,ver-more-than,ver-no-more-than,ver-less-than,ver-no-less-than]"
                    },
                    "role": {
                        "type": "string",
                        "format": "RoleLocator",
                        "description": "User's role"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "username": {
                        "type": "string",
                        "format": "String value",
                        "description": "Username of a user."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "User",
                "x-model-examples": [
                    "`name:John Smith` — find user with name `John Smith`.",
                    "`group:<groupLocator>` — find all users in user group found by `groupLocator`."
                ],
                "description": "Represents a locator string for filtering User entities."
            },
            "VcsCheckStatus": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "finished",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The status of the changes check.\n\n* **finished** — the check for changes is complete, no new check is scheduled.\n* **scheduled** — the new check for changes is scheduled.\n* **started** — a check for changes is currently in progress."
                    },
                    "requestorType": {
                        "type": "string",
                        "example": "schedule",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The authority that issued a check for changes request. \n\n* **schedule** — a check for changes is initiated by the TeamCity server, as a part of default repository polling mechanism.\n* **build** — a default check for changes that preceds any new build starting.\n* **user** — a TeamCity user clicked the configuration's 'Check for pending changes' action in TeamCity UI.\n* **commit_hook** — a check for changes was triggered by a [post-commit webhook](https://www.jetbrains.com/help/teamcity/configuring-vcs-post-commit-hooks-for-teamcity.html)."
                    },
                    "timestamp": {
                        "type": "string",
                        "example": "20250414T130222+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The time of the latest check entry."
                    }
                },
                "x-help-article-name": "VCS Root",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-roots.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "xml": {
                    "name": "VcsCheckStatus"
                },
                "description": "Stores information on the last known remote repository check for new changes."
            },
            "VcsRootInstanceLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "build": {
                        "type": "string",
                        "format": "BuildLocator",
                        "description": "Build locator."
                    },
                    "buildType": {
                        "type": "string",
                        "format": "BuildTypeLocator",
                        "description": "Build type locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "string",
                        "description": "Entity ID."
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "lookupLimit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit processing to the latest `<lookupLimit>` entities."
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct parent) locator."
                    },
                    "property": {
                        "type": "string",
                        "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                        "enum": [
                            "exists",
                            "not-exists",
                            "equals",
                            "does-not-equal",
                            "starts-with",
                            "contains",
                            "does-not-contain",
                            "ends-with",
                            "any",
                            "matches",
                            "does-not-match",
                            "more-than",
                            "no-more-than",
                            "less-than",
                            "no-less-than",
                            "ver-more-than",
                            "ver-no-more-than",
                            "ver-less-than",
                            "ver-no-less-than"
                        ]
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of VCS (e.g. jetbrains.git)."
                    },
                    "vcsRoot": {
                        "type": "string",
                        "format": "VcsRootLocator",
                        "description": "VCS root locator."
                    },
                    "versionedSettings": {
                        "type": "boolean",
                        "description": "Is used for versioned settings."
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "VcsRootInstance",
                "x-model-examples": [
                    "`vcsRoot:<vcsRootLocator>` — find all VCS root instances of a VCS root found by `vcsRootLocator`.",
                    "`project:<projectLocator>` — find all VCS root instances defined under project found by `projectLocator`."
                ],
                "description": "Represents a locator string for filtering VcsRootInstance entities."
            },
            "VcsRootLocator": {
                "type": "object",
                "properties": {
                    "affectedProject": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct or indirect parent) locator."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, how many entities to return per page."
                    },
                    "id": {
                        "type": "string",
                        "description": "Entity ID."
                    },
                    "internalId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "item": {
                        "type": "string",
                        "format": "item:(<locator1>),item:(<locator2>...)",
                        "description": "Supply multiple locators and return a union of the results."
                    },
                    "lookupLimit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit processing to the latest `<lookupLimit>` entities."
                    },
                    "name": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string",
                        "format": "ProjectLocator",
                        "description": "Project (direct parent) locator."
                    },
                    "property": {
                        "type": "string",
                        "format": "property:(name:<name>,value:<value>,matchType:<matchType>)",
                        "enum": [
                            "exists",
                            "not-exists",
                            "equals",
                            "does-not-equal",
                            "starts-with",
                            "contains",
                            "does-not-contain",
                            "ends-with",
                            "any",
                            "matches",
                            "does-not-match",
                            "more-than",
                            "no-more-than",
                            "less-than",
                            "no-less-than",
                            "ver-more-than",
                            "ver-no-more-than",
                            "ver-less-than",
                            "ver-no-less-than"
                        ]
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For paginated calls, from which entity to start rendering the page."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of VCS (e.g. jetbrains.git)."
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "x-object-type": "LocatorEntity",
                "x-is-locator": true,
                "x-subpackage": "locator",
                "x-base-entity": "VcsRoot",
                "x-model-examples": [
                    "`type:jetbrains.git` — find all `Git`-typed VCS roots.",
                    "`project:<projectLocator>` — find all VCS roots defined under project found by `projectLocator`."
                ],
                "description": "Represents a locator string for filtering VcsRoot entities."
            },
            "agent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32",
                        "example": 771,
                        "xml": {
                            "attribute": true
                        },
                        "description": "An integer value that is the unique agent identificator."
                    },
                    "name": {
                        "type": "string",
                        "example": "Ubuntu-22.04-Large-i-045902939eae4af1a",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public agent name. Cloud agent names are typically formed by appending the unique instance name to the parent cloud profile name."
                    },
                    "typeId": {
                        "type": "integer",
                        "format": "int32",
                        "example": 661,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the unique ID of the agent category. Local standalone have unique type IDs whereas cloud agents spawned from the same cloud image have the same type ID."
                    },
                    "connected": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the agent is connected to the TeamCity server; otherwise, *false*. Connected agents are those that can communicate with the TeamCity server."
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the agent is enabled; otherwise, *false*. Enabled agents are those that are ready to process new bulds.\n\nSend `PUT` requests to the [`/app/rest/agents/{agentLocator}/enabledInfo`](https://www.jetbrains.com/help/teamcity/rest/agentapi.html#setEnabledInfo) endpoint to manually enable or disable agents."
                    },
                    "authorized": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the agent is authorized on the server; otherwise, *false*. Authorized agents are those that are granted permission to execute building tasks on this TeamCity server.\n\nSend `PUT` requests to the [`/app/rest/agents/{agentLocator}/authorizedInfo`](https://www.jetbrains.com/help/teamcity/rest/agentapi.html#setAuthorizedInfo) endpoint to manually authorize or unauthorize agents."
                    },
                    "uptodate": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if both `outdated` and `pluginsOutdated` properties return *false*; *false* if any of these properties returns *true*."
                    },
                    "outdated": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* for outdated agents that require an update; *false* for agents that are up to date. Agents typically update their software automatically and do not require any actions from your side."
                    },
                    "pluginsOutdated": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *false* if all plugins installed on this agent are of the latest version; *true* if some of plugins are outdated. Plugins installed from the JetBrains Marketplace are typically updated automatically."
                    },
                    "javaOutdated": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* the Java version installed on the agent machine is outdated; otherwise, *false*."
                    },
                    "ip": {
                        "type": "string",
                        "example": "52.211.39.100",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The IP address of the agent machine."
                    },
                    "protocol": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the agent-server communication protocol type:\n\n* *unidirectional* — the default one-way communication protocol. Unidirectional agents establish an HTTP(S) connection to the TeamCity server, and periodically poll it for server commands.\n* *bidirectional* — [no longer supported](https://www.jetbrains.com/help/teamcity/upgrade-notes.html#Canceled+bidirectional+agent-server+communication+protocol) in TeamCity 2021.2 and newer.",
                        "enum": [
                            "unidirectional",
                            "bidirectional"
                        ]
                    },
                    "version": {
                        "type": "string",
                        "example": "156364",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The actual version of the agent software or 'unknown' if the agent is disconnected. If this version differs from the version expected by the server (the `currentAgentVersion` property), the agent is considered outdated."
                    },
                    "currentAgentVersion": {
                        "type": "string",
                        "example": "160569",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The version of the agent software that is expected by the current TeamCity server. Matches the build number of this server (can be obtained from the `/app/rest/server/build` endpoint)."
                    },
                    "lastActivityTime": {
                        "type": "string",
                        "example": "20240816T151123+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The timestamp of the last comminication between this agent and the TeamCity server.\n\nTo get the last time this agent performed an activity different from periodic server polling (for example, ran a build), use the `idleSinceTime` property instead."
                    },
                    "idleSinceTime": {
                        "type": "string",
                        "example": "20240816T150655+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The timestamp of the last meaningful agent activity (for example, running a build). For agents that never ran a build after they were authorized by the server, this timestamp is typically equal to the `registrationTimestamp` property value."
                    },
                    "disconnectionComment": {
                        "type": "string",
                        "example": "Unregistered because of inactivity",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The summary that explains why this agent was disconnected. Returns `null` for connected agents."
                    },
                    "registrationTimestamp": {
                        "type": "string",
                        "example": "20240816T150655+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The timestamp of the first successful agent authorization on this server."
                    },
                    "host": {
                        "type": "string",
                        "example": "ip-52-211-39-10.eu-west-1.compute.internal, localhost",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The name of the agent machine host."
                    },
                    "cpuRank": {
                        "type": "integer",
                        "format": "int32",
                        "example": 396,
                        "xml": {
                            "attribute": true
                        },
                        "description": "An integer value that is the [benchmarking score](https://www.jetbrains.com/help/teamcity/viewing-build-agent-details.html#Agent+Summary) of the agent machine's CPU."
                    },
                    "port": {
                        "type": "integer",
                        "format": "int32",
                        "example": 9090,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The port used by the TeamCity server to connect to the agent."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/agents/id:771",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current agent. To obtain the full URL, use the *webUrl* property instead.",
                        "x-defined-in-base": true
                    },
                    "webUrl": {
                        "type": "string",
                        "example": "https://example.com/agentDetails.html?id=771&agentTypeId=11389&realAgentName=db-win-2003",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the full web link to access this agent. To get a shortened link without the server URL, read the *href* property instead."
                    },
                    "build": {
                        "$ref": "#/components/schemas/build"
                    },
                    "links": {
                        "$ref": "#/components/schemas/links"
                    },
                    "enabledInfo": {
                        "$ref": "#/components/schemas/enabledInfo"
                    },
                    "authorizedInfo": {
                        "$ref": "#/components/schemas/authorizedInfo"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "cloudInstance": {
                        "$ref": "#/components/schemas/cloudInstance"
                    },
                    "cloudImage": {
                        "$ref": "#/components/schemas/cloudImage"
                    },
                    "environment": {
                        "$ref": "#/components/schemas/environment"
                    },
                    "pool": {
                        "$ref": "#/components/schemas/agentPool"
                    },
                    "compatibilityPolicy": {
                        "$ref": "#/components/schemas/compatibilityPolicy"
                    },
                    "compatibleBuildTypes": {
                        "$ref": "#/components/schemas/buildTypes"
                    },
                    "incompatibleBuildTypes": {
                        "$ref": "#/components/schemas/compatibilities"
                    },
                    "builds": {
                        "$ref": "#/components/schemas/builds"
                    },
                    "removed": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the agent was removed after a long period of inactivity; otherwise, *false*."
                    },
                    "locator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Build Agent",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-agent.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "agent"
                },
                "description": "Represents a known agent instance."
            },
            "agent-requirement": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "TRIGGER_71",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only ID of the object. This property is inherited from the base PropEntity class."
                    },
                    "name": {
                        "type": "string",
                        "example": "Py: Merge reports",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public object name. Some objects, like build steps, support public names, while others, like build triggers, do not. This property is inherited from the base PropEntity class."
                    },
                    "type": {
                        "type": "string",
                        "example": "simpleRunner, commit-status-publisher, vcsTrigger",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The object type. This property is inherited from the base PropEntity class."
                    },
                    "disabled": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is disabled and inactive; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "inherited": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is inherited from another object; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current object. This property is inherited from the base PropEntity class.",
                        "x-defined-in-base": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    }
                },
                "x-help-article-name": "Agent Requirements",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-agent-requirements.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "agent-requirement"
                },
                "description": "A build configuration's (or template's) requirement for agent parameters. Non-compliant agents cannot run builds spawned by the configuration."
            },
            "agent-requirements": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of `agent-requirement` objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "agent-requirement": {
                        "type": "array",
                        "description": "The list of `agent-requirement` objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/agent-requirement"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "AgentRequirement",
                "xml": {
                    "name": "agent-requirements"
                },
                "description": "Represents a list of AgentRequirement entities."
            },
            "agentPool": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32",
                        "example": 31,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The unique ID of this pool. The Default pool has the ID value of *0*."
                    },
                    "name": {
                        "type": "string",
                        "example": "Kubernetes",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public name of the pool."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/agentPools/id:82",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current pool.",
                        "x-defined-in-base": true
                    },
                    "maxAgents": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The pool capacity. Returns *null* for pools with the unlimited number of agent slots."
                    },
                    "ownerProject": {
                        "$ref": "#/components/schemas/project"
                    },
                    "projects": {
                        "$ref": "#/components/schemas/projects"
                    },
                    "agents": {
                        "$ref": "#/components/schemas/agents"
                    },
                    "locator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "agentTypes": {
                        "$ref": "#/components/schemas/agentTypes"
                    }
                },
                "x-help-article-name": "Agent Pool",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/agent-pool.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "agentPool"
                },
                "description": "An agent pool that is the group of agents with shared permissions and available projects."
            },
            "agentPools": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 7,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of AgentPool objects in this list.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/agentPools",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/agentPools?locator=count:200,start:250",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/agentPools?locator=count:50,start:0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "agentPool": {
                        "type": "array",
                        "description": "The list of AgentPools owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/agentPool"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "AgentPool",
                "xml": {
                    "name": "agentPools"
                },
                "description": "Represents a paginated list of AgentPool entities."
            },
            "agentType": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Ubuntu-22.04-Large (ami-0123456ab78c9de0)",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The name of a local agent or a cloud image that belongs to this type."
                    },
                    "id": {
                        "type": "integer",
                        "format": "int32",
                        "example": 283,
                        "xml": {
                            "attribute": true
                        },
                        "description": "An integer value that is the unique agent identificator."
                    },
                    "isCloud": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if this type identifies agents spawned from a cloud image; *false* if this type identifies a local stand-alone agent."
                    },
                    "buildParameters": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "configurationParameters": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "availableParameters": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "systemParameters": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "environmentParameters": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "environment": {
                        "$ref": "#/components/schemas/environment"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "agentType"
                },
                "description": "The agent type that describes common properties shared by all agents of this type. Stand-alone local agents are the only representatives of their corresponding types, whereas cloud agents spawned from the same cloud image belong to the same type."
            },
            "agentTypes": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of AgentType objects in this list.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/agentTypes?locator=count:200,start:250",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/agentTypes?locator=count:50,start:0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/agentTypes",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    },
                    "agentType": {
                        "type": "array",
                        "description": "The list of AgentTypes owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/agentType"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "AgentType",
                "xml": {
                    "name": "agentTypes"
                },
                "description": "Represents a paginated list of AgentType entities."
            },
            "agents": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 7,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of Agent objects in this list.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/agents?locator=count:200,start:250",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/agents?locator=count:50,start:0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/agents",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    },
                    "agent": {
                        "type": "array",
                        "description": "The list of Agents owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/agent"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "Agent",
                "xml": {
                    "name": "agents"
                },
                "description": "Represents a paginated list of Agent entities."
            },
            "approvableBuild": {
                "type": "object",
                "properties": {
                    "buildId": {
                        "type": "string",
                        "example": "124",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The ID of a build that requires manual approval."
                    },
                    "buildTypeId": {
                        "type": "string",
                        "example": "Deployments_Deploy_to_global",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The ID of a build configuration that spawned this approvable build."
                    },
                    "buildTypeName": {
                        "type": "string",
                        "example": "Deploy to global",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The name of a build configuration that spawned this approvable build."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.approval.",
                "x-is-data": true,
                "xml": {
                    "name": "approvableBuild"
                },
                "description": "A build that cannot start until explicitly approved by designated team members. See the [Build approval](https://www.jetbrains.com/help/teamcity/build-approval.html) build feature and [Untrusted Builds](https://www.jetbrains.com/help/teamcity/untrusted-builds.html) project settings for more information.\nSend a `POST` request to the `/app/rest/buildQueue/{buildLocator}/approve` endpoint to manually approve a build."
            },
            "approvalInfo": {
                "type": "object",
                "properties": {
                    "canBeApprovedByCurrentUser": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the currently authorized user is among TeamCity users who can approve this build; otherwise, *false*."
                    },
                    "configurationValid": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the configuration of users and user groups that should approve this build is valid; otherwise, *false*."
                    },
                    "userApprovals": {
                        "$ref": "#/components/schemas/userApprovals"
                    },
                    "groupApprovals": {
                        "$ref": "#/components/schemas/groupApprovals"
                    },
                    "compositeApprovals": {
                        "$ref": "#/components/schemas/compositeApprovals"
                    },
                    "approvalReasons": {
                        "type": "array",
                        "description": "Returns the reasons why TeamCity is waiting for build approval.",
                        "items": {
                            "$ref": "#/components/schemas/approvableBuild"
                        }
                    },
                    "buildChainBuilds": {
                        "type": "array",
                        "description": "The list of other builds (both upstream and downstream) that belong to the same build chain and require an approval.",
                        "items": {
                            "$ref": "#/components/schemas/buildsWithReason"
                        }
                    },
                    "timeoutTimestamp": {
                        "type": "string",
                        "example": "20250401T172235+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The timestamp when the build is (or was) canceled due to reviewers failing to approve it on time. This value is calculated at the moment a build is queued."
                    },
                    "status": {
                        "type": "string",
                        "example": "waitingForApproval",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current build status. Supported values:\n\n* *waitingForApproval* — the build is waiting in a build queue;\n* *approved* — the build received a required number of approvals from reviewers;\n* *timedOut* — the build was automatically canceled as the reviewer(s) failed to approve it within the given time;\n* *canceled* — reviewer(s) explicitly canceled the build.",
                        "enum": [
                            "waitingForApproval",
                            "approved",
                            "timedOut",
                            "canceled"
                        ]
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.approval.",
                "x-is-data": true,
                "xml": {
                    "name": "approvalInfo"
                },
                "description": "If a build cannot start without a manual approval from specific reviewers, it stores related information in a related ApprovalInfo object."
            },
            "artifact-dependencies": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of `artifact_dependency` objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "artifact-dependency": {
                        "type": "array",
                        "description": "The list of `artifact_dependency` objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/artifact-dependency"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "ArtifactDependency",
                "xml": {
                    "name": "artifact-dependencies"
                },
                "description": "Represents a list of ArtifactDependency entities."
            },
            "artifact-dependency": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "TRIGGER_71",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only ID of the object. This property is inherited from the base PropEntity class."
                    },
                    "name": {
                        "type": "string",
                        "example": "Py: Merge reports",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public object name. Some objects, like build steps, support public names, while others, like build triggers, do not. This property is inherited from the base PropEntity class."
                    },
                    "type": {
                        "type": "string",
                        "example": "simpleRunner, commit-status-publisher, vcsTrigger",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The object type. This property is inherited from the base PropEntity class."
                    },
                    "disabled": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is disabled and inactive; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "inherited": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is inherited from another object; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current object. This property is inherited from the base PropEntity class.",
                        "x-defined-in-base": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "source-buildType": {
                        "$ref": "#/components/schemas/buildType"
                    }
                },
                "x-help-article-name": "Artifact Dependencies",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/artifact-dependencies.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "artifact-dependency"
                },
                "description": "An artifact dependency that defines rules for passing artifacts from an upstream build configuration to a target downstream configuration."
            },
            "auditAction": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "build_type_edit_settings",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The type of the action. See [AuditLocator](auditLocator.md) for the list of supported values."
                    },
                    "id": {
                        "type": "string",
                        "example": "54",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The automatically generated unique ID of the action."
                    },
                    "pattern": {
                        "type": "string",
                        "example": "#{0} build configuration settings were edited (#{1}).",
                        "description": "The description of the audit action displayed in TeamCity UI.Includes placeholders for the name of the affected entity (for example, a build configuration whose settings were edited), username of a person who performed the action, link that opens the corresponding changes diff, and so on."
                    }
                },
                "x-help-article-name": "Audit",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/tracking-user-actions.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".audit.",
                "x-is-data": true,
                "xml": {
                    "name": "auditAction"
                },
                "description": "Contains details about a user action tracked by a corresponding [AuditEvent](auditEvent.md)."
            },
            "auditEvent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "94",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The automatically generated unique ID of the event."
                    },
                    "timestamp": {
                        "type": "string",
                        "example": "20250326T163632+0100",
                        "description": "The time of the logged event."
                    },
                    "comment": {
                        "type": "string",
                        "example": "runners of 'Retrieve Issues' build configuration were updated",
                        "description": "The event summary that briefly explains its essence. Certain events (such as starting a build) have no comment attached."
                    },
                    "action": {
                        "$ref": "#/components/schemas/auditAction"
                    },
                    "relatedEntities": {
                        "$ref": "#/components/schemas/relatedEntities"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    }
                },
                "x-help-article-name": "Audit",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/tracking-user-actions.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".audit.",
                "x-is-data": true,
                "xml": {
                    "name": "auditEvent"
                },
                "description": "An audit event that stores information about all meaningful actions performed by every TeamCity user."
            },
            "auditEvents": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 12,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of AuditEvent objects in this list.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/audit?locator=count:200,start:250,user:(id:1)",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/audit?locator=count:50,start:0,user:(id:1)",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/audit?locator=user(id:1),count:200,start:50",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    },
                    "auditEvent": {
                        "type": "array",
                        "description": "The list of audit events owned by this collection that satisfy the given locator.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/auditEvent"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".audit.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "AuditEvent",
                "xml": {
                    "name": "auditEvents"
                },
                "description": "Represents a paginated list of AuditEvent entities."
            },
            "authorizationTokensRequirements": {
                "type": "object",
                "properties": {
                    "timeToLiveSeconds": {
                        "type": "integer",
                        "format": "int32",
                        "example": 86400,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Tokens lifetime in seconds."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Number of tokens to generate."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "authorizationTokensRequirements"
                },
                "description": "Represents requirements for the list of authorization tokens to be generated."
            },
            "authorizedInfo": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the current object state is enabled (for example, pinned for build `PinInfo` or authorized for agent `AuthorizedInfo`; otherwise, *false*."
                    },
                    "comment": {
                        "$ref": "#/components/schemas/comment"
                    }
                },
                "x-help-article-name": "Build Agent",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-agent.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "authorizedInfo"
                },
                "description": "Contains information about agent authorization state. Send AuthorizedInfo objects to the [`/app/rest/agents/{agentLocator}/authorizedInfo`](https://www.jetbrains.com/help/teamcity/rest/agentapi.html#setAuthorizedInfo) endpoint via `PUT` requests to manually authorize and unauthorize agents."
            },
            "branch": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "main",
                        "xml": {
                            "attribute": true
                        },
                        "description": "A public branch name displayed in TeamCity UI. To get a full VCS name instead (for example, 'refs/heads/main'), read the *vcsBranchName* property of a nested Revision entity."
                    },
                    "internalName": {
                        "type": "string",
                        "example": "&lt;default&gt;",
                        "xml": {
                            "attribute": true
                        },
                        "description": "An internal branch name. Returns `<default>` for default branches, and real branch names for other (non-default) branches."
                    },
                    "default": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if this branch is the default branch of this build configuration; otherwise, **false**. When obtaining builds of the specific BuildType, add the *branch(default:any)* locator to get builds from all existing branches."
                    },
                    "unspecified": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** for unspecified branches; otherwise, **false**. A branch is labeled as unspecified when TeamCity fails to find a branch for this build. Such branches have a predefined '<unspecified>' name."
                    },
                    "active": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** for active branches and **false** for inactive ones. A branch is considered inactive if it had neither new TeamCity builds in the last 24 hours, nor recent VCS repository changes in the last 7 days. Learn more: [Active branches](https://www.jetbrains.com/help/teamcity/working-with-feature-branches.html#Active+Branches)."
                    },
                    "lastActivity": {
                        "type": "string",
                        "example": "20240426T123848+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the date and time of the last branch activity (the last TeamCity build or the latest VCS commit)."
                    },
                    "groupFlag": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if the branch belongs to the automatically created 'My Branches' group; otherwise, **false**. Branch grouping allows TeamCity to automatically categorize branches based on current TeamCity user commits."
                    },
                    "builds": {
                        "$ref": "#/components/schemas/builds"
                    }
                },
                "x-help-article-name": "Feature Branches",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/working-with-feature-branches.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "xml": {
                    "name": "branch"
                },
                "description": "Represents a branch of the remote repository that stores sources processed by this build."
            },
            "branchVersion": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "example": "c1046c4fa016a774253fb3b93e6cc8bd12c159e5",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The full revision SHA. Points to the latest commit in this branch."
                    },
                    "name": {
                        "type": "string",
                        "example": "main",
                        "xml": {
                            "attribute": true
                        },
                        "description": "A public branch name displayed in TeamCity UI. To get a full VCS name instead (for example, 'refs/heads/main'), read the *vcsBranchName* property of a nested Revision entity."
                    },
                    "default": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if this branch is the default branch of this build configuration; otherwise, **false**. When obtaining builds of the specific BuildType, add the *branch(default:any)* locator to get builds from all existing branches."
                    },
                    "active": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** for active branches and **false** for inactive ones. A branch is considered inactive if it had neither new TeamCity builds in the last 24 hours, nor recent VCS repository changes in the last 7 days. Learn more: [Active branches](https://www.jetbrains.com/help/teamcity/working-with-feature-branches.html#Active+Branches)."
                    },
                    "internalName": {
                        "type": "string",
                        "example": "&lt;default&gt;",
                        "xml": {
                            "attribute": true
                        },
                        "description": "An internal branch name. Returns `<default>` for default branches, and real branch names for other (non-default) branches."
                    },
                    "unspecified": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** for unspecified branches; otherwise, **false**. A branch is labeled as unspecified when TeamCity fails to find a branch for this build. Such branches have a predefined '<unspecified>' name."
                    },
                    "groupFlag": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if the branch belongs to the automatically created 'My Branches' group; otherwise, **false**. Branch grouping allows TeamCity to automatically categorize branches based on current TeamCity user commits."
                    },
                    "builds": {
                        "$ref": "#/components/schemas/builds"
                    },
                    "lastActivity": {
                        "type": "string",
                        "example": "20240426T123848+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the date and time of the last branch activity (the last TeamCity build or the latest VCS commit)."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "xml": {
                    "name": "branchVersion"
                },
                "description": "An object that describes the actual state of a repository branch. Inherits the majority of its properties from the base Branch class."
            },
            "branches": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 4,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of Branch objects in this list.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/buildTypes/MyProject_MyBuildConfig/branches",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    },
                    "branch": {
                        "type": "array",
                        "description": "The list of branches owned by this collection that satisfy the given locator.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/branch"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Branch",
                "xml": {
                    "name": "branches"
                },
                "description": "Represents a list of Branch entities."
            },
            "build": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 8134,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The automatically generated unique ID of the build."
                    },
                    "taskId": {
                        "type": "integer",
                        "format": "int64",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "buildTypeId": {
                        "type": "string",
                        "example": "ProjectName_BuildConfName",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the ID of the corresponding build configuration. To obtain this configuration itself, use the *buildType* property instead."
                    },
                    "buildTypeInternalId": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "This property supports the internal infrastructure and is not intented to be used. Use the *buildTypeId* property instead to access the regular build configuration ID."
                    },
                    "number": {
                        "type": "string",
                        "example": "54",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns a public build number this build is assigned in its build configuration, *null* if a build is still queued, or *N/A* if a queued build was canceled before it started."
                    },
                    "status": {
                        "type": "string",
                        "example": "SUCCESS",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns whether a build has finished successfully (or is expected to finish so, if still running). Possible values: \n\n* *null* for queued builds. \n* *SUCCESS* for builds that have successfully finished or still running without errors. \n* *FAILURE* for builds that failed to start or failed during their run. \n* *UNKNOWN* for canceled builds."
                    },
                    "state": {
                        "type": "string",
                        "example": "queued",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the actual stage of the build's lifecycle: queued, running, or finished.",
                        "enum": [
                            "queued",
                            "finished",
                            "running",
                            "deleted",
                            "unknown"
                        ]
                    },
                    "running": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the build is currently running; otherwise, *false*."
                    },
                    "composite": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if this is build is composite; otherwise, *false*.Composite builds aggregate results of multiple child builds. These builds can belong to [composite build configurations](https://www.jetbrains.com/help/teamcity/composite-build-configuration.html) or can be spawned automatically (for example, to aggregate results of parallel tests)."
                    },
                    "failedToStart": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if this build was automatically removed from the building queue (for example, if an error occured or the appointed reviewers failed to [approve the build](https://www.jetbrains.com/help/teamcity/cloud/build-approval.html) in time); otherwise, *false*.Does not return *true* for manually cancelled builds"
                    },
                    "personal": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* for [personal builds](https://www.jetbrains.com/help/teamcity/personal-build.html) and *false* for regular builds."
                    },
                    "percentageComplete": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "description": "This property is deprecated, see *running-info* property instead."
                    },
                    "branchName": {
                        "type": "string",
                        "example": "sandbox",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the name of the repository branch whose changes are processed in the current build. This property returns the [logical branch name](https://www.jetbrains.com/help/teamcity/working-with-feature-branches.html#Logical+Branch+Name) (*main*), not a fully specified VCS branch name (*refs/heads/main*)."
                    },
                    "defaultBranch": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the current build processes changes from the branch specified as default branch in VCS root settings; otherwise, *false*."
                    },
                    "unspecifiedBranch": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the branch name equals `&lt;unspecified&gt;`; otherwise, *false*. A branch can have this name if TeamCity fails to retrieve a valid branch name."
                    },
                    "history": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* for [history builds](https://www.jetbrains.com/help/teamcity/history-build.html) that started after a build with most recent code changes; otherwise, *false*."
                    },
                    "pinned": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the build is currently [pinned](https://www.jetbrains.com/help/teamcity/build-actions.html#Pin+Build); otherwise, *false*.Send GET and PUT requests to `/app/rest/builds/<build-locator>/pinInfo` to get the detailed information about pinned builds and manually pin/unpin these builds."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/builds/id:8006",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current build. To obtain the full URL, use the *webUrl* property instead.",
                        "x-defined-in-base": true
                    },
                    "webUrl": {
                        "type": "string",
                        "example": "https://example.com/app/rest/builds/id:8006",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the full web link to access this build. To get a link without the server URL, read the *href* property instead."
                    },
                    "queuePosition": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the build's position in the building queue."
                    },
                    "limitedChangesCount": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the number of changes processed in this build."
                    },
                    "artifactsDirectory": {
                        "type": "string",
                        "example": "/Users/John.Doe/.BuildServer/system/artifacts/ProjectName/ConfigName/1337",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the path to the built-in artifact storage."
                    },
                    "links": {
                        "$ref": "#/components/schemas/links"
                    },
                    "statusText": {
                        "type": "string",
                        "example": "Tests passed: 5, muted: 1",
                        "description": "Returns the additional information about the finished or running build. Returns nothing if a build is still queued, read the *waitReason* property instead to get the current status of a queued build.In TeamCity UI, this string is displayed next to the build status icon (\"Canceled\", \"Step 3/7\", \"Error while applying patch\", and so on)."
                    },
                    "buildType": {
                        "$ref": "#/components/schemas/buildType"
                    },
                    "comment": {
                        "$ref": "#/components/schemas/comment"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/tags"
                    },
                    "pinInfo": {
                        "$ref": "#/components/schemas/comment"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "startEstimate": {
                        "type": "string",
                        "example": "20240409T155123+0200",
                        "description": "If this build is still queued, this property returns the estimated time (UTC) of an actual build start."
                    },
                    "waitReason": {
                        "type": "string",
                        "example": "There are no idle compatible agents which can run this build",
                        "description": "Returns the actual reason why this build remains in build queue. This property returns the most recent wait reason from the *queuedWaitReasons* array."
                    },
                    "finishEstimate": {
                        "type": "string",
                        "example": "20240409T160130+0200",
                        "description": "Returns the estimated time this build will finish. Returns a value only for queued builds and *null* for those that already run."
                    },
                    "delayedByBuild": {
                        "$ref": "#/components/schemas/build"
                    },
                    "plannedAgent": {
                        "$ref": "#/components/schemas/agent"
                    },
                    "approvalInfo": {
                        "$ref": "#/components/schemas/approvalInfo"
                    },
                    "running-info": {
                        "$ref": "#/components/schemas/progress-info"
                    },
                    "canceledInfo": {
                        "$ref": "#/components/schemas/comment"
                    },
                    "queuedDate": {
                        "type": "string",
                        "example": "20240408T162059+0200",
                        "description": "Returns the date and time (UTC) when this build was queued. Note that the moment this build actually starts is stored in the different property (*startDate*).."
                    },
                    "startDate": {
                        "type": "string",
                        "example": "20240408T162559+0200",
                        "description": "Returns the date and time (UTC) of the moment the build actually started. Note that the moment a build was triggered is stored in the *queuedDate* property."
                    },
                    "finishDate": {
                        "type": "string",
                        "example": "20240408T162702+0200",
                        "description": "Returns the date and time of the moment the build was removed from the queue (finished, failed, or was canceled). The value is in UTC and corresponds to the server timezone."
                    },
                    "triggered": {
                        "$ref": "#/components/schemas/TriggeredBy"
                    },
                    "lastChanges": {
                        "$ref": "#/components/schemas/changes"
                    },
                    "changes": {
                        "$ref": "#/components/schemas/changes"
                    },
                    "revisions": {
                        "$ref": "#/components/schemas/Revisions"
                    },
                    "versionedSettingsRevision": {
                        "$ref": "#/components/schemas/Revision"
                    },
                    "artifactDependencyChanges": {
                        "$ref": "#/components/schemas/buildChanges"
                    },
                    "agent": {
                        "$ref": "#/components/schemas/agent"
                    },
                    "compatibleAgents": {
                        "$ref": "#/components/schemas/agents"
                    },
                    "compatibleCloudImages": {
                        "$ref": "#/components/schemas/cloudImages"
                    },
                    "testOccurrences": {
                        "$ref": "#/components/schemas/testOccurrences"
                    },
                    "problemOccurrences": {
                        "$ref": "#/components/schemas/problemOccurrences"
                    },
                    "artifacts": {
                        "$ref": "#/components/schemas/files"
                    },
                    "relatedIssues": {
                        "$ref": "#/components/schemas/issuesUsages"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "resultingProperties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "originalProperties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "startProperties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/entries"
                    },
                    "statistics": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/datas"
                    },
                    "snapshot-dependencies": {
                        "$ref": "#/components/schemas/builds"
                    },
                    "artifact-dependencies": {
                        "$ref": "#/components/schemas/builds"
                    },
                    "custom-artifact-dependencies": {
                        "$ref": "#/components/schemas/artifact-dependencies"
                    },
                    "settingsHash": {
                        "type": "string"
                    },
                    "currentSettingsHash": {
                        "type": "string"
                    },
                    "modificationId": {
                        "type": "string"
                    },
                    "chainModificationId": {
                        "type": "string"
                    },
                    "replacementIds": {
                        "$ref": "#/components/schemas/items"
                    },
                    "related": {
                        "$ref": "#/components/schemas/related"
                    },
                    "triggeringOptions": {
                        "$ref": "#/components/schemas/buildTriggeringOptions"
                    },
                    "usedByOtherBuilds": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if at least one dependent build has [reused this build](https://www.jetbrains.com/help/teamcity/snapshot-dependencies.html#Suitable+Builds) instead of triggering a new one."
                    },
                    "statusChangeComment": {
                        "$ref": "#/components/schemas/comment"
                    },
                    "vcsLabels": {
                        "type": "array",
                        "description": "Returns a list of [labels](https://www.jetbrains.com/help/teamcity/vcs-labeling.html) that tag sources of this particular build.",
                        "items": {
                            "$ref": "#/components/schemas/vcsLabel"
                        }
                    },
                    "detachedFromAgent": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true*, if running build no longer [occupies a build agent](https://www.jetbrains.com/help/teamcity/detaching-build-from-agent.html); otherwise, *false*."
                    },
                    "finishOnAgentDate": {
                        "type": "string",
                        "example": "20240408T162702+0200",
                        "description": "Similar to the *finishDate* property, but adjusts the date and time according to the agent timezone."
                    },
                    "customized": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the build is running with non-default parameter, dependency, and (or) changes settings (for example, reuses the manually selected build or targets the specific changes revision instead of building latest changes); otherwise, *false*."
                    },
                    "customization": {
                        "$ref": "#/components/schemas/customizations"
                    },
                    "changesCollectingInProgress": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the build is currently collecting changes from a remote repository; otherwise, *false*."
                    },
                    "queuedWaitReasons": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "downloadedArtifacts": {
                        "$ref": "#/components/schemas/downloadedArtifacts"
                    },
                    "matrixConfiguration": {
                        "$ref": "#/components/schemas/MatrixConfiguration"
                    },
                    "firstBuildWithSameChanges": {
                        "$ref": "#/components/schemas/build"
                    },
                    "executor": {
                        "$ref": "#/components/schemas/BuildExecutor"
                    },
                    "locator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "xml": {
                    "name": "build"
                },
                "description": "A process that performs a certain CI/CD job. Most builds comprise multiple sequential steps executing their own granular actions. A build is executed according to the settings specified in its build configuration (BuildType). \n\nSee the [Manage Builds](https://www.jetbrains.com/help/teamcity/rest/start-and-cancel-builds.html) section for the examples on various build actions."
            },
            "buildCancelRequest": {
                "type": "object",
                "properties": {
                    "comment": {
                        "type": "string",
                        "example": "Started by mistake",
                        "xml": {
                            "attribute": true
                        },
                        "description": "A note that explains why this build was canceled. This note will be written to the canceled build's `build.canceledInfo.text` property."
                    },
                    "readdIntoQueue": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "If *true*, a new identical build will be queued as soon as the current build is canceled. If *false*, a build will simply be canceled. Similarly to TeamCity UI, the option to re-queue a build is only available if this build is already running. Builds that are still queued can be only aborted."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "xml": {
                    "name": "buildCancelRequest"
                },
                "description": "Send a POST request with this object as a payload to cancel a queued (the `/app/rest/buildQueue/<queuedBuildLocator>` endpoint)or already running (the `/app/rest/builds/<buildLocator>` endpoint) build."
            },
            "buildChange": {
                "type": "object",
                "properties": {
                    "nextBuild": {
                        "$ref": "#/components/schemas/build"
                    },
                    "prevBuild": {
                        "$ref": "#/components/schemas/build"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "xml": {
                    "name": "buildChange"
                },
                "description": "If builds of a consumer build configuration import build artifacts from builds of a source build configuration, BuildChange objects allow you to identify whether consecutive consumer builds obtain artifacts from different source builds or the same one. \n\nSee [Build.ArtifactDependencyChanges](https://www.jetbrains.com/help/teamcity/rest/build.html#artifactDependencyChanges) for more information."
            },
            "buildChanges": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 7,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of BuildChange objects in this list.",
                        "x-defined-in-base": true
                    },
                    "buildChange": {
                        "type": "array",
                        "description": "The list of BuildChange objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/buildChange"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "BuildChange",
                "xml": {
                    "name": "buildChanges"
                },
                "description": "Represents a list of BuildChange entities."
            },
            "buildTriggeringOptions": {
                "type": "object",
                "properties": {
                    "cleanSources": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the agent should clear its build checkout directory and pull all sources anew; otherwise, *false*."
                    },
                    "cleanSourcesInAllDependencies": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the current 'cleanSources' behavior also be applied to all snapshot dependency builds, otherwise, *false*."
                    },
                    "rebuildAllDependencies": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Use *true* to prevent the build from reusing any of its snapshot dependency builds and re-run all dependency configurations; *false* to let TeamCity decide which snapshot builds should be re-run and which have [suitable builds]()https://www.jetbrains.com/help/teamcity/snapshot-dependencies.html#Suitable+Builds."
                    },
                    "rebuildFailedOrIncompleteDependencies": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "*true* to re-run all failed, failed to start, and canceled snapshot dependency builds; *false* to let TeamCity decide which snapshot builds should be re-run and which have [suitable builds]()https://www.jetbrains.com/help/teamcity/snapshot-dependencies.html#Suitable+Builds."
                    },
                    "queueAtTop": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "*true* to place the build at the top spot of the build queue, *false* to let TeamCity automatically process this build."
                    },
                    "freezeSettings": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Use *true* to collect all code commits and versioned settings right away; *false* to do this when build is assigned to the agent and is ready to start."
                    },
                    "tagDependencies": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Use *true* to label all dependency builds with tags specified in the `Build.Tags` field; *false* to label the current build only."
                    },
                    "rebuildDependencies": {
                        "$ref": "#/components/schemas/buildTypes"
                    }
                },
                "x-help-article-name": "Running Custom Build",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/running-custom-build.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "xml": {
                    "name": "buildTriggeringOptions"
                },
                "description": "Contains build dependency and queue and dependency settings available in the [Run Custom Build](https://www.jetbrains.com/help/teamcity/running-custom-build.html) dialog in TeamCity UI. Assign an instance of this class to the Build.TriggeringOptions field when sending POST requests to the `/app/rest/buildQueue` endpoint."
            },
            "buildType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "Deployments_DeployToGlobal",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The build configuration ID. Typically consists of a trunkated project and configuration names in the ProjectName_ConfigurationName format."
                    },
                    "internalId": {
                        "type": "string",
                        "example": "bt1057",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The automatically generated build configuration ID. This is the internal property and is not intented to be used."
                    },
                    "name": {
                        "type": "string",
                        "example": "Deploy To Global",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public build configuration name displayed in TeamCity UI."
                    },
                    "templateFlag": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the current BuildType entity is a build configuration template; *false* if this is a regular build configuration. Inspect the `templates` field to view all templates attached to the target configuration."
                    },
                    "type": {
                        "type": "string",
                        "example": "regular",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The build configuration type:\n\n* *regular* — a regular build configuration.\n* *composite* — a composite configuration that aggregates results of multiple upstream build chain configurations.\n* *deployment* — a deployment build configuration.\n\nSee [Changing build configuration type](https://www.jetbrains.com/help/teamcity/changing-build-configuration-type.html) for more information.",
                        "enum": [
                            "regular",
                            "composite",
                            "deployment"
                        ]
                    },
                    "paused": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if a configuration is paused and cannot start new builds automatically upon build trigger requests; otherwise, *false*. To pause or unpause a configuration, use the configuration's Actions menu in TeamCity UI or send a `PUT` request with the required Boolean value to the `/app/rest/buildTypes/_build_type_locator_/paused` endpoint."
                    },
                    "uuid": {
                        "type": "string",
                        "example": "8e7eafb8-321b-456e-84db-e73714c8fa3f",
                        "xml": {
                            "attribute": true
                        },
                        "description": "An internally used universally unique identifier."
                    },
                    "description": {
                        "type": "string",
                        "example": "Deploys artifacts to the public registry",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The custom build configuration description, or *null* if not set."
                    },
                    "projectName": {
                        "type": "string",
                        "example": "Deployments",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public name of a parent TeamCity project."
                    },
                    "projectId": {
                        "type": "string",
                        "example": "Deployments",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The ID of a parent TeamCity project that owns this build configuration."
                    },
                    "projectInternalId": {
                        "type": "string",
                        "example": "project762",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The automatically generated ID of a parent project. This is the internal property and is not intented to be used."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/buildTypes/id:Deployments_DeployToGlobal",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The short link (without the address of a TeamCity server) to this build configuration.",
                        "x-defined-in-base": true
                    },
                    "webUrl": {
                        "type": "string",
                        "example": "https://localhost:8111/buildConfiguration/Deployments_DeployToGlobal?mode=builds",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The regular URL for this build configuration or template."
                    },
                    "inherited": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *null* for build configurations, *true* for configuration templates inherited from other templates, and *false* for regular templates extracted from build configurations. You can only create templates inherited from other base templates in Kotlin."
                    },
                    "links": {
                        "$ref": "#/components/schemas/links"
                    },
                    "project": {
                        "$ref": "#/components/schemas/project"
                    },
                    "templates": {
                        "$ref": "#/components/schemas/buildTypes"
                    },
                    "template": {
                        "$ref": "#/components/schemas/buildType"
                    },
                    "vcs-root-entries": {
                        "$ref": "#/components/schemas/vcs-root-entries"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "parameters": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "output-parameters": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "steps": {
                        "$ref": "#/components/schemas/steps"
                    },
                    "features": {
                        "$ref": "#/components/schemas/features"
                    },
                    "triggers": {
                        "$ref": "#/components/schemas/triggers"
                    },
                    "snapshot-dependencies": {
                        "$ref": "#/components/schemas/snapshot-dependencies"
                    },
                    "artifact-dependencies": {
                        "$ref": "#/components/schemas/artifact-dependencies"
                    },
                    "agent-requirements": {
                        "$ref": "#/components/schemas/agent-requirements"
                    },
                    "branches": {
                        "$ref": "#/components/schemas/branches"
                    },
                    "builds": {
                        "$ref": "#/components/schemas/builds"
                    },
                    "investigations": {
                        "$ref": "#/components/schemas/investigations"
                    },
                    "compatibleAgents": {
                        "$ref": "#/components/schemas/agents"
                    },
                    "compatibleCloudImages": {
                        "$ref": "#/components/schemas/cloudImages"
                    },
                    "vcsRootInstances": {
                        "$ref": "#/components/schemas/vcs-root-instances"
                    },
                    "externalStatusAllowed": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "This is the internal property and is not intented to be used."
                    },
                    "pauseComment": {
                        "$ref": "#/components/schemas/comment"
                    },
                    "locator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Build Configuration",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/creating-and-editing-build-configurations.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "buildType"
                },
                "description": "A build configuration owned by a TeamCity project, or a template created from this configuration. Spawns builds to execute configured build steps."
            },
            "buildTypes": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 30,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of build types in this collection.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/vcs-roots?locator=count:30,start:20",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) to the current collection.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/vcs-roots?locator=count:30,start:50",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/vcs-roots?locator=count:20,start:0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "buildType": {
                        "type": "array",
                        "description": "The list of build types owned by this collection that satisfy the given locator.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/buildType"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "BuildType",
                "xml": {
                    "name": "buildTypes"
                },
                "description": "Represents a paginated list of BuildType entities."
            },
            "builds": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 12,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of Build objects in this list.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/builds?locator=count:200,start:250,state:finished",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/builds?locator=count:50,start:0,state:finished",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/builds?locator=buildType:Project_Config&fields=count,href",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    },
                    "build": {
                        "type": "array",
                        "description": "The list of builds owned by this collection that satisfy the given locator.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/build"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "Build",
                "xml": {
                    "name": "builds"
                },
                "description": "Represents a paginated list of Build entities."
            },
            "buildsWithReason": {
                "type": "object",
                "properties": {
                    "builds": {
                        "type": "array",
                        "description": "The list of builds that cannot start without an approval.",
                        "items": {
                            "$ref": "#/components/schemas/approvableBuild"
                        }
                    },
                    "approvalReason": {
                        "$ref": "#/components/schemas/approvableBuild"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.approval.",
                "x-is-data": true,
                "xml": {
                    "name": "buildsWithReason"
                },
                "description": "Stores builds that cannot be started without an explicit approval, along with reasons why these builds require an approval."
            },
            "change": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1190,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The unique ID of this change object."
                    },
                    "version": {
                        "type": "string",
                        "example": "c1046c4fa016a774253fb3b93e6cc8bd12c159e5, 05 09 2024 17:23",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The full revision SHA that corresponds to this change, or a time stamp of a personal build that processed a custom diff"
                    },
                    "internalVersion": {
                        "type": "string",
                        "example": "c1046c4fa016a774253fb3b93e6cc8bd12c159e5",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "username": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "This property is obsolete. To identify the change author, read the `commiter` property instead."
                    },
                    "date": {
                        "type": "string",
                        "example": "20240905T151059+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the timestamp that corresponds to the moment this change was pushed to the VCS. If this is a custom change uploaded to a personal build, returns the timestamp of this build instead."
                    },
                    "registrationDate": {
                        "type": "string",
                        "example": "20240905T151115+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the timestamp that corresponds to the moment this change was registered in the TeamCity database."
                    },
                    "personal": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if this change was a custom patch uploaded to a personal build. If this is a regular change that comes from a VCS (even if the build that processed it is a personal one), returns *false*."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/changes/id:704,personal:true",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current change.",
                        "x-defined-in-base": true
                    },
                    "webUrl": {
                        "type": "string",
                        "example": "https://localhost:8111/change/1417?personal=false",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The TeamCity server link to this change."
                    },
                    "comment": {
                        "type": "string",
                        "example": "Update README.md",
                        "description": "The comment an author of the change left."
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "type": {
                        "type": "string",
                        "example": "VCS_CHANGE",
                        "description": "Specifies the origin of the change.\n\n* *VCS_CHANGE* — the regular change that originates from a repository related to the target build.\n* *SNAPSHOT_DEPENDENCY_VCS_CHANGE* — the change is processed in another build on which the target build depends (via the snapshot dependency). Add the `changesFromDependencies:true` locator to your request if you want the response to include changes processed in upstream chain builds."
                    },
                    "snapshotDependencyLink": {
                        "$ref": "#/components/schemas/SnapshotDependencyLink"
                    },
                    "files": {
                        "$ref": "#/components/schemas/fileChanges"
                    },
                    "vcsRootInstance": {
                        "$ref": "#/components/schemas/vcs-root-instance"
                    },
                    "parentChanges": {
                        "$ref": "#/components/schemas/changes"
                    },
                    "parentRevisions": {
                        "$ref": "#/components/schemas/items"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "storesProjectSettings": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "status": {
                        "$ref": "#/components/schemas/ChangeStatus"
                    },
                    "commiter": {
                        "$ref": "#/components/schemas/commiter"
                    },
                    "canEditComment": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "locator": {
                        "type": "string",
                        "example": "null",
                        "xml": {
                            "attribute": true
                        },
                        "description": "This property supports the internal infrastructure and is not intended to be used in your code."
                    }
                },
                "x-help-article-name": "Change",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/change.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "xml": {
                    "name": "change"
                },
                "description": "Represents a VCS change (commit)."
            },
            "changes": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of Change objects owned by this collection.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/changes?locator=count:200,start:250",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/changes?locator=count:50,start:0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/changes",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    },
                    "change": {
                        "type": "array",
                        "description": "The list of Change objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/change"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "Change",
                "xml": {
                    "name": "changes"
                },
                "description": "Represents a paginated list of Change entities."
            },
            "cleanup": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "**true** if the periodic clean-up is enabled; otherwise, **false**."
                    },
                    "maxCleanupDuration": {
                        "type": "integer",
                        "format": "int32",
                        "example": 120,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The maximum clean-up duration (in munutes). If a clean-up exceeds this limit, TeamCity will automatically abort it."
                    },
                    "daily": {
                        "$ref": "#/components/schemas/daily"
                    },
                    "cron": {
                        "$ref": "#/components/schemas/cron"
                    }
                },
                "x-help-article-name": "TeamCity Data Clean-Up",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-data-clean-up.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true,
                "xml": {
                    "name": "cleanup"
                },
                "description": "Stores current settings according to which the TeamCity performs periodic clean-ups. Use the `/app/rest/server/cleanup` endpoint to view and edit these settings."
            },
            "cloudError": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Failed to get image info for Ubuntu-22.04-Large",
                        "description": "The shortened error message."
                    },
                    "detailedMessage": {
                        "type": "string",
                        "example": "Unable to execute HTTP request: ec2.eu-west-1.amazonaws.com",
                        "description": "The full error message."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".cloud.",
                "x-is-data": true,
                "xml": {
                    "name": "cloudError"
                },
                "description": "Contains information about a cloud image or profile error."
            },
            "cloudImage": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "id:(Ubuntu-22.04-Large(AMI)),profileId:amazon-4",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The ID of this cloud image. Typically consists of the truncated image name added to the parent profile ID."
                    },
                    "name": {
                        "type": "string",
                        "example": "Win-Server-2022-xLarge (ami-08a0a7588100450ff)",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The full image name. Includes the public cloud image name and ID."
                    },
                    "href": {
                        "type": "string",
                        "example": "app/rest/cloud/images/id:(id:Win-Server-2022-xLarge,profileId:amazon-1)",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The shortened (without the server URL) link to this cloud image.",
                        "x-defined-in-base": true
                    },
                    "profile": {
                        "$ref": "#/components/schemas/cloudProfile"
                    },
                    "instances": {
                        "$ref": "#/components/schemas/cloudInstances"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "This property is deprecated, use `error` instead."
                    },
                    "error": {
                        "$ref": "#/components/schemas/cloudError"
                    },
                    "agentTypeId": {
                        "type": "integer",
                        "format": "int32",
                        "example": 283,
                        "description": "The value of the `typeId` property of all agents spawned from this image. Allows you to identify sibling cloud agents."
                    },
                    "agentPoolId": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "description": "The ID of the agent pool to which agents spawned from this image belong."
                    },
                    "operatingSystemName": {
                        "type": "string",
                        "example": "Linux, version 5.19.0-1025-aws",
                        "description": "The full name of the OS installed on virtual machines spawned from this image."
                    },
                    "webUrl": {
                        "type": "string",
                        "example": "https://example.com/app/rest/cloudImage/3414",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the full web link to access this cloud image."
                    },
                    "locator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Host Build Agents in Cloud",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-integration-with-cloud-solutions.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".cloud.",
                "x-is-data": true,
                "xml": {
                    "name": "cloudImage"
                },
                "description": "A cloud image that stores settings for individual cloud machine instances (the ID of an instance to start, post-launch sripts, and more). Cloud images are owned by cloud profiles."
            },
            "cloudImages": {
                "type": "object",
                "properties": {
                    "cloudImage": {
                        "type": "array",
                        "description": "The list of cloud images owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/cloudImage"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of cloud images in this collection.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/cloud/images?locator=count:200,start:250",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/cloud/images?locator=count:50,start:0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/cloud/images",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".cloud.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "CloudImage",
                "xml": {
                    "name": "cloudImages"
                },
                "description": "Represents a paginated list of CloudImage entities."
            },
            "cloudInstance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "id:(Windows-Server2022(Instance)),imageId:(Windows-Server2022(Instance)),profileId:amazon-4",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internally used read-only ID of this instance."
                    },
                    "name": {
                        "type": "string",
                        "example": "i-0245b46070c443201",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The name of this instance."
                    },
                    "state": {
                        "type": "string",
                        "example": "running",
                        "xml": {
                            "attribute": true
                        },
                        "description": "A String value that specifies the instance current status. Can return the following values: `scheduled to start`, `scheduled to stop`, `starting`, `running`, `restarting`, `stopping`, `stopped`, `unknown`, and `error`."
                    },
                    "startDate": {
                        "type": "string",
                        "example": "20250515T114320+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The time of this instance's initial start."
                    },
                    "networkAddress": {
                        "type": "string",
                        "example": "ec2-54-27-55-38.eu-west-1.compute.amazon.com",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The actual instance address."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/cloud/instances/id:(id:(Windows-Server2022(Instance)),imageId:(Windows-Server2022(Instance)),profileId:amazon-4)",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative (without the TeamCity server URL) link to this instance.",
                        "x-defined-in-base": true
                    },
                    "image": {
                        "$ref": "#/components/schemas/cloudImage"
                    },
                    "agent": {
                        "$ref": "#/components/schemas/agent"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "This property is deprecated, use `error` instead."
                    },
                    "error": {
                        "$ref": "#/components/schemas/cloudError"
                    }
                },
                "x-help-article-name": "Host Build Agents in Cloud",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-integration-with-cloud-solutions.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".cloud.",
                "x-is-data": true,
                "xml": {
                    "name": "cloudInstance"
                },
                "description": "An individual cloud instance spawned from a cloud image."
            },
            "cloudInstances": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 54,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of CloudInstance objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/cloud/instances?locator=count:200,start:250",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/cloud/instances?locator=count:50,start:0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/cloud/instances",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the TeamCity server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    },
                    "cloudInstance": {
                        "type": "array",
                        "description": "The list of CloudInstance objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/cloudInstance"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".cloud.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "CloudInstance",
                "xml": {
                    "name": "cloudInstances"
                },
                "description": "Represents a paginated list of CloudInstance entities."
            },
            "cloudProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "amazon-4",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internally used cloud profile ID."
                    },
                    "name": {
                        "type": "string",
                        "example": "AWS EC2 Profile",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public cloud profile name displayed in TeamCity UI."
                    },
                    "cloudProviderId": {
                        "type": "string",
                        "example": "kube",
                        "xml": {
                            "attribute": true
                        },
                        "description": "A shortened name of the cloud provider."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/cloud/profiles/id:amazon-4",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The shortened (without the TeamCity server URL) link to this profile.",
                        "x-defined-in-base": true
                    },
                    "project": {
                        "$ref": "#/components/schemas/project"
                    },
                    "images": {
                        "$ref": "#/components/schemas/cloudImages"
                    },
                    "error": {
                        "$ref": "#/components/schemas/cloudError"
                    }
                },
                "x-help-article-name": "Host Build Agents in Cloud",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-integration-with-cloud-solutions.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".cloud.",
                "x-is-data": true,
                "xml": {
                    "name": "cloudProfile"
                },
                "description": "A cloud profile that stores common cloud agent profiles. These settings are applied to all cloud images owned by this profile."
            },
            "cloudProfiles": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 4,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of CloudProfile objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/cloud/profiles?locator=count:200,start:250",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/cloud/profiles?locator=count:50,start:0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/cloud/profiles",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the TeamCity server URL) used to retrieve this object.",
                        "x-defined-in-base": true
                    },
                    "cloudProfile": {
                        "type": "array",
                        "description": "The list of CloudProfile objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/cloudProfile"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".cloud.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "CloudProfile",
                "xml": {
                    "name": "cloudProfiles"
                },
                "description": "Represents a paginated list of CloudProfile entities."
            },
            "comment": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "comment"
                },
                "description": "Represents a dated comment of the specific user."
            },
            "commiter": {
                "type": "object",
                "properties": {
                    "vcsUsername": {
                        "type": "string",
                        "example": "37912124+valrravn",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The VCS username of a change author."
                    },
                    "users": {
                        "$ref": "#/components/schemas/users"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "xml": {
                    "name": "commiter"
                },
                "description": "An author of a change committed to a VCS repository."
            },
            "compatibilities": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of Compatibility objects in this list.",
                        "x-defined-in-base": true
                    },
                    "compatibility": {
                        "type": "array",
                        "description": "The list of Compatibility objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/compatibility"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Compatibility",
                "xml": {
                    "name": "compatibilities"
                },
                "description": "Represents a list of Compatibility entities."
            },
            "compatibility": {
                "type": "object",
                "properties": {
                    "compatible": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the target agent is compatible with the given configuration (that is, can run its builds); otherwise, *false*."
                    },
                    "agent": {
                        "$ref": "#/components/schemas/agent"
                    },
                    "buildType": {
                        "$ref": "#/components/schemas/buildType"
                    },
                    "unmetRequirements": {
                        "$ref": "#/components/schemas/requirements"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "compatibility"
                },
                "description": "An entity that describes the compatibility relation between an agent and a build configuration."
            },
            "compatibilityPolicy": {
                "type": "object",
                "properties": {
                    "policy": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns whether the agent can run only builds of specific build configurations. Available values:\n\n* *any* — agents with this policy can run builds of any build configurations.\n* *selected* — agents with this policy can only run builds of configurations stored in the `buildTypes` collection."
                    },
                    "buildTypes": {
                        "$ref": "#/components/schemas/buildTypes"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "compatibilityPolicy"
                },
                "description": "Represents the policy that limit agents to building specific build configurations."
            },
            "compositeApprovalRule": {
                "type": "object",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/group"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/user"
                        }
                    },
                    "currentlyApprovedBy": {
                        "$ref": "#/components/schemas/users"
                    },
                    "requiredApprovalsCount": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.approval.",
                "x-is-data": true,
                "xml": {
                    "name": "compositeApprovalRule"
                },
                "description": "Represents composite approval rule(combines multiple groups and users) and its current status for the given build."
            },
            "compositeApprovals": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "compositeApproval": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/compositeApprovalRule"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-base-entity": "CompositeApprovalRule",
                "x-subpackage": ".build.approval.",
                "x-is-data": true,
                "x-is-list": true,
                "xml": {
                    "name": "compositeApprovals"
                },
                "description": "Represents a list of CompositeApprovalRule entities."
            },
            "cron": {
                "type": "object",
                "properties": {
                    "minute": {
                        "type": "string",
                        "example": "30",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The minute of the scheduled time. Supports values in the 0 - 59 range."
                    },
                    "hour": {
                        "type": "string",
                        "example": "0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The hour of the scheduled time. Supports Integer values in the 0 - 23 range and special."
                    },
                    "day": {
                        "type": "string",
                        "example": "?",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The day of month when the scheduled event occurs. Supports Integer values in the 1 - 31 range and special characters."
                    },
                    "month": {
                        "type": "string",
                        "example": "JAN",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The month when the scheduled event occurs. Supports Integer values in the 1-12 range, short month names (for example, **JAN**), and special characters."
                    },
                    "dayWeek": {
                        "type": "string",
                        "example": "JAN",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The day of week when the scheduled event occurs. Supports Integer values in the 1-7 range, short month names (for example, **SAT**), and special characters."
                    }
                },
                "x-help-article-name": "Cron Expressions",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/cron-expressions-in-teamcity.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true,
                "xml": {
                    "name": "cron"
                },
                "description": "A cron expression that represents a custom schedule."
            },
            "customizations": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "object",
                        "description": "The list of parameters added by user via the Run Custom Build dialog. Existing parameters whose values were customized are not included.",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "changes": {
                        "type": "object",
                        "description": "A unique changeset processed by the build. For example, a manually uploaded .diff patch (for personal builds) or an older revision that was already processed before (for history builds)",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "artifactDependencies": {
                        "type": "object",
                        "description": "The list of artifact dependency customizations. See `build.artifactDependencyChanges` for more information.",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dependencies": {
                        "type": "object",
                        "description": "The list of custom snapshot dependency settings for this build, such as when an upstream build was explicitly re-run, bypassing the default reuse setting, or skipped.",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "xml": {
                    "name": "customizations"
                },
                "description": "A collection of build customizations (artifact dependency overrides, custom parameters or changesets) that set this build apart from normal configuration builds."
            },
            "daily": {
                "type": "object",
                "properties": {
                    "hour": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The hour (in TeamCity server timezone) when the scheduled event should start."
                    },
                    "minute": {
                        "type": "integer",
                        "format": "int32",
                        "example": 30,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The minute (in TeamCity server timezone) when the scheduled event should start."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true,
                "xml": {
                    "name": "daily"
                },
                "description": "The structure that represents a daily schedule."
            },
            "datas": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "data": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/metaData"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-base-entity": "MetaData",
                "x-subpackage": ".",
                "x-is-data": true,
                "x-is-list": true,
                "xml": {
                    "name": "datas"
                },
                "description": "Represents a list of MetaData entities."
            },
            "deploymentDashboard": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "deploymentInstances": {
                        "$ref": "#/components/schemas/deploymentInstances"
                    },
                    "project": {
                        "$ref": "#/components/schemas/project"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".deployment.",
                "x-is-data": true,
                "xml": {
                    "name": "deploymentDashboard"
                },
                "description": "Represents a deployment dashboard instance."
            },
            "deploymentDashboards": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "deploymentDashboard": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/deploymentDashboard"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".deployment.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "DeploymentDashboard",
                "xml": {
                    "name": "deploymentDashboards"
                },
                "description": "Represents a paginated list of DeploymentDashboard entities."
            },
            "deploymentInstance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "currentState": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "IN_PROGRESS",
                            "SUCCESSFUL",
                            "FAILED",
                            "CANCELLED",
                            "UNKNOWN"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "deploymentStateEntries": {
                        "$ref": "#/components/schemas/deploymentStateEntries"
                    },
                    "deploymentDashboard": {
                        "$ref": "#/components/schemas/deploymentDashboard"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".deployment.",
                "x-is-data": true,
                "xml": {
                    "name": "deploymentInstance"
                },
                "description": "Represents an instance that has been deployed to external system, along with deployment history."
            },
            "deploymentInstances": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "deploymentInstance": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/deploymentInstance"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".deployment.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "DeploymentInstance",
                "xml": {
                    "name": "deploymentInstances"
                },
                "description": "Represents a paginated list of DeploymentInstance entities."
            },
            "deploymentStateEntries": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "historyFromPosted": {
                        "$ref": "#/components/schemas/DeploymentHistory"
                    },
                    "deploymentStateEntry": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/deploymentStateEntry"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".deployment.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "DeploymentStateEntry",
                "xml": {
                    "name": "deploymentStateEntries"
                },
                "description": "Represents a list of DeploymentStateEntry entities."
            },
            "deploymentStateEntry": {
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "IN_PROGRESS",
                            "SUCCESSFUL",
                            "FAILED",
                            "CANCELLED",
                            "UNKNOWN"
                        ]
                    },
                    "deploymentDate": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "entryFromPosted": {
                        "$ref": "#/components/schemas/DeploymentStateEntry"
                    },
                    "build": {
                        "$ref": "#/components/schemas/build"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".deployment.",
                "x-is-data": true,
                "xml": {
                    "name": "deploymentStateEntry"
                },
                "description": "Represents a state of deployment instance."
            },
            "disabledResponsibilities": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "responsibility": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/responsibility"
                        }
                    }
                },
                "x-help-article-name": "Multi-node setup",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".nodes.",
                "x-is-data": true,
                "xml": {
                    "name": "disabledResponsibilities"
                },
                "description": "Represents a set of responsibilities that are currently disabled but can be enabled on a TeamCity node."
            },
            "downloadInfo": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of files downloaded from the corresponding upstream build.",
                        "x-defined-in-base": true
                    },
                    "build": {
                        "$ref": "#/components/schemas/build"
                    },
                    "artifactInfo": {
                        "type": "array",
                        "description": "Stores individual records on each downloaded file.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/ArtifactDownloadInfo"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".build.downloadedArtifacts.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "ArtifactInfo",
                "xml": {
                    "name": "downloadInfo"
                },
                "description": "Stores information about all artifacts downloaded from one specific upstream build. Can be accessed via the `downloadInfo` field of the `DownloadedArtifacts` object."
            },
            "downloadedArtifacts": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of artifacts downloaded by this build, matching the number of DownloadInfo records. Can be lower than `unfilteredCount` if request locator filters out certain builds.",
                        "x-defined-in-base": true
                    },
                    "unfilteredCount": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The total number of artifacts downloaded by this build."
                    },
                    "downloadInfo": {
                        "type": "array",
                        "description": "Contains detailed information about downloaded files: the upstream build that provided artifacts, the number of artifacts delivered by this upstream build, and the individual file data.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/downloadInfo"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".build.downloadedArtifacts.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "DownloadInfo",
                "xml": {
                    "name": "downloadedArtifacts"
                },
                "description": "Stores information about all artifacts downloaded by this build."
            },
            "effectiveResponsibilities": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "responsibility": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/responsibility"
                        }
                    }
                },
                "x-help-article-name": "Multi-node setup",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".nodes.",
                "x-is-data": true,
                "xml": {
                    "name": "effectiveResponsibilities"
                },
                "description": "Represents a set of effective responsibilities of a TeamCity node. A responsibility becomes effective once it is enabled in the server configuration and a responsible node detects this change and updates its state."
            },
            "enabledInfo": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the current object state is enabled (for example, pinned for build `PinInfo` or authorized for agent `AuthorizedInfo`; otherwise, *false*."
                    },
                    "comment": {
                        "$ref": "#/components/schemas/comment"
                    },
                    "statusSwitchTime": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns date and time when the agent state should be automatically flipped. Specify this value to temporarily disable or enable agents, or leave it empty to permanently change the agent state (until it is updated manually)."
                    }
                },
                "x-help-article-name": "Build Agent",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-agent.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "enabledInfo"
                },
                "description": "Contains information about agent availability (that is, whether it is ready to process builds). Send EnabledInfo objects to the [`/app/rest/agents/{agentLocator}/enabledInfo`](https://www.jetbrains.com/help/teamcity/rest/agentapi.html#setEnabledInfo) endpoint via `PUT` requests to manually enable and disable agents."
            },
            "enabledResponsibilities": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "responsibility": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/responsibility"
                        }
                    }
                },
                "x-help-article-name": "Multi-node setup",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".nodes.",
                "x-is-data": true,
                "xml": {
                    "name": "enabledResponsibilities"
                },
                "description": "Represents a set of enabled responsibilities of a TeamCity node."
            },
            "entries": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "entry": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/entry"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Entry",
                "xml": {
                    "name": "entries"
                },
                "description": "Represents a list of Entry entities."
            },
            "entry": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "entry"
                },
                "description": "Represents a single name-value relation."
            },
            "environment": {
                "type": "object",
                "properties": {
                    "osType": {
                        "type": "string",
                        "example": "macOS",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The OS type."
                    },
                    "osName": {
                        "type": "string",
                        "example": "Mac OS X, version 13.6",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The full OS name"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "environment"
                },
                "description": "Stores information about operating system installed on the agent machine."
            },
            "feature": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "TRIGGER_71",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only ID of the object. This property is inherited from the base PropEntity class."
                    },
                    "name": {
                        "type": "string",
                        "example": "Py: Merge reports",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public object name. Some objects, like build steps, support public names, while others, like build triggers, do not. This property is inherited from the base PropEntity class."
                    },
                    "type": {
                        "type": "string",
                        "example": "simpleRunner, commit-status-publisher, vcsTrigger",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The object type. This property is inherited from the base PropEntity class."
                    },
                    "disabled": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is disabled and inactive; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "inherited": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is inherited from another object; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current object. This property is inherited from the base PropEntity class.",
                        "x-defined-in-base": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    }
                },
                "x-help-article-name": "Build Features",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/adding-build-features.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "feature"
                },
                "description": "A build feature that can be added to a build configuration to extend its functionality."
            },
            "features": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of `feature` objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "feature": {
                        "type": "array",
                        "description": "The list of `feature` objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/feature"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Feature",
                "xml": {
                    "name": "features"
                },
                "description": "Represents a list of Feature entities."
            },
            "file": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "output.txt",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public file name."
                    },
                    "fullName": {
                        "type": "string",
                        "example": "output.txt",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The full name of a file, including all special characters omitted in the `name` property. Can be equal to `name`."
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64",
                        "example": 145,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The file size in bytes."
                    },
                    "modificationTime": {
                        "type": "string",
                        "example": "20250520T183916+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the last time this file was edited."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/builds/id:16253/artifacts/metadata/file1.txt",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The link to file metadata object.",
                        "x-defined-in-base": true
                    },
                    "parent": {
                        "$ref": "#/components/schemas/file"
                    },
                    "content": {
                        "$ref": "#/components/schemas/href"
                    },
                    "children": {
                        "$ref": "#/components/schemas/files"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".files.",
                "x-is-data": true,
                "xml": {
                    "name": "file"
                },
                "description": "A file or a directory associated with, for instance, a published artifact."
            },
            "fileChanges": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 7,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of FileChange objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "file": {
                        "type": "array",
                        "description": "The list of FileChange objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/FileChange"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-base-entity": "FileChange",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "x-is-list": true,
                "xml": {
                    "name": "fileChanges"
                },
                "description": "Represents a list of FileChange entities."
            },
            "files": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of File objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative (without TeamCity server URL) link to this collection.",
                        "x-defined-in-base": true
                    },
                    "file": {
                        "type": "array",
                        "description": "The list of File objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/file"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".files.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "File",
                "xml": {
                    "name": "files"
                },
                "description": "Represents a list of File entities."
            },
            "group": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "description": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "parent-groups": {
                        "$ref": "#/components/schemas/groups"
                    },
                    "child-groups": {
                        "$ref": "#/components/schemas/groups"
                    },
                    "users": {
                        "$ref": "#/components/schemas/users"
                    },
                    "roles": {
                        "$ref": "#/components/schemas/roles"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    }
                },
                "x-help-article-name": "User Group",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/user-group.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".group.",
                "x-is-data": true,
                "xml": {
                    "name": "group"
                },
                "description": "Represents a user group."
            },
            "groupApprovalRule": {
                "type": "object",
                "properties": {
                    "group": {
                        "$ref": "#/components/schemas/group"
                    },
                    "currentlyApprovedBy": {
                        "$ref": "#/components/schemas/users"
                    },
                    "requiredApprovalsCount": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of TeamCity users in the *group* required to approve the queued build."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.approval.",
                "x-is-data": true,
                "xml": {
                    "name": "groupApprovalRule"
                },
                "description": "A group approval rule and its current status for the given build."
            },
            "groupApprovals": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of GroupApprovalRule objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "groupApproval": {
                        "type": "array",
                        "description": "The list of GroupApprovalRule objects in this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/groupApprovalRule"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-base-entity": "GroupApprovalRule",
                "x-subpackage": ".build.approval.",
                "x-is-data": true,
                "x-is-list": true,
                "xml": {
                    "name": "groupApprovals"
                },
                "description": "Represents a list of GroupApprovalRule entities."
            },
            "groups": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "group": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/group"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".group.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Group",
                "xml": {
                    "name": "groups"
                },
                "description": "Represents a list of Group entities."
            },
            "healthCategories": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "healthCategory": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/healthCategory"
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".health.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "HealthCategory",
                "xml": {
                    "name": "healthCategories"
                },
                "description": "Represents a paginated list of HealthCategory entities."
            },
            "healthCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "helpUrl": {
                        "type": "string"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".health.",
                "x-is-data": true,
                "xml": {
                    "name": "healthCategory"
                }
            },
            "healthItem": {
                "type": "object",
                "properties": {
                    "identity": {
                        "type": "string"
                    },
                    "severity": {
                        "type": "string",
                        "enum": [
                            "INFO",
                            "WARN",
                            "ERROR"
                        ]
                    },
                    "healthCategory": {
                        "$ref": "#/components/schemas/healthCategory"
                    }
                },
                "x-help-article-name": "Server Health",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/server-health.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".health.",
                "x-is-data": true,
                "xml": {
                    "name": "healthItem"
                },
                "description": "Represents a server health item."
            },
            "healthStatusItems": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "healthItem": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/healthItem"
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".health.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "HealthItem",
                "xml": {
                    "name": "healthStatusItems"
                },
                "description": "Represents a paginated list of HealthItem entities."
            },
            "href": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "href"
                },
                "description": "Represents a href link."
            },
            "investigation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "buildType:(id:TeamcityMultibranchRepo_Build)",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The investigation locator."
                    },
                    "state": {
                        "type": "string",
                        "example": "TAKEN",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The investigation state. Supported values: \n\n* *TAKEN* — the investigation is assigned to a TeamCity user who works on resolving the problem.\n* *FIXED* — the investigation was marked as fixed.\n* *GIVEN_UP* — the investigation is no longer active, the 'no investigation' option was selected.\n* *NONE* — unknown investigation status.",
                        "enum": [
                            "TAKEN",
                            "FIXED",
                            "GIVEN_UP",
                            "NONE"
                        ]
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/investigations/assignmentProject:(id:MyProj_InternalTeamBuilds),problem:(id:220)",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The short (without the TeamCity server address) link to this investigation.",
                        "x-defined-in-base": true
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/user"
                    },
                    "assignment": {
                        "$ref": "#/components/schemas/comment"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/ProblemScope"
                    },
                    "target": {
                        "$ref": "#/components/schemas/ProblemTarget"
                    },
                    "resolution": {
                        "$ref": "#/components/schemas/Resolution"
                    },
                    "responsible": {
                        "$ref": "#/components/schemas/user"
                    }
                },
                "x-help-article-name": "Working with Build and Test Failures",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/investigating-and-muting-build-failures.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "investigation"
                },
                "description": "An investigation of a specific build problem (`/app/rest/investigations?locator=type:problem`), a failed test (`/app/rest/investigations?locator=type:test`), or an entire build configuration (`/app/rest/investigations?locator=type:anyProblem`)"
            },
            "investigations": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 30,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of investigations in this collection.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/investigations?locator=count:3,start:8",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/investigations?locator=count:3,start:2",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/investigations?locator=count:3,start:5",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) to the current collection.",
                        "x-defined-in-base": true
                    },
                    "investigation": {
                        "type": "array",
                        "description": "The list of investigations owned by this collection that satisfy the given locator.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/investigation"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "Investigation",
                "xml": {
                    "name": "investigations"
                },
                "description": "Represents a paginated list of Investigation entities."
            },
            "issues": {
                "type": "object",
                "properties": {
                    "issues": {
                        "type": "array",
                        "xml": {
                            "name": "issue"
                        },
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/Issue"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-base-entity": "Issue",
                "x-subpackage": ".issue.",
                "x-is-data": true,
                "x-is-list": true,
                "xml": {
                    "name": "issues"
                },
                "description": "Represents a list of Issue entities."
            },
            "issuesUsages": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "issueUsage": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/IssueUsage"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".issue.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "IssueUsage",
                "xml": {
                    "name": "issuesUsages"
                },
                "description": "Represents a list of IssueUsage entities."
            },
            "items": {
                "type": "object",
                "properties": {
                    "item": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "xml": {
                                "name": "item"
                            }
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "items"
                },
                "description": "Represents a list of items (strings)."
            },
            "licenseKey": {
                "type": "object",
                "properties": {
                    "valid": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "active": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "expired": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "obsolete": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "expirationDate": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "maintenanceEndDate": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "evaluation",
                            "eap",
                            "open_source",
                            "commercial",
                            "enterprise",
                            "professional"
                        ]
                    },
                    "servers": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "agents": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "unlimitedAgents": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "buildTypes": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "unlimitedBuildTypes": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "pipelines": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "unlimitedPipelines": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "errorDetails": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "key": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "rawType": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true,
                "xml": {
                    "name": "licenseKey"
                },
                "description": "Represents a license key details."
            },
            "licenseKeys": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "licenseKey": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/licenseKey"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".server.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "LicenseKey",
                "xml": {
                    "name": "licenseKeys"
                },
                "description": "Represents a list of LicenseKey entities."
            },
            "licensingData": {
                "type": "object",
                "properties": {
                    "licenseUseExceeded": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "maxAgents": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "unlimitedAgents": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "maxBuildTypes": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "unlimitedBuildTypes": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "buildTypesLeft": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "maxPipelines": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "unlimitedPipelines": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "pipelinesLeft": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "serverLicenseType": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "evaluation",
                            "eap",
                            "open_source",
                            "commercial",
                            "enterprise",
                            "professional"
                        ]
                    },
                    "serverEffectiveReleaseDate": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "agentsLeft": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "licenseKeys": {
                        "$ref": "#/components/schemas/licenseKeys"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true,
                "xml": {
                    "name": "licensingData"
                },
                "description": "Represents license state details (available build configurations, agents, etc.)."
            },
            "link": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "url": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "relativeUrl": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "link"
                },
                "description": "Represents a list of URLs."
            },
            "links": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "link": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/link"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Link",
                "xml": {
                    "name": "links"
                },
                "description": "Represents a list of Link entities."
            },
            "matrixBuildFeatureDescriptor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MatrixParameterDescriptor"
                        }
                    },
                    "separateArtifacts": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".pages.matrix.",
                "x-is-data": true,
                "xml": {
                    "name": "matrixBuildFeatureDescriptor"
                }
            },
            "metaData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "entries": {
                        "$ref": "#/components/schemas/entries"
                    }
                },
                "x-object-type": "DataEntity",
                "x-base-entity": "Entries",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "metaData"
                },
                "description": "Represents a named Entries entity."
            },
            "metric": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "description": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "prometheusName": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "metricValues": {
                        "$ref": "#/components/schemas/metricValues"
                    },
                    "metricTags": {
                        "$ref": "#/components/schemas/metricTags"
                    }
                },
                "x-help-article-name": "Metrics",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-monitoring-and-diagnostics.html#Metrics",
                "x-object-type": "DataEntity",
                "x-subpackage": ".metrics.",
                "x-is-data": true,
                "xml": {
                    "name": "metric"
                },
                "description": "Represents the specific server metric."
            },
            "metricTag": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Metrics",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-monitoring-and-diagnostics.html#Metrics",
                "x-object-type": "DataEntity",
                "x-subpackage": ".metrics.",
                "x-is-data": true,
                "xml": {
                    "name": "metricTag"
                },
                "description": "Represents a metric tag."
            },
            "metricTags": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "metricTag": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/metricTag"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".metrics.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "MetricTag",
                "xml": {
                    "name": "metricTags"
                },
                "description": "Represents a list of MetricTag entities."
            },
            "metricValue": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "number",
                        "format": "double",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "tags": {
                        "$ref": "#/components/schemas/metricTags"
                    }
                },
                "x-help-article-name": "Metrics",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/teamcity-monitoring-and-diagnostics.html#Metrics",
                "x-object-type": "DataEntity",
                "x-subpackage": ".metrics.",
                "x-is-data": true,
                "xml": {
                    "name": "metricValue"
                },
                "description": "Represents a metric value."
            },
            "metricValues": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "metricValue": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/metricValue"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".metrics.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "MetricValue",
                "xml": {
                    "name": "metricValues"
                },
                "description": "Represents a list of MetricValue entities."
            },
            "metrics": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "metric": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/metric"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".metrics.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Metric",
                "xml": {
                    "name": "metrics"
                },
                "description": "Represents a list of Metric entities."
            },
            "multipleOperationResult": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "errorCount": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "operationResult": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/operationResult"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "OperationResult",
                "xml": {
                    "name": "multipleOperationResult"
                },
                "description": "Represents a list of OperationResult entities."
            },
            "mute": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "assignment": {
                        "$ref": "#/components/schemas/comment"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/ProblemScope"
                    },
                    "target": {
                        "$ref": "#/components/schemas/ProblemTarget"
                    },
                    "resolution": {
                        "$ref": "#/components/schemas/Resolution"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "xml": {
                    "name": "mute"
                },
                "description": "Represents a muted test."
            },
            "mutes": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "mute": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/mute"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "Mute",
                "xml": {
                    "name": "mutes"
                },
                "description": "Represents a paginated list of Mute entities."
            },
            "newBuildTypeDescription": {
                "type": "object",
                "properties": {
                    "copyAllAssociatedSettings": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if all settings of a cloned configuration or template should be copied; otherwise, **false**."
                    },
                    "projectsIdsMap": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "buildTypesIdsMap": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "vcsRootsIdsMap": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "name": {
                        "type": "string",
                        "example": "My Build Config",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public name of a build configuration or template."
                    },
                    "id": {
                        "type": "string",
                        "example": "My_Build_Config_ID",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The ID of a build configuration or a template."
                    },
                    "sourceBuildTypeLocator": {
                        "type": "string",
                        "example": "deprecated",
                        "xml": {
                            "attribute": true
                        },
                        "description": "This property is deprecated, use `sourceBuildType` instead."
                    },
                    "sourceBuildType": {
                        "$ref": "#/components/schemas/buildType"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "newBuildTypeDescription"
                },
                "description": "A stub object that represents a newly created build configuration (build type). Objects of the `NewBuildTypeDescription` type can be used to do the following: \n\n* **Copy an existing build configurations**. POST a `NewBuildTypeDescription` object with the specified `sourceBuildType` property to the `/app/rest/projects/_target_project_locator_/buildTypes` endpoint.\n* **Create a new build configurations and templates**. POST a `NewBuildTypeDescription` object with required properties (`name` is required) to the `/app/rest/projects/_parent_project_locator_/buildTypes` or `/app/rest/projects/_parent_project_locator_/templates` endpoint."
            },
            "newProjectDescription": {
                "type": "object",
                "properties": {
                    "copyAllAssociatedSettings": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if all settings of a cloned configuration or template should be copied; otherwise, **false**."
                    },
                    "projectsIdsMap": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "buildTypesIdsMap": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "vcsRootsIdsMap": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "sourceProjectLocator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "sourceProject": {
                        "$ref": "#/components/schemas/project"
                    },
                    "parentProject": {
                        "$ref": "#/components/schemas/project"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".project.",
                "x-is-data": true,
                "xml": {
                    "name": "newProjectDescription"
                },
                "description": "Represents a project stub."
            },
            "node": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "url": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "state": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "online",
                            "offline",
                            "stopping",
                            "starting"
                        ]
                    },
                    "role": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "current": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "enabledResponsibilities": {
                        "$ref": "#/components/schemas/enabledResponsibilities"
                    },
                    "disabledResponsibilities": {
                        "$ref": "#/components/schemas/disabledResponsibilities"
                    },
                    "effectiveResponsibilities": {
                        "$ref": "#/components/schemas/effectiveResponsibilities"
                    }
                },
                "x-help-article-name": "Multi-node setup",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".nodes.",
                "x-is-data": true,
                "xml": {
                    "name": "node"
                },
                "description": "Represents a TeamCity node."
            },
            "nodes": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "node": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/node"
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".nodes.",
                "x-is-data": true,
                "xml": {
                    "name": "nodes"
                }
            },
            "operationResult": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "related": {
                        "$ref": "#/components/schemas/relatedEntity"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "operationResult"
                },
                "description": "Represents a relation between a message and a related entity."
            },
            "permission": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "global": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Roles",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/role-and-permission.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "xml": {
                    "name": "permission"
                },
                "description": "Represents a permission."
            },
            "permissionAssignment": {
                "type": "object",
                "properties": {
                    "isGlobalScope": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "permission": {
                        "$ref": "#/components/schemas/permission"
                    },
                    "project": {
                        "$ref": "#/components/schemas/project"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "xml": {
                    "name": "permissionAssignment"
                },
                "description": "Represents a relation between the specific permission and a project."
            },
            "permissionAssignments": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "permissionAssignment": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/permissionAssignment"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "PermissionAssignment",
                "xml": {
                    "name": "permissionAssignments"
                },
                "description": "Represents a list of PermissionAssignment entities."
            },
            "permissionRestriction": {
                "type": "object",
                "properties": {
                    "isGlobalScope": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "project": {
                        "$ref": "#/components/schemas/project"
                    },
                    "permission": {
                        "$ref": "#/components/schemas/permission"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "xml": {
                    "name": "permissionRestriction"
                },
                "description": "Represents permission restrictions of an authentication token."
            },
            "permissionRestrictions": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "permissionRestriction": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/permissionRestriction"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "PermissionRestriction",
                "xml": {
                    "name": "permissionRestrictions"
                },
                "description": "Represents a list of PermissionRestriction entities."
            },
            "pinInfo": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the current object state is enabled (for example, pinned for build `PinInfo` or authorized for agent `AuthorizedInfo`; otherwise, *false*."
                    },
                    "comment": {
                        "$ref": "#/components/schemas/comment"
                    }
                },
                "x-help-article-name": "Pinning Build",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/pinned-build.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "xml": {
                    "name": "pinInfo"
                },
                "description": "Specifies whether the build is pinned. Send PUT requests to the `/app/rest/builds/BUILD_LOCATOR/pinInfo` endpoint to pin or unpin builds."
            },
            "plugin": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "displayName": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "version": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "loadPath": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "parameters": {
                        "$ref": "#/components/schemas/properties"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".plugin.",
                "x-is-data": true,
                "xml": {
                    "name": "plugin"
                },
                "description": "Represents a plugin."
            },
            "plugins": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "plugin": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/plugin"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".plugin.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Plugin",
                "xml": {
                    "name": "plugins"
                },
                "description": "Represents a list of Plugin entities."
            },
            "problem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "identity": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "mutes": {
                        "$ref": "#/components/schemas/mutes"
                    },
                    "investigations": {
                        "$ref": "#/components/schemas/investigations"
                    },
                    "problemOccurrences": {
                        "$ref": "#/components/schemas/problemOccurrences"
                    },
                    "locator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "xml": {
                    "name": "problem"
                },
                "description": "Represents an issue with the test."
            },
            "problemOccurrence": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "identity": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "muted": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "currentlyInvestigated": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "currentlyMuted": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "logAnchor": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "newFailure": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "details": {
                        "type": "string"
                    },
                    "additionalData": {
                        "type": "string"
                    },
                    "problem": {
                        "$ref": "#/components/schemas/problem"
                    },
                    "mute": {
                        "$ref": "#/components/schemas/mute"
                    },
                    "build": {
                        "$ref": "#/components/schemas/build"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "xml": {
                    "name": "problemOccurrence"
                },
                "description": "Represents an instance of a failed test in the specific build."
            },
            "problemOccurrences": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "problemOccurrence": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/problemOccurrence"
                        }
                    },
                    "passed": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "failed": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "newFailed": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "ignored": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "muted": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "ProblemOccurrence",
                "xml": {
                    "name": "problemOccurrences"
                },
                "description": "Represents a paginated list of ProblemOccurrence entities."
            },
            "problems": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "problem": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/problem"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "Problem",
                "xml": {
                    "name": "problems"
                },
                "description": "Represents a paginated list of Problem entities."
            },
            "progress-info": {
                "type": "object",
                "properties": {
                    "percentageComplete": {
                        "type": "integer",
                        "format": "int32",
                        "example": 54,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current completion rate (in percents)."
                    },
                    "elapsedSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "example": 152,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Time (in seconds) passed since the build actually started. Does not include time spent in queue."
                    },
                    "estimatedTotalSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "example": 308,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The currently estimated build duration (in seconds). The sum of `elapsedSeconds`, `leftSeconds`, and post-build activity duration."
                    },
                    "leftSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "example": 154,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The estimated remaining build time (in seconds)"
                    },
                    "currentStageText": {
                        "type": "string",
                        "example": "Step 2/2: *** Start reading the project structure ***",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The description of the currently performed build stage. Combines the build status with the latest build log message."
                    },
                    "outdated": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* for [history builds](https://www.jetbrains.com/help/teamcity/history-build.html). Builds are labeled as outdated (history) if there are finished non-personal builds that processed newer (or same) changes as in this build."
                    },
                    "probablyHanging": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns *true* if the server suspects this build is hanging. Builds are considered hung when their run duration exceeds the estimates and the build sends no new messages for some time."
                    },
                    "lastActivityTime": {
                        "type": "string",
                        "example": "20240510T190625+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The timestamp of the latest build log message."
                    },
                    "outdatedReasonBuild": {
                        "$ref": "#/components/schemas/build"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "xml": {
                    "name": "progress-info"
                },
                "description": "An object that stores the latest information about a currently running build. Returns an empty object for finished and queued builds."
            },
            "project": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "BuildCacheNodeJS",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public project ID. If not specified, TeamCity generates one by removing all non-alphanumeric characters from the project name."
                    },
                    "internalId": {
                        "type": "string",
                        "example": "project302",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internally used read-only project ID."
                    },
                    "uuid": {
                        "type": "string",
                        "example": "37dccab8-ddf9-4f81-a1ad-7815f0e841e1",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The universally unique identifier of this project."
                    },
                    "name": {
                        "type": "string",
                        "example": "Build Cache — NodeJS",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public project name."
                    },
                    "parentProjectId": {
                        "type": "string",
                        "example": "S3BucketsTest",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The ID of a TeamCity project that owns this project. Returns '_Root' if this is project resides on the topmost level."
                    },
                    "parentProjectInternalId": {
                        "type": "string",
                        "example": "project82",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal ID of a TeamCity project that owns this project. This property is deprecated, use `parent` and `parentProjectId` to identify parent projects and retrieve their properties."
                    },
                    "parentProjectName": {
                        "type": "string",
                        "example": "S3 Buckets Test",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public name of a TeamCity project that owns this project. This property is deprecated, use `parent` and `parentProjectId` to identify parent projects and retrieve their properties."
                    },
                    "archived": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if the project is archived; otherwise, **false**."
                    },
                    "virtual": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if this project is dynamically created by TeamCity; **false** if this a regular project created by a user."
                    },
                    "description": {
                        "type": "string",
                        "example": "This subproject contains configurations that carry out delivery jobs",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The optional project description, or **null** if none was set."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/projects/id:BuildCacheNodeJS",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The shortest REST API link to this project (without the TeamCity server URL).",
                        "x-defined-in-base": true
                    },
                    "webUrl": {
                        "type": "string",
                        "example": "https://localhost:8111/project.html?projectId=BuildAndDeploy",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The regular URL of the project."
                    },
                    "links": {
                        "$ref": "#/components/schemas/links"
                    },
                    "parentProject": {
                        "$ref": "#/components/schemas/project"
                    },
                    "readOnlyUI": {
                        "$ref": "#/components/schemas/StateField"
                    },
                    "defaultTemplate": {
                        "$ref": "#/components/schemas/buildType"
                    },
                    "buildTypes": {
                        "$ref": "#/components/schemas/buildTypes"
                    },
                    "templates": {
                        "$ref": "#/components/schemas/buildTypes"
                    },
                    "deploymentDashboards": {
                        "$ref": "#/components/schemas/deploymentDashboards"
                    },
                    "parameters": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "vcsRoots": {
                        "$ref": "#/components/schemas/vcs-roots"
                    },
                    "projectFeatures": {
                        "$ref": "#/components/schemas/projectFeatures"
                    },
                    "projects": {
                        "$ref": "#/components/schemas/projects"
                    },
                    "cloudProfiles": {
                        "$ref": "#/components/schemas/cloudProfiles"
                    },
                    "ancestorProjects": {
                        "$ref": "#/components/schemas/projects"
                    },
                    "locator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Steps, Configurations and Projects",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/project-administrator-guide.html#Steps%2C+Configurations+and+Projects",
                "x-object-type": "DataEntity",
                "x-subpackage": ".project.",
                "x-is-data": true,
                "xml": {
                    "name": "project"
                },
                "description": "A TeamCity project that owns other projects and/or individual build configurations (build types)."
            },
            "projectFeature": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "TRIGGER_71",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only ID of the object. This property is inherited from the base PropEntity class."
                    },
                    "name": {
                        "type": "string",
                        "example": "Py: Merge reports",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public object name. Some objects, like build steps, support public names, while others, like build triggers, do not. This property is inherited from the base PropEntity class."
                    },
                    "type": {
                        "type": "string",
                        "example": "simpleRunner, commit-status-publisher, vcsTrigger",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The object type. This property is inherited from the base PropEntity class."
                    },
                    "disabled": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is disabled and inactive; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "inherited": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is inherited from another object; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current object. This property is inherited from the base PropEntity class.",
                        "x-defined-in-base": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".project.",
                "x-is-data": true,
                "xml": {
                    "name": "projectFeature"
                },
                "description": "Represents a project feature."
            },
            "projectFeatures": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "projectFeature": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/projectFeature"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".project.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "ProjectFeature",
                "xml": {
                    "name": "projectFeatures"
                },
                "description": "Represents a list of ProjectFeature entities."
            },
            "projects": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 39,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the number of Project objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/projects?locator=count:30,start:10",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) to the current collection.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/projects?locator=count:30,start:40",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/projects?locator=count:10,start:0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "project": {
                        "type": "array",
                        "description": "The list of Project entities owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/project"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".project.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "Project",
                "xml": {
                    "name": "projects"
                },
                "description": "Represents a paginated list of Project entities."
            },
            "properties": {
                "type": "object",
                "properties": {
                    "property": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/property"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Property",
                "xml": {
                    "name": "properties"
                },
                "description": "Represents a list of Property entities."
            },
            "property": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "inherited": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "type": {
                        "$ref": "#/components/schemas/type"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "property"
                },
                "description": "Represents a name-value-type relation."
            },
            "related": {
                "type": "object",
                "properties": {
                    "builds": {
                        "$ref": "#/components/schemas/builds"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "related"
                },
                "description": "Represents a link to the Builds entity."
            },
            "relatedEntities": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "entity": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/relatedEntity"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-base-entity": "RelatedEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "x-is-list": true,
                "xml": {
                    "name": "relatedEntities"
                },
                "description": "Represents a list of RelatedEntity entities."
            },
            "relatedEntity": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "unknown": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "internalId": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "text": {
                        "type": "string"
                    },
                    "build": {
                        "$ref": "#/components/schemas/build"
                    },
                    "buildType": {
                        "$ref": "#/components/schemas/buildType"
                    },
                    "project": {
                        "$ref": "#/components/schemas/project"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "group": {
                        "$ref": "#/components/schemas/group"
                    },
                    "test": {
                        "$ref": "#/components/schemas/test"
                    },
                    "problem": {
                        "$ref": "#/components/schemas/problem"
                    },
                    "agent": {
                        "$ref": "#/components/schemas/agent"
                    },
                    "vcsRoot": {
                        "$ref": "#/components/schemas/vcs-root"
                    },
                    "change": {
                        "$ref": "#/components/schemas/change"
                    },
                    "agentPool": {
                        "$ref": "#/components/schemas/agentPool"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "relatedEntity"
                },
                "description": "Represents a related entity."
            },
            "repositoryState": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "string",
                        "example": "20250412T151928+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Specifies when this RepositoryState object was created."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 9,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The length of the `branches` collection.",
                        "x-defined-in-base": true
                    },
                    "branch": {
                        "type": "array",
                        "description": "The list of repository branches.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/branchVersion"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-base-entity": "BranchVersion",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "x-is-list": true,
                "xml": {
                    "name": "repositoryState"
                },
                "description": "Represents the list of the repository Branch entities with their recent revisions."
            },
            "requirements": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "example": "Unmet requirements:\n\tParameter 'teamcity.agent.name' equals 'Custom'; \tParameter 'teamcity.agent.jvm.os.name' equals 'Ubuntu'",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The summary of all unment requirements that make the target agent incompatible with the given configuration."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".agent.",
                "x-is-data": true,
                "xml": {
                    "name": "requirements"
                },
                "description": "The list of unmet requirements that prevents an agent to run the target build. Most commongly used in [`Compatibility`](https://www.jetbrains.com/help/teamcity/rest/compatibility.html) objects."
            },
            "responsibility": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "description": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Multi-node setup",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/multinode-setup.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".nodes.",
                "x-is-data": true,
                "xml": {
                    "name": "responsibility"
                },
                "description": "Represents a single responsibility of a TeamCity node."
            },
            "role": {
                "type": "object",
                "properties": {
                    "roleId": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "scope": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    }
                },
                "x-help-article-name": "Roles",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/role-and-permission.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "xml": {
                    "name": "role"
                },
                "description": "Represents a user/group role."
            },
            "roles": {
                "type": "object",
                "properties": {
                    "role": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/role"
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "xml": {
                    "name": "roles"
                },
                "description": "Represents a list of Role entities."
            },
            "server": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "example": "2025.07 EAP (build 194451)",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The full TeamCity server version, including the build number and, if present, the EAP (early access preview) flag."
                    },
                    "versionMajor": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2025,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The major TeamCity version that points to the year when this version was released."
                    },
                    "versionMinor": {
                        "type": "integer",
                        "format": "int32",
                        "example": 7,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The major TeamCity version that points to the month of `versionMajor` when this version was released."
                    },
                    "startTime": {
                        "type": "string",
                        "example": "20250515T114245+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The most recent date this TeamCity server was started."
                    },
                    "currentTime": {
                        "type": "string",
                        "example": "20250522T122203+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current TeamCity server time, which corresponds to the server's machine time."
                    },
                    "buildNumber": {
                        "type": "string",
                        "example": "194451",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The TeamCity build number."
                    },
                    "buildDate": {
                        "type": "string",
                        "example": "20250514T000000+0200",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The date when this TeamCity version was built by JetBrains."
                    },
                    "internalId": {
                        "type": "string",
                        "example": "5218cd10a-9ed0-4e9c-9150-094039adadd0",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internally used read-only server ID."
                    },
                    "role": {
                        "type": "string",
                        "example": "main_node",
                        "xml": {
                            "attribute": true
                        },
                        "description": "In a multi-node setup, returns the role of the current TeamCity server. Returns `main_node` for single-node setups."
                    },
                    "webUrl": {
                        "type": "string",
                        "example": "https://mybuild.farm.net:8111",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the regular web URL of the server, including the server port."
                    },
                    "projects": {
                        "$ref": "#/components/schemas/href"
                    },
                    "vcsRoots": {
                        "$ref": "#/components/schemas/href"
                    },
                    "builds": {
                        "$ref": "#/components/schemas/href"
                    },
                    "users": {
                        "$ref": "#/components/schemas/href"
                    },
                    "userGroups": {
                        "$ref": "#/components/schemas/href"
                    },
                    "agents": {
                        "$ref": "#/components/schemas/href"
                    },
                    "buildQueue": {
                        "$ref": "#/components/schemas/href"
                    },
                    "agentPools": {
                        "$ref": "#/components/schemas/href"
                    },
                    "investigations": {
                        "$ref": "#/components/schemas/href"
                    },
                    "mutes": {
                        "$ref": "#/components/schemas/href"
                    },
                    "artifactsUrl": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the artifacts isolation URL: the URL of a separate domain that stores build artifacts and mitigates the risk of TeamCity server attacks carried out by users who access these artifacts. If the isolation URL is not set (default setup), returns an empty string."
                    },
                    "nodes": {
                        "$ref": "#/components/schemas/href"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true,
                "xml": {
                    "name": "server"
                },
                "description": "Stores extensive information about the current TeamCity server instance."
            },
            "serverAuthSettings": {
                "type": "object",
                "properties": {
                    "allowGuest": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "**true** if users can log into TeamCity as [guests](https://www.jetbrains.com/help/teamcity/enabling-guest-login.html); **false** if only registered users can access TeamCity."
                    },
                    "guestUsername": {
                        "type": "string",
                        "example": "guest",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The default username for all users logged in as guests."
                    },
                    "welcomeText": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The custom text displayed on the TeamCity log in page."
                    },
                    "collapseLoginForm": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "**true** if the username/password fields on the login page is collapsed by default, promoting authentication via third-party services. **false** if the username/password fields are initially visible."
                    },
                    "perProjectPermissions": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "**true** if the [per-project authorization mode](https://www.jetbrains.com/help/teamcity/managing-roles-and-permissions.html#Per-Project+Authorization+Mode) is enabled; otherwise, **false**."
                    },
                    "emailVerification": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "**true** if users must enter their emails on registration; **false** if they can skip this setting."
                    },
                    "buildAuthenticationMode": {
                        "type": "string",
                        "example": "strict",
                        "xml": {
                            "attribute": true
                        },
                        "description": "**strict** if builds can access only their own projects, projects that own VCS roots, and artifact dependencies projects. **lax** if builds have elevated permissions to access any project on the server (the default behavior)."
                    },
                    "modules": {
                        "$ref": "#/components/schemas/AuthModules"
                    }
                },
                "x-help-article-name": "Configuring Authentication Settings",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-authentication-settings.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true,
                "xml": {
                    "name": "serverAuthSettings"
                },
                "description": "Stores settings that manage users accessing the TeamCity server.Use the `/app/rest/server/authSettings` endpoint to view and edit these settings, or navigate to **Admin | Authentication** page in TeamCity UI."
            },
            "serverGlobalSettings": {
                "type": "object",
                "properties": {
                    "defaultVCSCheckInterval": {
                        "type": "integer",
                        "format": "int32",
                        "example": 60,
                        "xml": {
                            "attribute": true
                        },
                        "description": "An Integer value that specifies how often (in seconds) TeamCity polls VCS repositories for changes. The default value is 60 seconds."
                    },
                    "enforceDefaultVCSCheckInterval": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "**true**, if project administrators cannot set the polling interval in VCS root settings lower than the `defaultVCSCheckInterval`; otherwise, **false**."
                    },
                    "artifactsDomainIsolation": {
                        "type": "boolean",
                        "example": true,
                        "xml": {
                            "attribute": true
                        },
                        "description": "**true** if TeamCity publishes build artifacts to a separate domain; **false** if the artifacts can be accessed from the regular TeamCity server URL."
                    },
                    "artifactsUrl": {
                        "type": "string",
                        "example": "https://my-artifacts-server.labs.gg",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If `artifactsDomainIsolation` is set to **true**, this property returns the URL of the artifacts isolation domain."
                    },
                    "useEncryption": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "**true** if TeamCity encrypts all sensitive values using a custom key; **false** if it uses the defaul scrambled mechanism for these values."
                    },
                    "rootUrl": {
                        "type": "string",
                        "example": "https://localhost:8111\"",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The TeamCity server URL."
                    },
                    "encryptionKey": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the encryption key. This property is hidden from the payload."
                    },
                    "artifactDirectories": {
                        "type": "string",
                        "example": "system/artifacts\\r\\nsystem/bin/teamcity/artifacts",
                        "xml": {
                            "attribute": true
                        },
                        "description": "A String containing the concatenated paths to the artifact directories used by the server. Paths are separated using the new line characters."
                    },
                    "defaultQuietPeriod": {
                        "type": "integer",
                        "format": "int32",
                        "example": 60,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The delay (in seconds) between a moment TeamCity detects a new VCS change and a moment a new build processing this change starts. Individual build configuration triggers can override this global setting."
                    },
                    "defaultExecutionTimeout": {
                        "type": "integer",
                        "format": "int32",
                        "example": 0,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The maximum allowed build duration. Zero or negative values mean no time limit."
                    },
                    "maxArtifactsNumber": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1000,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The maximum number of artifacts that can be published per build, or `-1` if there is no limit. This number does not include hidden artifacts."
                    },
                    "maxArtifactSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 314572800,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The maximum allowed artifact size (in bytes), or `-1` if there is no size limit. Artifacts that exceed these limit will not be published."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".server.",
                "x-is-data": true,
                "xml": {
                    "name": "serverGlobalSettings"
                },
                "description": "Stores global TeamCity server settings that affect all projects on this server. These settings are accessible via TeamCity UI from the **Admin | Global Settings** page. Use the `/app/rest/server/globalSettings` to view and edit these settings."
            },
            "snapshot-dependencies": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of `snapshot-dependency` objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "snapshot-dependency": {
                        "type": "array",
                        "description": "The list of `snapshot-dependency` objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/snapshot-dependency"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "SnapshotDependency",
                "xml": {
                    "name": "snapshot-dependencies"
                },
                "description": "Represents a list of SnapshotDependency entities."
            },
            "snapshot-dependency": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "TRIGGER_71",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only ID of the object. This property is inherited from the base PropEntity class."
                    },
                    "name": {
                        "type": "string",
                        "example": "Py: Merge reports",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public object name. Some objects, like build steps, support public names, while others, like build triggers, do not. This property is inherited from the base PropEntity class."
                    },
                    "type": {
                        "type": "string",
                        "example": "simpleRunner, commit-status-publisher, vcsTrigger",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The object type. This property is inherited from the base PropEntity class."
                    },
                    "disabled": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is disabled and inactive; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "inherited": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is inherited from another object; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current object. This property is inherited from the base PropEntity class.",
                        "x-defined-in-base": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "source-buildType": {
                        "$ref": "#/components/schemas/buildType"
                    }
                },
                "x-help-article-name": "Snapshot Dependencies",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/snapshot-dependencies.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "snapshot-dependency"
                },
                "description": "A snapshot dependency that specifies the relation between the current (dependent) downstream configuration of a build chain, and an upstream configuration on which the current configuration depends."
            },
            "step": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "TRIGGER_71",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only ID of the object. This property is inherited from the base PropEntity class."
                    },
                    "name": {
                        "type": "string",
                        "example": "Py: Merge reports",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public object name. Some objects, like build steps, support public names, while others, like build triggers, do not. This property is inherited from the base PropEntity class."
                    },
                    "type": {
                        "type": "string",
                        "example": "simpleRunner, commit-status-publisher, vcsTrigger",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The object type. This property is inherited from the base PropEntity class."
                    },
                    "disabled": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is disabled and inactive; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "inherited": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is inherited from another object; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current object. This property is inherited from the base PropEntity class.",
                        "x-defined-in-base": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "shortDescription": {
                        "type": "string",
                        "example": "Custom script: echo 'Hello World!'",
                        "description": "The short description of this build step, displayed in the list of configuration steps in TeamCity UI."
                    }
                },
                "x-help-article-name": "Configuring Build Steps",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-build-steps.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "step"
                },
                "description": "A build step: the smallest unit of a CI/CD routine within a build configuration or template, encapsulating a set of indivisible build instructions."
            },
            "steps": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 12,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of build steps in this collection.",
                        "x-defined-in-base": true
                    },
                    "step": {
                        "type": "array",
                        "description": "Build steps owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/step"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Step",
                "xml": {
                    "name": "steps"
                },
                "description": "Represents a list of Step entities."
            },
            "tag": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "nightly",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public tag name visible in TeamCity UI."
                    },
                    "owner": {
                        "$ref": "#/components/schemas/user"
                    },
                    "private": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Add Tags to Build",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/build-actions.html#Add+Tags+to+Build",
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "xml": {
                    "name": "tag"
                },
                "description": "A single build tag. To remove a specific tag from a build, send a PUT request to the `/app/rest/builds/BUILD_LOCATOR?locator=name:NAME` endpoint with an empty `name` value."
            },
            "tags": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of Tag objects in this list.",
                        "x-defined-in-base": true
                    },
                    "tag": {
                        "type": "array",
                        "description": "The list of tags owned by this collection that satisfy the given locator.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/tag"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Tag",
                "xml": {
                    "name": "tags"
                },
                "description": "Represents a list of Tag entities."
            },
            "test": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "mutes": {
                        "$ref": "#/components/schemas/mutes"
                    },
                    "investigations": {
                        "$ref": "#/components/schemas/investigations"
                    },
                    "testOccurrences": {
                        "$ref": "#/components/schemas/testOccurrences"
                    },
                    "parsedTestName": {
                        "$ref": "#/components/schemas/ParsedTestName"
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "locator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "xml": {
                    "name": "test"
                },
                "description": "Represents a test."
            },
            "testCounters": {
                "type": "object",
                "properties": {
                    "ignored": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "failed": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "muted": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "success": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "all": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "newFailed": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int64",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "xml": {
                    "name": "testCounters"
                },
                "description": "Represents a test results counter (how many times this test was successful/failed/muted/ignored)."
            },
            "testOccurrence": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "status": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "UNKNOWN",
                            "NORMAL",
                            "WARNING",
                            "FAILURE",
                            "ERROR"
                        ]
                    },
                    "ignored": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "runOrder": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "newFailure": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "muted": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "currentlyMuted": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "currentlyInvestigated": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "ignoreDetails": {
                        "type": "string"
                    },
                    "details": {
                        "type": "string"
                    },
                    "test": {
                        "$ref": "#/components/schemas/test"
                    },
                    "mute": {
                        "$ref": "#/components/schemas/mute"
                    },
                    "build": {
                        "$ref": "#/components/schemas/build"
                    },
                    "firstFailed": {
                        "$ref": "#/components/schemas/testOccurrence"
                    },
                    "nextFixed": {
                        "$ref": "#/components/schemas/testOccurrence"
                    },
                    "invocations": {
                        "$ref": "#/components/schemas/testOccurrences"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/testRunMetadata"
                    },
                    "logAnchor": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "xml": {
                    "name": "testOccurrence"
                },
                "description": "Represents a relation between a test and the specific build."
            },
            "testOccurrences": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "testOccurrence": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/testOccurrence"
                        }
                    },
                    "testCounters": {
                        "$ref": "#/components/schemas/testCounters"
                    },
                    "ignored": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "failed": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "passed": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "newFailed": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "muted": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "TestOccurrence",
                "xml": {
                    "name": "testOccurrences"
                },
                "description": "Represents a paginated list of TestOccurrence entities."
            },
            "testRunMetadata": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "typedValues": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/typedValue"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-base-entity": "TypedValue",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "x-is-list": true,
                "xml": {
                    "name": "testRunMetadata"
                },
                "description": "Represents a list of TypedValue entities."
            },
            "tests": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "myTestCounters": {
                        "$ref": "#/components/schemas/testCounters"
                    },
                    "nextHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "test": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/test"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "Test",
                "xml": {
                    "name": "tests"
                },
                "description": "Represents a paginated list of Test entities."
            },
            "token": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "expirationTime": {
                        "type": "string",
                        "format": "date-time",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "permissionRestrictions": {
                        "$ref": "#/components/schemas/permissionRestrictions"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "xml": {
                    "name": "token"
                },
                "description": "Represents an authentication token."
            },
            "tokens": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "token": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/token"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Token",
                "xml": {
                    "name": "tokens"
                },
                "description": "Represents a list of Token entities."
            },
            "trigger": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "TRIGGER_71",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only ID of the object. This property is inherited from the base PropEntity class."
                    },
                    "name": {
                        "type": "string",
                        "example": "Py: Merge reports",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public object name. Some objects, like build steps, support public names, while others, like build triggers, do not. This property is inherited from the base PropEntity class."
                    },
                    "type": {
                        "type": "string",
                        "example": "simpleRunner, commit-status-publisher, vcsTrigger",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The object type. This property is inherited from the base PropEntity class."
                    },
                    "disabled": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is disabled and inactive; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "inherited": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **rue** if the object is inherited from another object; otherwise, **false**. This property is inherited from the base PropEntity class."
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns the shortened (without the server URL) link to the current object. This property is inherited from the base PropEntity class.",
                        "x-defined-in-base": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "buildCustomization": {
                        "$ref": "#/components/schemas/BuildTriggerCustomization"
                    }
                },
                "x-help-article-name": "Configuring Build Triggers",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-build-triggers.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "trigger"
                },
                "description": "A build trigger that automatically starts new builds when specified criteria are met."
            },
            "triggers": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 5,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of triggers in this collection.",
                        "x-defined-in-base": true
                    },
                    "trigger": {
                        "type": "array",
                        "description": "The list of triggers owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/trigger"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "Trigger",
                "xml": {
                    "name": "triggers"
                },
                "description": "Represents a list of Trigger entities."
            },
            "type": {
                "type": "object",
                "properties": {
                    "rawValue": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".",
                "x-is-data": true,
                "xml": {
                    "name": "type"
                },
                "description": "Represents a build parameter type string."
            },
            "typedValue": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".problem.",
                "x-is-data": true,
                "xml": {
                    "name": "typedValue"
                },
                "description": "Represents a name-value-type relation."
            },
            "typedValueSets": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "valueSet": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/TypedValueSet"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".project.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "ValueSet",
                "xml": {
                    "name": "typedValueSets"
                },
                "description": "List of TypedValueSets."
            },
            "user": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "email": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "lastLogin": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "password": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "hasPassword": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "realm": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "roles": {
                        "$ref": "#/components/schemas/roles"
                    },
                    "groups": {
                        "$ref": "#/components/schemas/groups"
                    },
                    "locator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "avatars": {
                        "$ref": "#/components/schemas/userAvatars"
                    },
                    "enabled2FA": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "User Account",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/user-account.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "xml": {
                    "name": "user"
                },
                "description": "Represents a user."
            },
            "userApprovalRule": {
                "type": "object",
                "properties": {
                    "approved": {
                        "type": "boolean",
                        "example": true,
                        "description": "Returns *true* if this user already approved the build; otherwise, *false*"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.approval.",
                "x-is-data": true,
                "xml": {
                    "name": "userApprovalRule"
                },
                "description": "An individual user approval rule and its current status for the given build."
            },
            "userApprovals": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 4,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of UserApprovalRule objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "userApproval": {
                        "type": "array",
                        "description": "The list of UserApprovalRule stored in this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/userApprovalRule"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-base-entity": "UserApprovalRule",
                "x-subpackage": ".build.approval.",
                "x-is-data": true,
                "x-is-list": true,
                "xml": {
                    "name": "userApprovals"
                },
                "description": "Represents a list of UserApprovalRule entities."
            },
            "userAvatars": {
                "type": "object",
                "properties": {
                    "urlToSize20": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "urlToSize28": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "urlToSize32": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "urlToSize40": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "urlToSize56": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "urlToSize64": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "urlToSize80": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "xml": {
                    "name": "userAvatars"
                },
                "description": "Represents a group of links to the user's avatars"
            },
            "users": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "x-defined-in-base": true
                    },
                    "user": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/user"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".user.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "User",
                "xml": {
                    "name": "users"
                },
                "description": "Represents a list of User entities."
            },
            "vcs-root": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "Builders_MainGitRoot",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The unique ID of the root. Typically consists of trunkated parent project ID and root name."
                    },
                    "internalId": {
                        "type": "string",
                        "example": "599",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only ID of the root."
                    },
                    "uuid": {
                        "type": "string",
                        "example": "02308f8f-60f8-4b28-a964-7911ef0159eb",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only UUID of the root."
                    },
                    "name": {
                        "type": "string",
                        "example": "MainGitRoot",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public root name displayed in TeamCity UI."
                    },
                    "vcsName": {
                        "type": "string",
                        "example": "jetbrains.git",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The type of a VCS provider to which this root connects."
                    },
                    "modificationCheckInterval": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The interval (in seconds) for polling VCS for new changes. Equals **null** if this root uses default server polling interval."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/vcs-roots/id:Builders_MainGitRoot",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The short (without the TeamCity server address) link to this VCS root.",
                        "x-defined-in-base": true
                    },
                    "project": {
                        "$ref": "#/components/schemas/project"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "vcsRootInstances": {
                        "$ref": "#/components/schemas/vcs-root-instances"
                    },
                    "repositoryIdStrings": {
                        "$ref": "#/components/schemas/items"
                    },
                    "locator": {
                        "type": "string",
                        "example": "id:Builders_MainGitRoot",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The part of the `href` property value that specifies the object locator. Ommitted from regular responses."
                    },
                    "projectLocator": {
                        "type": "string",
                        "example": "Obsolete",
                        "xml": {
                            "attribute": true
                        },
                        "description": "This property is deprecated."
                    }
                },
                "x-help-article-name": "Configuring VCS Roots",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-roots.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "xml": {
                    "name": "vcs-root"
                },
                "description": "A VCS root stores repository connection settings. TeamCity uses VCS roots to create [VcsRootInstance](vcsRootInstance.md) objects, enabling build configurations and features to interact with remote repositories for source checkout, build status publishing, and more."
            },
            "vcs-root-entries": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of `vcs-root-entry` objects in this collection.",
                        "x-defined-in-base": true
                    },
                    "vcs-root-entry": {
                        "type": "array",
                        "description": "The list of `vcs-root-entry` objects owned by this collection.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/vcs-root-entry"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "VcsRootEntry",
                "xml": {
                    "name": "vcs-root-entries"
                },
                "description": "Represents a list of VcsRootEntry entities."
            },
            "vcs-root-entry": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "MyProject_CustomRootFromConfig",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The ID of the attached VCS root."
                    },
                    "inherited": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "This is the internal property and is not intented to be used."
                    },
                    "vcs-root": {
                        "$ref": "#/components/schemas/vcs-root"
                    },
                    "checkout-rules": {
                        "type": "string",
                        "example": "-:src/help\\n+:src=>production/sources\\n+:src/samples=>./samples",
                        "description": "Checkout rules that allow configurations to partially checkout remote repositories."
                    }
                },
                "x-object-type": "DataEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "xml": {
                    "name": "vcs-root-entry"
                },
                "description": "A VCS root attached to a configuration coupled with this configuration's checkout rules."
            },
            "vcs-root-instance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "261",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal read-only ID of this root instance."
                    },
                    "vcs-root-id": {
                        "type": "string",
                        "example": "MyProject_CustomRootFromConfig",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The ID of a parent VcsRoot."
                    },
                    "vcsRootInternalId": {
                        "type": "string",
                        "example": "599",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal ID of a parent VcsRoot"
                    },
                    "name": {
                        "type": "string",
                        "example": "customRootFromConfig",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public name of a parent VcsRoot."
                    },
                    "vcsName": {
                        "type": "string",
                        "example": "jetbrains.git",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The type of a VCS provider to which the parent VcsRoot connects."
                    },
                    "modificationCheckInterval": {
                        "type": "integer",
                        "format": "int32",
                        "example": 60,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The actual interval (in seconds) for polling VCS for new changes."
                    },
                    "commitHookMode": {
                        "type": "boolean",
                        "example": false,
                        "xml": {
                            "attribute": true
                        },
                        "description": "Returns **true** if the configuration uses post-commit hooks to get new repository changes' notifications; **false** if pending changes are retrieved via periodic repository polling."
                    },
                    "lastVersion": {
                        "type": "string",
                        "example": "6feff116ab9ad0d3af686526a6ff96272620e70f",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The latest revision of a remote repository branch targeted by this root instance."
                    },
                    "lastVersionInternal": {
                        "type": "string",
                        "example": "6feff116ab9ad0d3af686526a6ff96272620e70f",
                        "xml": {
                            "attribute": true
                        },
                        "description": "This is the internal property and is not intented to be used."
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/vcs-root-instances/id:264",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The short (without TeamCity server address) link to this root instance.",
                        "x-defined-in-base": true
                    },
                    "vcs-root": {
                        "$ref": "#/components/schemas/vcs-root"
                    },
                    "status": {
                        "$ref": "#/components/schemas/vcsStatus"
                    },
                    "repositoryState": {
                        "$ref": "#/components/schemas/repositoryState"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/properties"
                    },
                    "repositoryIdStrings": {
                        "$ref": "#/components/schemas/items"
                    },
                    "projectLocator": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "VCS Settings",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-settings.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "xml": {
                    "name": "vcs-root-instance"
                },
                "description": "An instance of the VCS root. VCS roots are abstract storages of VCS connection settings that cannot be used directly. Build configurations, triggers, build features, and other TeamCity entities use instances of corresponding VCS roots to perform their tasks (checkout sources, post build statuses, and so on). If a root includes parameter references in its settings (for example, `{'name':'branch','value':'%main-branch%'}`), it spawns a separate instance for each configuration that has a unique value for that parameter. Otherwise, if all root settings are static, it generates one instance that can be attached to any number of build configurations."
            },
            "vcs-root-instances": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of root instances in this collection.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/vcs-root-instances?locator=count:10,start:20",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) to the current collection.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/vcs-root-instances?locator=count:10,start:30",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/vcs-root-instances?locator=count:10,start:10",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "vcs-root-instance": {
                        "type": "array",
                        "description": "The list of root instances owned by this collection that satisfy the given locator.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/vcs-root-instance"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "VcsRootInstance",
                "xml": {
                    "name": "vcs-root-instances"
                },
                "description": "Represents a paginated list of VcsRootInstance entities."
            },
            "vcs-roots": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The number of roots in this collection.",
                        "x-defined-in-base": true
                    },
                    "href": {
                        "type": "string",
                        "example": "/app/rest/vcs-roots?locator=count:10,start:100",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The relative link (without the server URL) to the current collection.",
                        "x-defined-in-base": true
                    },
                    "nextHref": {
                        "type": "string",
                        "example": "/app/rest/vcs-roots?locator=count:10,start:110",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.",
                        "x-defined-in-base": true
                    },
                    "prevHref": {
                        "type": "string",
                        "example": "/app/rest/vcs-roots?locator=count:10,start:90",
                        "xml": {
                            "attribute": true
                        },
                        "description": "If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.",
                        "x-defined-in-base": true
                    },
                    "vcs-root": {
                        "type": "array",
                        "description": "The list of roots owned by this collection that satisfy the given locator.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/vcs-root"
                        }
                    }
                },
                "x-object-type": "PaginatedEntity",
                "x-subpackage": ".buildType.",
                "x-is-data": true,
                "x-is-list": true,
                "x-is-paginated": true,
                "x-base-entity": "VcsRoot",
                "xml": {
                    "name": "vcs-roots"
                },
                "description": "Represents a paginated list of VcsRoot entities."
            },
            "vcsLabel": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "example": "EAP",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The public VCS tag name"
                    },
                    "failureReason": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The reason why the sources could not be labeled. Provides additional information why the `status` field returns FAILED."
                    },
                    "status": {
                        "type": "string",
                        "example": "SUCCESSFUL_SET",
                        "xml": {
                            "attribute": true
                        },
                        "description": "The status of the labeling (tagging) operation. Possible values: \n\n* *UNKNOWN* — the operation status is currently unknown.\n* *SUCCESSFUL_SET* — the sources were successfully tagged.\n* *IS_BEING_SET* — the labeling (tagging) process is currently ongoing.\n* *FAILED* — the sources could not be labeled.\n* *DISABLED_FOR_THE_ROOT* — the current root is excluded from the labeling process.\n* *LABELING_NOT_SUPPORTED* — VCS does not support labeling.",
                        "enum": [
                            "UNKNOWN",
                            "SUCCESSFUL_SET",
                            "IS_BEING_SET",
                            "FAILED",
                            "DISABLED_FOR_THE_ROOT",
                            "LABELING_NOT_SUPPORTED"
                        ]
                    },
                    "buildId": {
                        "type": "integer",
                        "format": "int64",
                        "example": 9629,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The internal ID of the build during which the sources were tagged."
                    },
                    "vcs-root-instance": {
                        "$ref": "#/components/schemas/vcs-root-instance"
                    }
                },
                "x-help-article-name": "Labeling Sources",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/vcs-labeling.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "xml": {
                    "name": "vcsLabel"
                },
                "description": "The VCS-side tag that labels sources of this build."
            },
            "vcsLabels": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "example": 4,
                        "xml": {
                            "attribute": true
                        },
                        "description": "The current number of VcsLabel objects in this list.",
                        "x-defined-in-base": true
                    },
                    "vcsLabel": {
                        "type": "array",
                        "description": "The list of VcsLabels owned by this collection that satisfy the given locator.",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/vcsLabel"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-subpackage": ".build.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "VcsLabel",
                "xml": {
                    "name": "vcsLabels"
                },
                "description": "Represents a list of VcsLabel entities."
            },
            "vcsStatus": {
                "type": "object",
                "properties": {
                    "current": {
                        "$ref": "#/components/schemas/VcsCheckStatus"
                    },
                    "previous": {
                        "$ref": "#/components/schemas/VcsCheckStatus"
                    }
                },
                "x-help-article-name": "VCS Root",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/configuring-vcs-roots.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".change.",
                "x-is-data": true,
                "xml": {
                    "name": "vcsStatus"
                },
                "description": "Stores two latest VcsCheckStatus objects that store information about changes checks."
            },
            "versionedSettingsConfig": {
                "type": "object",
                "properties": {
                    "format": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "applyChangesInDependenciesAndVcsSettings": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "synchronizationMode": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "useParentProjectSettings",
                            "disabled",
                            "enabled"
                        ]
                    },
                    "allowUIEditing": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "storeSecureValuesOutsideVcs": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "portableDsl": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "importDecision": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "overrideInVCS",
                            "importFromVCS"
                        ]
                    },
                    "showSettingsChanges": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "vcsRootId": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "buildSettingsMode": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "alwaysUseCurrent",
                            "useCurrentByDefault",
                            "useFromVCS"
                        ]
                    },
                    "settingsPath": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Storing Project Settings in Version Control",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".versionedSettings.",
                "x-is-data": true,
                "xml": {
                    "name": "versionedSettingsConfig"
                },
                "description": "Represents a Versioned Settings Config."
            },
            "versionedSettingsContextParameter": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Storing Project Settings in Version Control",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".versionedSettings.",
                "x-is-data": true,
                "xml": {
                    "name": "versionedSettingsContextParameter"
                },
                "description": "Represents a Versioned Settings Context Parameter."
            },
            "versionedSettingsContextParameters": {
                "type": "object",
                "properties": {
                    "versionedSettingsContextParameter": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/versionedSettingsContextParameter"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-help-article-name": "Storing Project Settings in Version Control",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
                "x-subpackage": ".versionedSettings.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "VersionedSettingsContextParameter",
                "xml": {
                    "name": "versionedSettingsContextParameters"
                },
                "description": "Represents a Versioned Settings Context Parameters."
            },
            "versionedSettingsError": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "file": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "stackTraceLines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "x-help-article-name": "Storing Project Settings in Version Control",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".versionedSettings.",
                "x-is-data": true,
                "xml": {
                    "name": "versionedSettingsError"
                },
                "description": "Represents a Versioned Settings Error."
            },
            "versionedSettingsStatus": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": [
                            "info",
                            "warn"
                        ]
                    },
                    "timestamp": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "missingContextParameters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dslOutdated": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "versionedSettingsError": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/versionedSettingsError"
                        }
                    }
                },
                "x-help-article-name": "Storing Project Settings in Version Control",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html",
                "x-object-type": "DataEntity",
                "x-subpackage": ".versionedSettings.",
                "x-is-data": true,
                "xml": {
                    "name": "versionedSettingsStatus"
                },
                "description": "Represents a Versioned Settings Status."
            },
            "versionedSettingsToken": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "description": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "x-help-article-name": "Managing Tokens",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens",
                "x-object-type": "DataEntity",
                "x-subpackage": ".versionedSettings.",
                "x-is-data": true,
                "xml": {
                    "name": "versionedSettingsToken"
                },
                "description": "Represents a Versioned Settings Token."
            },
            "versionedSettingsTokens": {
                "type": "object",
                "properties": {
                    "versionedSettingsToken": {
                        "type": "array",
                        "x-is-first-container-var": true,
                        "items": {
                            "$ref": "#/components/schemas/versionedSettingsToken"
                        }
                    }
                },
                "x-object-type": "ListEntity",
                "x-help-article-name": "Managing Tokens",
                "x-help-article-link": "https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens",
                "x-subpackage": ".versionedSettings.",
                "x-is-data": true,
                "x-is-list": true,
                "x-base-entity": "VersionedSettingsToken",
                "xml": {
                    "name": "versionedSettingsTokens"
                },
                "description": "Represents a Versioned Settings Tokens."
            }
        }
    }
}